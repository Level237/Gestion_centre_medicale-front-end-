{"version":3,"sources":["webpack:///src/app/contacts/contacts-routing.module.ts","webpack:///src/app/contacts/contacts.component.html","webpack:///src/app/contacts/contacts.component.ts","webpack:///src/app/contacts/contacts.model.ts","webpack:///src/app/contacts/contacts.module.ts","webpack:///src/app/contacts/contacts.service.ts","webpack:///src/app/contacts/delete/delete.component.ts","webpack:///src/app/contacts/delete/delete.component.html","webpack:///src/app/contacts/form/form.component.html","webpack:///src/app/contacts/form/form.component.ts"],"names":["routes","path","component","ContactsComponent","AdvanceTableRoutingModule","RouterModule","$event","stopPropagation","selection","httpClient","dialog","contactsService","snackBar","filterToggle","displayedColumns","SelectionModel","contextMenuPosition","x","y","loadData","tempDirection","localStorage","getItem","dialogRef","open","FormComponent","data","contacts","action","direction","subs","sink","afterClosed","subscribe","result","exampleDatabase","dataChange","value","unshift","getDialogData","refreshTable","showNotification","row","height","width","console","log","id","foundIndex","findIndex","DeleteComponent","splice","paginator","_changePageSize","pageSize","numSelected","selected","length","numRows","dataSource","renderedData","isAllSelected","clear","forEach","select","totalSelect","item","index","d","ContactsService","ExampleDataSource","sort","fromEvent","filter","nativeElement","colorName","text","placementFrom","placementAlign","duration","verticalPosition","horizontalPosition","panelClass","UnsubscribeOnDestroyAdapter","MatPaginator","MatSort","MatMenuTrigger","removeSelectedRows","addNew","refresh","_sort","filterChange","BehaviorSubject","filteredData","pageIndex","next","displayDataChanges","sortChange","page","getAllContactss","merge","pipe","map","slice","searchStr","name","birthDate","email","mobile","address","toLowerCase","indexOf","sortedData","sortData","startIndex","active","a","b","propertyA","propertyB","valueA","isNaN","valueB","DataSource","Contacts","getRandomID","img","avatar","formatDate","Date","note","S4","Math","random","toString","substring","ContactsModule","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatSnackBarModule","MatButtonModule","MatIconModule","MatRadioModule","MatSelectModule","MatCheckboxModule","MatCardModule","MatDatepickerModule","MatDialogModule","MatSortModule","MatToolbarModule","MaterialFileInputModule","MatMenuModule","MatProgressSpinnerModule","API_URL","isTblLoading","dialogData","get","error","message","close","deleteContacts","MAT_DIALOG_DATA","confirmDelete","onNoClick","fb","isDetails","formControl","FormControl","Validators","dialogTitle","contactsForm","createContactForm","hasError","group","addContacts","getRawValue"],"mappings":"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","file":"src_app_contacts_contacts_module_ts-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { ContactsComponent } from \"./contacts.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: ContactsComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdvanceTableRoutingModule {}\r\n","<section class=\"content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"block-header\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <ul class=\"breadcrumb breadcrumb-style \">\r\n            <li class=\"breadcrumb-item\">\r\n              <h4 class=\"page-title\">All Contacts</h4>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-1\">\r\n              <a href=\"#\" onClick=\"return false;\">\r\n                <i class=\"fas fa-home\"></i> Home</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-2\">\r\n              <a href=\"#\" onClick=\"return false;\">Contacts</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\">All</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"tabbable-line\">\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n              <div class=\"card\">\r\n                <div class=\"body\">\r\n                  <div class=\"table-responsive\">\r\n                    <div class=\"materialTableHeader\">\r\n                      <div class=\"row\">\r\n                        <div class=\"col-8\">\r\n                          <ul class=\"header-buttons-left ms-0\">\r\n                            <li class=\"dropdown\">\r\n                              <h2>\r\n                                <strong>Contacts</strong></h2>\r\n                            </li>\r\n                            <li class=\"dropdown m-l-20\">\r\n                              <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\r\n                              <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\"\r\n                                aria-label=\"Search box\">\r\n                            </li>\r\n                            <li>\r\n                              <div class=\"icon-button-demo m-l-10\" [hidden]=!selection.hasValue()>\r\n                                <button mat-mini-fab color=\"warn\" (click)=\"removeSelectedRows()\">\r\n                                  <mat-icon class=\"col-white\">delete\r\n                                  </mat-icon>\r\n                                </button>\r\n                              </div>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                        <div class=\"col-4\">\r\n                          <ul class=\"header-buttons\">\r\n                            <li>\r\n                              <div class=\"icon-button-demo\">\r\n                                <button mat-mini-fab color=\"primary\" (click)=\"addNew()\">\r\n                                  <mat-icon class=\"col-white\">add</mat-icon>\r\n                                </button>\r\n                              </div>\r\n                            </li>\r\n                            <li>\r\n                              <div class=\"icon-button-demo\">\r\n                                <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\r\n                                  <mat-icon class=\"col-white\">refresh\r\n                                  </mat-icon>\r\n                                </button>\r\n                              </div>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <mat-table #table [dataSource]=\"dataSource\" matSort class=\"mat-cell\">\r\n                      <!-- Checkbox Column -->\r\n                      <ng-container matColumnDef=\"select\">\r\n                        <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">\r\n                          <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                            [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">\r\n                          </mat-checkbox>\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">\r\n                          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                            (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\"\r\n                            [ngClass]=\"'tbl-checkbox'\">\r\n                          </mat-checkbox>\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <!-- ID Column -->\r\n                      <ng-container matColumnDef=\"id\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Id\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.id}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"img\">\r\n                        <mat-header-cell mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\"> Image\r\n                        </mat-header-cell>\r\n                        <mat-cell mat-cell *matCellDef=\"let row\" class=\"table-img tbl-col-width-per-6\"> <img\r\n                            [src]=\"row.img\" />\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"name\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Name\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.name}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"mobile\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Mobile\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.mobile}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"email\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Email\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.email}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"birthDate\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Birth Date\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">\r\n                          {{row.birthDate | date: 'MM/dd/yyyy'}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"address\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Address\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\" class=\"column-nowrap\"> {{row.address}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"note\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Note\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.note}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <!-- actions -->\r\n                      <ng-container matColumnDef=\"actions\">\r\n                        <mat-header-cell class=\"psl-3 tbl-col-width-per-10\" *matHeaderCellDef>Actions\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row; let i=index;\" class=\"psl-3 tbl-col-width-per-10\">\r\n                          <button mat-icon-button [matMenuTriggerFor]=\"menu\" (click)=\"$event.stopPropagation()\">\r\n                            <mat-icon>more_vert</mat-icon>\r\n                          </button>\r\n                          <mat-menu #menu=\"matMenu\">\r\n                            <button mat-menu-item (click)=\"editCall(row)\">\r\n                              <i class=\"material-icons-two-tone align-middle msr-2\">create</i>\r\n                              <span>Edit Contact</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"deleteItem(row)\">\r\n                              <i class=\"material-icons-two-tone align-middle msr-2\">delete_forever</i>\r\n                              <span>Delete Contact</span>\r\n                            </button>\r\n                          </mat-menu>\r\n                        </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <mat-header-row *matHeaderRowDef=\"displayedColumns\">\r\n                      </mat-header-row>\r\n                      <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"detailsCall(row)\"\r\n                        [style.cursor]=\"'pointer'\" matRipple>\r\n                      </mat-row>\r\n                    </mat-table>\r\n                    <!-- Loading spinner -->\r\n                    <div *ngIf=\"exampleDatabase.isTblLoading\" class=\"tbl-spinner\">\r\n                      <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\r\n                      </mat-progress-spinner>\r\n                    </div>\r\n                    <div *ngIf=\"!exampleDatabase.isTblLoading\" class=\"no-results\"\r\n                      [style.display]=\"dataSource.renderedData.length == 0 ? '' : 'none'\">\r\n                      No results\r\n                    </div>\r\n                    <mat-paginator #paginator [length]=\"dataSource.filteredData.length\" [pageIndex]=\"0\" [pageSize]=\"10\"\r\n                      [pageSizeOptions]=\"[5, 10, 25, 100]\">\r\n                    </mat-paginator>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Component, ElementRef, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ContactsService } from \"./contacts.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { MatPaginator } from \"@angular/material/paginator\";\r\nimport { MatSort } from \"@angular/material/sort\";\r\nimport { Contacts } from \"./contacts.model\";\r\nimport { DataSource } from \"@angular/cdk/collections\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { BehaviorSubject, fromEvent, merge, Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { MatMenuTrigger } from \"@angular/material/menu\";\r\nimport { SelectionModel } from \"@angular/cdk/collections\";\r\nimport { FormComponent } from \"./form/form.component\";\r\nimport { DeleteComponent } from \"./delete/delete.component\";\r\nimport { UnsubscribeOnDestroyAdapter } from \"../shared/UnsubscribeOnDestroyAdapter\";\r\n\r\n@Component({\r\n  selector: \"app-contacts\",\r\n  templateUrl: \"./contacts.component.html\",\r\n  styleUrls: [\"./contacts.component.sass\"],\r\n})\r\nexport class ContactsComponent\r\n  extends UnsubscribeOnDestroyAdapter\r\n  implements OnInit\r\n{\r\n  filterToggle = false;\r\n  displayedColumns = [\r\n    \"select\",\r\n    \"img\",\r\n    \"name\",\r\n    \"email\",\r\n    \"mobile\",\r\n    \"birthDate\",\r\n    \"address\",\r\n    \"actions\",\r\n  ];\r\n  exampleDatabase: ContactsService | null;\r\n  dataSource: ExampleDataSource | null;\r\n  selection = new SelectionModel<Contacts>(true, []);\r\n  id: number;\r\n  contacts: Contacts | null;\r\n  constructor(\r\n    public httpClient: HttpClient,\r\n    public dialog: MatDialog,\r\n    public contactsService: ContactsService,\r\n    private snackBar: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  @ViewChild(\"filter\", { static: true }) filter: ElementRef;\r\n  @ViewChild(MatMenuTrigger)\r\n  contextMenu: MatMenuTrigger;\r\n  contextMenuPosition = { x: \"0px\", y: \"0px\" };\r\n\r\n  ngOnInit() {\r\n    this.loadData();\r\n  }\r\n  refresh() {\r\n    this.loadData();\r\n  }\r\n  addNew() {\r\n    let tempDirection;\r\n    if (localStorage.getItem(\"isRtl\") === \"true\") {\r\n      tempDirection = \"rtl\";\r\n    } else {\r\n      tempDirection = \"ltr\";\r\n    }\r\n    const dialogRef = this.dialog.open(FormComponent, {\r\n      data: {\r\n        contacts: this.contacts,\r\n        action: \"add\",\r\n      },\r\n      direction: tempDirection,\r\n    });\r\n    this.subs.sink = dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 1) {\r\n        // After dialog is closed we're doing frontend updates\r\n        // For add we're just pushing a new row inside DataServicex\r\n        this.exampleDatabase.dataChange.value.unshift(\r\n          this.contactsService.getDialogData()\r\n        );\r\n        this.refreshTable();\r\n        this.showNotification(\r\n          \"snackbar-success\",\r\n          \"Add Record Successfully...!!!\",\r\n          \"bottom\",\r\n          \"center\"\r\n        );\r\n      }\r\n    });\r\n  }\r\n  detailsCall(row) {\r\n    this.dialog.open(FormComponent, {\r\n      data: {\r\n        contacts: row,\r\n        action: \"details\",\r\n      },\r\n      height: \"70%\",\r\n      width: \"35%\",\r\n    });\r\n  }\r\n  toggleStar(row) {\r\n    console.log(row);\r\n  }\r\n  editCall(row) {\r\n    this.id = row.id;\r\n    let tempDirection;\r\n    if (localStorage.getItem(\"isRtl\") === \"true\") {\r\n      tempDirection = \"rtl\";\r\n    } else {\r\n      tempDirection = \"ltr\";\r\n    }\r\n    const dialogRef = this.dialog.open(FormComponent, {\r\n      data: {\r\n        contacts: row,\r\n        action: \"edit\",\r\n      },\r\n      direction: tempDirection,\r\n    });\r\n    this.subs.sink = dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 1) {\r\n        // When using an edit things are little different, firstly we find record inside DataService by id\r\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\r\n          (x) => x.id === this.id\r\n        );\r\n        // Then you update that record using data from dialogData (values you enetered)\r\n        this.exampleDatabase.dataChange.value[foundIndex] =\r\n          this.contactsService.getDialogData();\r\n        // And lastly refresh table\r\n        this.refreshTable();\r\n        this.showNotification(\r\n          \"black\",\r\n          \"Edit Record Successfully...!!!\",\r\n          \"bottom\",\r\n          \"center\"\r\n        );\r\n      }\r\n    });\r\n  }\r\n  deleteItem(row) {\r\n    this.id = row.id;\r\n    let tempDirection;\r\n    if (localStorage.getItem(\"isRtl\") === \"true\") {\r\n      tempDirection = \"rtl\";\r\n    } else {\r\n      tempDirection = \"ltr\";\r\n    }\r\n    const dialogRef = this.dialog.open(DeleteComponent, {\r\n      data: row,\r\n      direction: tempDirection,\r\n    });\r\n    this.subs.sink = dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 1) {\r\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\r\n          (x) => x.id === this.id\r\n        );\r\n        // for delete we use splice in order to remove single object from DataService\r\n        this.exampleDatabase.dataChange.value.splice(foundIndex, 1);\r\n        this.refreshTable();\r\n        this.showNotification(\r\n          \"snackbar-danger\",\r\n          \"Delete Record Successfully...!!!\",\r\n          \"bottom\",\r\n          \"center\"\r\n        );\r\n      }\r\n    });\r\n  }\r\n  private refreshTable() {\r\n    this.paginator._changePageSize(this.paginator.pageSize);\r\n  }\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.renderedData.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected()\r\n      ? this.selection.clear()\r\n      : this.dataSource.renderedData.forEach((row) =>\r\n          this.selection.select(row)\r\n        );\r\n  }\r\n  removeSelectedRows() {\r\n    const totalSelect = this.selection.selected.length;\r\n    this.selection.selected.forEach((item) => {\r\n      const index: number = this.dataSource.renderedData.findIndex(\r\n        (d) => d === item\r\n      );\r\n      // console.log(this.dataSource.renderedData.findIndex((d) => d === item));\r\n      this.exampleDatabase.dataChange.value.splice(index, 1);\r\n      this.refreshTable();\r\n      this.selection = new SelectionModel<Contacts>(true, []);\r\n    });\r\n    this.showNotification(\r\n      \"snackbar-danger\",\r\n      totalSelect + \" Record Delete Successfully...!!!\",\r\n      \"bottom\",\r\n      \"center\"\r\n    );\r\n  }\r\n  public loadData() {\r\n    this.exampleDatabase = new ContactsService(this.httpClient);\r\n    this.dataSource = new ExampleDataSource(\r\n      this.exampleDatabase,\r\n      this.paginator,\r\n      this.sort\r\n    );\r\n    this.subs.sink = fromEvent(this.filter.nativeElement, \"keyup\").subscribe(\r\n      () => {\r\n        if (!this.dataSource) {\r\n          return;\r\n        }\r\n        this.dataSource.filter = this.filter.nativeElement.value;\r\n      }\r\n    );\r\n  }\r\n  showNotification(colorName, text, placementFrom, placementAlign) {\r\n    this.snackBar.open(text, \"\", {\r\n      duration: 2000,\r\n      verticalPosition: placementFrom,\r\n      horizontalPosition: placementAlign,\r\n      panelClass: colorName,\r\n    });\r\n  }\r\n}\r\nexport class ExampleDataSource extends DataSource<Contacts> {\r\n  filterChange = new BehaviorSubject(\"\");\r\n  get filter(): string {\r\n    return this.filterChange.value;\r\n  }\r\n  set filter(filter: string) {\r\n    this.filterChange.next(filter);\r\n  }\r\n  filteredData: Contacts[] = [];\r\n  renderedData: Contacts[] = [];\r\n  constructor(\r\n    public exampleDatabase: ContactsService,\r\n    public paginator: MatPaginator,\r\n    public _sort: MatSort\r\n  ) {\r\n    super();\r\n    // Reset to the first page when the user changes the filter.\r\n    this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\r\n  }\r\n  /** Connect function called by the table to retrieve one stream containing the data to render. */\r\n  connect(): Observable<Contacts[]> {\r\n    // Listen for any changes in the base data, sorting, filtering, or pagination\r\n    const displayDataChanges = [\r\n      this.exampleDatabase.dataChange,\r\n      this._sort.sortChange,\r\n      this.filterChange,\r\n      this.paginator.page,\r\n    ];\r\n    this.exampleDatabase.getAllContactss();\r\n    return merge(...displayDataChanges).pipe(\r\n      map(() => {\r\n        // Filter data\r\n        this.filteredData = this.exampleDatabase.data\r\n          .slice()\r\n          .filter((contacts: Contacts) => {\r\n            const searchStr = (\r\n              contacts.name +\r\n              contacts.birthDate +\r\n              contacts.email +\r\n              contacts.mobile +\r\n              contacts.address\r\n            ).toLowerCase();\r\n            return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\r\n          });\r\n        // Sort filtered data\r\n        const sortedData = this.sortData(this.filteredData.slice());\r\n        // Grab the page's slice of the filtered sorted data.\r\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n        this.renderedData = sortedData.splice(\r\n          startIndex,\r\n          this.paginator.pageSize\r\n        );\r\n        return this.renderedData;\r\n      })\r\n    );\r\n  }\r\n  disconnect() {}\r\n  /** Returns a sorted copy of the database data. */\r\n  sortData(data: Contacts[]): Contacts[] {\r\n    if (!this._sort.active || this._sort.direction === \"\") {\r\n      return data;\r\n    }\r\n    return data.sort((a, b) => {\r\n      let propertyA: number | string = \"\";\r\n      let propertyB: number | string = \"\";\r\n      switch (this._sort.active) {\r\n        case \"id\":\r\n          [propertyA, propertyB] = [a.id, b.id];\r\n          break;\r\n        case \"name\":\r\n          [propertyA, propertyB] = [a.name, b.name];\r\n          break;\r\n        case \"email\":\r\n          [propertyA, propertyB] = [a.email, b.email];\r\n          break;\r\n        case \"birthDate\":\r\n          [propertyA, propertyB] = [a.birthDate, b.birthDate];\r\n          break;\r\n        case \"address\":\r\n          [propertyA, propertyB] = [a.address, b.address];\r\n          break;\r\n      }\r\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\r\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\r\n      return (\r\n        (valueA < valueB ? -1 : 1) * (this._sort.direction === \"asc\" ? 1 : -1)\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { formatDate } from \"@angular/common\";\r\nexport class Contacts {\r\n  id: number;\r\n  img: string;\r\n  name: string;\r\n  email: string;\r\n  birthDate: string;\r\n  mobile: string;\r\n  address: string;\r\n  note: string;\r\n\r\n  constructor(contacts) {\r\n    {\r\n      this.id = contacts.id || this.getRandomID();\r\n      this.img = contacts.avatar || \"assets/images/user/usrbig1.jpg\";\r\n      this.name = contacts.name || \"\";\r\n      this.email = contacts.email || \"\";\r\n      this.birthDate = formatDate(new Date(), \"yyyy-MM-dd\", \"en\") || \"\";\r\n      this.address = contacts.address || \"\";\r\n      this.mobile = contacts.mobile || \"\";\r\n      this.note = contacts.note || \"\";\r\n    }\r\n  }\r\n  public getRandomID(): string {\r\n    const S4 = () => {\r\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return S4() + S4();\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { AdvanceTableRoutingModule } from \"./contacts-routing.module\";\r\nimport { ContactsComponent } from \"./contacts.component\";\r\nimport { FormComponent as contactForm } from \"./form/form.component\";\r\nimport { DeleteComponent } from \"./delete/delete.component\";\r\n\r\nimport { MatTableModule } from \"@angular/material/table\";\r\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatRadioModule } from \"@angular/material/radio\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\n\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatSortModule } from \"@angular/material/sort\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\nimport { MaterialFileInputModule } from \"ngx-material-file-input\";\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { ContactsService } from \"./contacts.service\";\r\n\r\n@NgModule({\r\n  declarations: [ContactsComponent, contactForm, DeleteComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AdvanceTableRoutingModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSnackBarModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatCheckboxModule,\r\n    MatCardModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatSortModule,\r\n    MatToolbarModule,\r\n    MaterialFileInputModule,\r\n    MatMenuModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  providers: [ContactsService],\r\n})\r\nexport class ContactsModule {}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { Contacts } from \"./contacts.model\";\r\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { UnsubscribeOnDestroyAdapter } from \"../shared/UnsubscribeOnDestroyAdapter\";\r\n@Injectable()\r\nexport class ContactsService extends UnsubscribeOnDestroyAdapter {\r\n  private readonly API_URL = \"assets/data/contacts.json\";\r\n  isTblLoading = true;\r\n  dataChange: BehaviorSubject<Contacts[]> = new BehaviorSubject<Contacts[]>([]);\r\n  // Temporarily stores data from dialogs\r\n  dialogData: any;\r\n  constructor(private httpClient: HttpClient) {\r\n    super();\r\n  }\r\n  get data(): Contacts[] {\r\n    return this.dataChange.value;\r\n  }\r\n  getDialogData() {\r\n    return this.dialogData;\r\n  }\r\n  /** CRUD METHODS */\r\n  getAllContactss(): void {\r\n    this.subs.sink = this.httpClient.get<Contacts[]>(this.API_URL).subscribe(\r\n      (data) => {\r\n        this.isTblLoading = false;\r\n        this.dataChange.next(data);\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        this.isTblLoading = false;\r\n        console.log(error.name + \" \" + error.message);\r\n      }\r\n    );\r\n  }\r\n  addContacts(contacts: Contacts): void {\r\n    this.dialogData = contacts;\r\n\r\n    /*  this.httpClient.post(this.API_URL, contacts).subscribe(data => {\r\n      this.dialogData = contacts;\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n     // error code here\r\n    });*/\r\n  }\r\n  updateContacts(contacts: Contacts): void {\r\n    this.dialogData = contacts;\r\n\r\n    /* this.httpClient.put(this.API_URL + contacts.id, contacts).subscribe(data => {\r\n      this.dialogData = contacts;\r\n    },\r\n    (err: HttpErrorResponse) => {\r\n      // error code here\r\n    }\r\n  );*/\r\n  }\r\n  deleteContacts(id: number): void {\r\n    console.log(id);\r\n\r\n    /*  this.httpClient.delete(this.API_URL + id).subscribe(data => {\r\n      console.log(id);\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n         // error code here\r\n      }\r\n    );*/\r\n  }\r\n}\r\n","import { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { Component, Inject } from \"@angular/core\";\r\nimport { ContactsService } from \"../contacts.service\";\r\n\r\n@Component({\r\n  selector: \"app-delete\",\r\n  templateUrl: \"./delete.component.html\",\r\n  styleUrls: [\"./delete.component.sass\"],\r\n})\r\nexport class DeleteComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DeleteComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public contactsService: ContactsService\r\n  ) {}\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n  confirmDelete(): void {\r\n    this.contactsService.deleteContacts(this.data.id);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <h3 mat-dialog-title>Are you sure?</h3>\r\n  <div mat-dialog-content>\r\n    <ul class=\"clearfix\">\r\n      <li>\r\n        <p><span class=\"font-weight-bold\"> Name: </span>{{data.name}}</p>\r\n      </li>\r\n      <li>\r\n        <p><span class=\"font-weight-bold\"> Email: </span>{{ data.email }}</p>\r\n      </li>\r\n      <li>\r\n        <p>\r\n          <span class=\"font-weight-bold\">Mobile: </span>{{data.mobile}}\r\n        </p>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <div mat-dialog-actions class=\"mb-1\">\r\n    <button mat-flat-button color=\"warn\" [mat-dialog-close]=\"1\" (click)=\"confirmDelete()\">\r\n      Delete\r\n    </button>\r\n    <button mat-flat-button (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\r\n  </div>\r\n</div>\r\n","<div class=\"addContainer\">\r\n  <div *ngIf=\"!isDetails\" class=\"contact-form\">\r\n    <div class=\"modalHeader\">\r\n      <div class=\"editRowModal\">\r\n        <div class=\"modalHeader clearfix\">\r\n          <img [src]='contacts.img' alt=\"avatar\">\r\n          <div class=\"modal-about\">\r\n            <div class=\"font-weight-bold p-t-5 msl-3 font-17\">\r\n              {{dialogTitle}}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div mat-dialog-content>\r\n      <form class=\"register-form m-4\" [formGroup]=\"contactsForm\" (ngSubmit)=\"submit\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Name</mat-label>\r\n              <input matInput formControlName=\"name\" required>\r\n              <i class=\"material-icons-two-tone color-icon\" matSuffix>face</i>\r\n              <mat-error *ngIf=\"contactsForm.get('name').hasError('required')\">\r\n                Name is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Email</mat-label>\r\n              <input matInput formControlName=\"email\" required>\r\n              <i class=\"material-icons-two-tone color-icon\" matSuffix>email</i>\r\n              <mat-error *ngIf=\"contactsForm.get('email').hasError('required') || contactsForm.get('email').touched\">\r\n                Please enter a valid email address\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Mobile</mat-label>\r\n              <input matInput formControlName=\"mobile\" type=\"number\">\r\n              <i class=\"material-icons-two-tone color-icon\" matSuffix>smartphone</i>\r\n              <mat-error *ngIf=\"contactsForm.get('mobile').hasError('required')\">\r\n                Mobile is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Birth date</mat-label>\r\n              <input matInput [matDatepicker]=\"picker\" formControlName=\"birthDate\">\r\n              <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n              <mat-datepicker #picker></mat-datepicker>\r\n              <mat-error *ngIf=\"contactsForm.get('birthDate').hasError('required')\">\r\n                Please select date\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Address</mat-label>\r\n              <textarea matInput formControlName=\"address\"></textarea>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Note</mat-label>\r\n              <textarea matInput formControlName=\"note\"></textarea>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <div class=\"example-button-row\">\r\n              <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!contactsForm.valid\"\r\n                [mat-dialog-close]=\"1\" (click)=\"confirmAdd()\">Save</button>\r\n              <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"isDetails\" class=\"contact-details\">\r\n    <div class=\"modalHeader\">\r\n      <div class=\"editRowModal\">\r\n        <div class=\"modalHeader clearfix\">\r\n          <div class=\"modal-about contact-header\">\r\n            <div class=\"contact-details-img\">\r\n              <img [src]='contacts.img' alt=\"avatar\">\r\n            </div>\r\n            <div class=\"contact-details-heading\">\r\n              <div class=\"contact-details-name mb-2\">{{contacts.name}}</div>\r\n              <div class=\"badge col-green\">Friends</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div mat-dialog-content>\r\n      <mat-card-content>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">email</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.email}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">phonelink_ring</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.mobile}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">cake</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.birthDate | date: 'MMMM d, yyyy'}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">location_on</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.address}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">note</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.note}}\r\n          </div>\r\n        </div>\r\n      </mat-card-content>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { Component, Inject } from \"@angular/core\";\r\nimport { ContactsService } from \"../contacts.service\";\r\nimport {\r\n  FormControl,\r\n  Validators,\r\n  FormGroup,\r\n  FormBuilder,\r\n} from \"@angular/forms\";\r\nimport { Contacts } from \"../contacts.model\";\r\nimport { formatDate } from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: \"app-form\",\r\n  templateUrl: \"./form.component.html\",\r\n  styleUrls: [\"./form.component.sass\"],\r\n})\r\nexport class FormComponent {\r\n  action: string;\r\n  dialogTitle: string;\r\n  isDetails = false;\r\n  contactsForm: FormGroup;\r\n  contacts: Contacts;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<FormComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public contactsService: ContactsService,\r\n    private fb: FormBuilder\r\n  ) {\r\n    // Set the defaults\r\n    this.action = data.action;\r\n    if (this.action === \"edit\") {\r\n      this.isDetails = false;\r\n      this.dialogTitle = data.contacts.name;\r\n      this.contacts = data.contacts;\r\n      this.contactsForm = this.createContactForm();\r\n    } else if (this.action === \"details\") {\r\n      this.contacts = data.contacts;\r\n      this.isDetails = true;\r\n    } else {\r\n      this.isDetails = false;\r\n      this.dialogTitle = \"New Contacts\";\r\n      this.contacts = new Contacts({});\r\n      this.contactsForm = this.createContactForm();\r\n    }\r\n  }\r\n  formControl = new FormControl(\"\", [\r\n    Validators.required,\r\n    // Validators.email,\r\n  ]);\r\n  getErrorMessage() {\r\n    return this.formControl.hasError(\"required\")\r\n      ? \"Required field\"\r\n      : this.formControl.hasError(\"email\")\r\n      ? \"Not a valid email\"\r\n      : \"\";\r\n  }\r\n  createContactForm(): FormGroup {\r\n    return this.fb.group({\r\n      id: [this.contacts.id],\r\n      img: [this.contacts.img],\r\n      name: [this.contacts.name],\r\n      email: [\r\n        this.contacts.email,\r\n        [Validators.required, Validators.email, Validators.minLength(5)],\r\n      ],\r\n      birthDate: [\r\n        formatDate(this.contacts.birthDate, \"yyyy-MM-dd\", \"en\"),\r\n        [Validators.required],\r\n      ],\r\n      address: [this.contacts.address],\r\n      mobile: [this.contacts.mobile],\r\n      note: [this.contacts.note],\r\n    });\r\n  }\r\n  submit() {\r\n    // emppty stuff\r\n  }\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n  public confirmAdd(): void {\r\n    this.contactsService.addContacts(this.contactsForm.getRawValue());\r\n  }\r\n}\r\n"]}