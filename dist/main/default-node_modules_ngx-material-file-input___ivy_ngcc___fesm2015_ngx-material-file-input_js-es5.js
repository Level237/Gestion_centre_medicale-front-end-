(function () {
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  (self["webpackChunkcliniva"] = self["webpackChunkcliniva"] || []).push([["default-node_modules_ngx-material-file-input___ivy_ngcc___fesm2015_ngx-material-file-input_js"], {
    /***/
    4904:
    /*!***********************************************************************************************!*\
      !*** ./node_modules/ngx-material-file-input/__ivy_ngcc__/fesm2015/ngx-material-file-input.js ***!
      \***********************************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ByteFormatPipe": function ByteFormatPipe() {
          return (
            /* binding */
            _ByteFormatPipe
          );
        },

        /* harmony export */
        "FileInput": function FileInput() {
          return (
            /* binding */
            _FileInput
          );
        },

        /* harmony export */
        "FileInputComponent": function FileInputComponent() {
          return (
            /* binding */
            _FileInputComponent
          );
        },

        /* harmony export */
        "FileInputConfig": function FileInputConfig() {
          return (
            /* binding */
            _FileInputConfig
          );
        },

        /* harmony export */
        "FileValidator": function FileValidator() {
          return (
            /* binding */
            _FileValidator
          );
        },

        /* harmony export */
        "MaterialFileInputModule": function MaterialFileInputModule() {
          return (
            /* binding */
            _MaterialFileInputModule
          );
        },

        /* harmony export */
        "NGX_MAT_FILE_INPUT_CONFIG": function NGX_MAT_FILE_INPUT_CONFIG() {
          return (
            /* binding */
            _NGX_MAT_FILE_INPUT_CONFIG
          );
        },

        /* harmony export */
        "ɵa": function ɵa() {
          return (
            /* binding */
            FileInputBase
          );
        },

        /* harmony export */
        "ɵb": function ɵb() {
          return (
            /* binding */
            FileInputMixinBase
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! tslib */
      64762);
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      19238);
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      3679);
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/material/core */
      5015);
      /* harmony import */


      var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/form-field */
      98295);
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      39490);
      /**
       * Optional token to provide custom configuration to the module
       */


      var _NGX_MAT_FILE_INPUT_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('ngx-mat-file-input.config');
      /**
       * Provide additional configuration to dynamically customize the module injection
       */


      var _FileInputConfig = function _FileInputConfig() {
        _classCallCheck(this, _FileInputConfig);
      };
      /**
       * The files to be uploaded
       */


      var _FileInput = /*#__PURE__*/function () {
        function _FileInput(_files) {
          var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ', ';

          _classCallCheck(this, _FileInput);

          this._files = _files;
          this.delimiter = delimiter;
          this._fileNames = (this._files || []).map(function (f) {
            return f.name;
          }).join(delimiter);
        }

        _createClass(_FileInput, [{
          key: "files",
          get: function get() {
            return this._files || [];
          }
        }, {
          key: "fileNames",
          get: function get() {
            return this._fileNames;
          }
        }]);

        return _FileInput;
      }(); // Boilerplate for applying mixins to FileInput

      /** @docs-private */


      var FileInputBase = function FileInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        _classCallCheck(this, FileInputBase);

        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
      };
      /**
       * Allows to use a custom ErrorStateMatcher with the file-input component
       */


      var FileInputMixinBase = (0, _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.mixinErrorState)(FileInputBase);
      var FileInputComponent_1;

      var _FileInputComponent = FileInputComponent_1 = /*#__PURE__*/function (_FileInputMixinBase) {
        _inherits(FileInputComponent, _FileInputMixinBase);

        var _super = _createSuper(FileInputComponent);

        /**
         * @see https://angular.io/api/forms/ControlValueAccessor
         */
        function FileInputComponent(fm, _elementRef, _renderer, _defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
          var _this;

          _classCallCheck(this, FileInputComponent);

          _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
          _this.fm = fm;
          _this._elementRef = _elementRef;
          _this._renderer = _renderer;
          _this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
          _this.ngControl = ngControl;
          _this._parentForm = _parentForm;
          _this._parentFormGroup = _parentFormGroup;
          _this.focused = false;
          _this.controlType = 'file-input';
          _this.autofilled = false;
          _this._required = false;
          _this.accept = null;
          _this.id = "ngx-mat-file-input-".concat(FileInputComponent_1.nextId++);
          _this.describedBy = '';

          _this._onChange = function (_) {};

          _this._onTouched = function () {};

          if (_this.ngControl != null) {
            _this.ngControl.valueAccessor = _assertThisInitialized(_this);
          }

          fm.monitor(_elementRef.nativeElement, true).subscribe(function (origin) {
            _this.focused = !!origin;

            _this.stateChanges.next();
          });
          return _this;
        }

        _createClass(FileInputComponent, [{
          key: "setDescribedByIds",
          value: function setDescribedByIds(ids) {
            this.describedBy = ids.join(' ');
          }
        }, {
          key: "value",
          get: function get() {
            return this.empty ? null : new _FileInput(this._elementRef.nativeElement.value || []);
          },
          set: function set(fileInput) {
            if (fileInput) {
              this.writeValue(fileInput);
              this.stateChanges.next();
            }
          }
        }, {
          key: "placeholder",
          get: function get() {
            return this._placeholder;
          },
          set: function set(plh) {
            this._placeholder = plh;
            this.stateChanges.next();
          }
          /**
           * Whether the current input has files
           */

        }, {
          key: "empty",
          get: function get() {
            return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;
          }
        }, {
          key: "shouldLabelFloat",
          get: function get() {
            return this.focused || !this.empty || this.valuePlaceholder !== undefined;
          }
        }, {
          key: "required",
          get: function get() {
            return this._required;
          },
          set: function set(req) {
            this._required = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(req);
            this.stateChanges.next();
          }
        }, {
          key: "isDisabled",
          get: function get() {
            return this.disabled;
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._elementRef.nativeElement.disabled;
          },
          set: function set(dis) {
            this.setDisabledState((0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(dis));
            this.stateChanges.next();
          }
        }, {
          key: "onContainerClick",
          value: function onContainerClick(event) {
            if (event.target.tagName.toLowerCase() !== 'input' && !this.disabled) {
              this._elementRef.nativeElement.querySelector('input').focus();

              this.focused = true;
              this.open();
            }
          }
        }, {
          key: "fileNames",
          get: function get() {
            return this.value ? this.value.fileNames : this.valuePlaceholder;
          }
        }, {
          key: "writeValue",
          value: function writeValue(obj) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof _FileInput ? obj.files : null);
          }
        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this._onChange = fn;
          }
        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this._onTouched = fn;
          }
          /**
           * Remove all files from the file input component
           * @param [event] optional event that may have triggered the clear action
           */

        }, {
          key: "clear",
          value: function clear(event) {
            if (event) {
              event.preventDefault();
              event.stopPropagation();
            }

            this.value = new _FileInput([]);
            this._elementRef.nativeElement.querySelector('input').value = null;

            this._onChange(this.value);
          }
        }, {
          key: "change",
          value: function change(event) {
            var fileList = event.target.files;
            var fileArray = [];

            if (fileList) {
              for (var i = 0; i < fileList.length; i++) {
                fileArray.push(fileList[i]);
              }
            }

            this.value = new _FileInput(fileArray);

            this._onChange(this.value);
          }
        }, {
          key: "blur",
          value: function blur() {
            this.focused = false;

            this._onTouched();
          }
        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.multiple = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(this.multiple);
          }
        }, {
          key: "open",
          value: function open() {
            if (!this.disabled) {
              this._elementRef.nativeElement.querySelector('input').click();
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.stateChanges.complete();
            this.fm.stopMonitoring(this._elementRef.nativeElement);
          }
        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this.ngControl) {
              // We need to re-evaluate this on every change detection cycle, because there are some
              // error triggers that we can't subscribe to (e.g. parent form submissions). This means
              // that whatever logic is in here has to be super lean or we risk destroying the performance.
              this.updateErrorState();
            }
          }
        }]);

        return FileInputComponent;
      }(FileInputMixinBase);

      _FileInputComponent.ɵfac = function FileInputComponent_Factory(t) {
        return new (t || _FileInputComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__.FocusMonitor), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_material_core__WEBPACK_IMPORTED_MODULE_1__.ErrorStateMatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgControl, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgForm, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_4__.FormGroupDirective, 8));
      };

      _FileInputComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _FileInputComponent,
        selectors: [["ngx-mat-file-input"]],
        hostVars: 6,
        hostBindings: function FileInputComponent_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function FileInputComponent_change_HostBindingHandler($event) {
              return ctx.change($event);
            })("focusout", function FileInputComponent_focusout_HostBindingHandler() {
              return ctx.blur();
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("id", ctx.id);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-describedby", ctx.describedBy);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-form-field-should-float", ctx.shouldLabelFloat)("file-input-disabled", ctx.isDisabled);
          }
        },
        inputs: {
          autofilled: "autofilled",
          accept: "accept",
          value: "value",
          placeholder: "placeholder",
          required: "required",
          disabled: "disabled",
          multiple: "multiple",
          valuePlaceholder: "valuePlaceholder",
          errorStateMatcher: "errorStateMatcher"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_5__.MatFormFieldControl,
          useExisting: FileInputComponent_1
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        decls: 4,
        vars: 4,
        consts: [["type", "file"], ["input", ""], [1, "filename", 3, "title"]],
        template: function FileInputComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "input", 0, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "span", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("multiple", ctx.multiple ? "" : null)("accept", ctx.accept);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("title", ctx.fileNames);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.fileNames);
          }
        },
        styles: ["[_nghost-%COMP%]{display:inline-block;width:100%}[_nghost-%COMP%]:not(.file-input-disabled){cursor:pointer}input[_ngcontent-%COMP%]{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename[_ngcontent-%COMP%]{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}"]
      });
      _FileInputComponent.nextId = 0;

      _FileInputComponent.ctorParameters = function () {
        return [{
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__.FocusMonitor
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
        }, {
          type: _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.ErrorStateMatcher
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgControl,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgForm,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__.FormGroupDirective,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }];
      };

      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _FileInputComponent.prototype, "autofilled", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _FileInputComponent.prototype, "valuePlaceholder", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _FileInputComponent.prototype, "multiple", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _FileInputComponent.prototype, "accept", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _FileInputComponent.prototype, "errorStateMatcher", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding)()], _FileInputComponent.prototype, "id", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding)('attr.aria-describedby')], _FileInputComponent.prototype, "describedBy", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _FileInputComponent.prototype, "value", null);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _FileInputComponent.prototype, "placeholder", null);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding)('class.mat-form-field-should-float')], _FileInputComponent.prototype, "shouldLabelFloat", null);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _FileInputComponent.prototype, "required", null);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding)('class.file-input-disabled')], _FileInputComponent.prototype, "isDisabled", null);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _FileInputComponent.prototype, "disabled", null);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener)('change', ['$event'])], _FileInputComponent.prototype, "change", null);
      (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener)('focusout')], _FileInputComponent.prototype, "blur", null);
      _FileInputComponent = FileInputComponent_1 = (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, tslib__WEBPACK_IMPORTED_MODULE_6__.__param)(4, (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional)()), (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__param)(4, (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self)()), (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__param)(5, (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional)()), (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__param)(6, (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional)())], _FileInputComponent);

      var _ByteFormatPipe = /*#__PURE__*/function () {
        function ByteFormatPipe(config) {
          _classCallCheck(this, ByteFormatPipe);

          this.config = config;
          this.unit = config ? config.sizeUnit : 'Byte';
        }

        _createClass(ByteFormatPipe, [{
          key: "transform",
          value: function transform(value, args) {
            if (parseInt(value, 10) >= 0) {
              value = this.formatBytes(+value, +args);
            }

            return value;
          }
        }, {
          key: "formatBytes",
          value: function formatBytes(bytes, decimals) {
            if (bytes === 0) {
              return '0 ' + this.unit;
            }

            var B = this.unit.charAt(0);
            var k = 1024;
            var dm = decimals || 2;
            var sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];
            var i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
          }
        }]);

        return ByteFormatPipe;
      }();

      _ByteFormatPipe.ɵfac = function ByteFormatPipe_Factory(t) {
        return new (t || _ByteFormatPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_NGX_MAT_FILE_INPUT_CONFIG, 24));
      };

      _ByteFormatPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "byteFormat",
        type: _ByteFormatPipe,
        pure: true
      });

      _ByteFormatPipe.ctorParameters = function () {
        return [{
          type: _FileInputConfig,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_NGX_MAT_FILE_INPUT_CONFIG]
          }]
        }];
      };

      _ByteFormatPipe = (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0, tslib__WEBPACK_IMPORTED_MODULE_6__.__param)(0, (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional)()), (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__param)(0, (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject)(_NGX_MAT_FILE_INPUT_CONFIG))], _ByteFormatPipe);

      var _MaterialFileInputModule = function MaterialFileInputModule() {
        _classCallCheck(this, MaterialFileInputModule);
      };

      _MaterialFileInputModule.ɵfac = function MaterialFileInputModule_Factory(t) {
        return new (t || _MaterialFileInputModule)();
      };

      _MaterialFileInputModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _MaterialFileInputModule
      });
      _MaterialFileInputModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__.FocusMonitor]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_FileInputComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            // tslint:disable-next-line:component-selector
            selector: 'ngx-mat-file-input',
            template: "<input #input type=\"file\" [attr.multiple]=\"multiple? '' : null\" [attr.accept]=\"accept\">\n<span class=\"filename\" [title]=\"fileNames\">{{ fileNames }}</span>\n",
            providers: [{
              provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_5__.MatFormFieldControl,
              useExisting: FileInputComponent_1
            }],
            styles: [":host{display:inline-block;width:100%}:host:not(.file-input-disabled){cursor:pointer}input{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}"]
          }]
        }], function () {
          return [{
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__.FocusMonitor
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
          }, {
            type: _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.ErrorStateMatcher
          }, {
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgControl,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
            }]
          }, {
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgForm,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }, {
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__.FormGroupDirective,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }];
        }, {
          autofilled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          accept: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
          }],
          describedBy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
            args: ['attr.aria-describedby']
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          placeholder: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          shouldLabelFloat: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
            args: ['class.mat-form-field-should-float']
          }],
          required: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          isDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
            args: ['class.file-input-disabled']
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          change: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['change', ['$event']]
          }],
          blur: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['focusout']
          }],
          multiple: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          valuePlaceholder: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          errorStateMatcher: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ByteFormatPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'byteFormat'
          }]
        }], function () {
          return [{
            type: _FileInputConfig,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_NGX_MAT_FILE_INPUT_CONFIG]
            }]
          }];
        }, null);
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MaterialFileInputModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            declarations: [_FileInputComponent, _ByteFormatPipe],
            providers: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__.FocusMonitor],
            exports: [_FileInputComponent, _ByteFormatPipe]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MaterialFileInputModule, {
          declarations: [_FileInputComponent, _ByteFormatPipe],
          exports: [_FileInputComponent, _ByteFormatPipe]
        });
      })();

      var _FileValidator;

      (function (FileValidator) {
        /**
         * Function to control content of files
         *
         * @param bytes max number of bytes allowed
         *
         * @returns
         */
        function maxContentSize(bytes) {
          return function (control) {
            var size = control && control.value ? control.value.files.map(function (f) {
              return f.size;
            }).reduce(function (acc, i) {
              return acc + i;
            }, 0) : 0;
            var condition = bytes >= size;
            return condition ? null : {
              maxContentSize: {
                actualSize: size,
                maxSize: bytes
              }
            };
          };
        }

        FileValidator.maxContentSize = maxContentSize;
      })(_FileValidator || (_FileValidator = {}));
      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=ngx-material-file-input.js.map

      /***/

    }
  }]);
})();
//# sourceMappingURL=default-node_modules_ngx-material-file-input___ivy_ngcc___fesm2015_ngx-material-file-input_js-es5.js.map