{"version":3,"file":"angular-gauge.js","sources":["../../src/gauge-defaults.service.ts","../../src/gauge.component.ts","../../src/gauge.module.ts","../../src/angular-gauge.ts"],"names":[],"mappings":"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","sourcesContent":["export interface GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle?: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle?: number;\n\n  /**\n   * The radius of the gauge\n   */\n  dialRadius?: number;\n\n  /**\n   * The minumum value for the gauge\n   */\n  min?: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max?: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label?: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  color?: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue?: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass?: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass?: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass?: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueClass?: string;\n\n  /**\n   * The value of the gauge\n   */\n  value?: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated?: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration?: number;\n}\n\nexport class GaugeDefaults implements GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle: number = 135;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle: number = 45;\n\n  /**\n   * The radius of the gauge\n   */\n  dialRadius: number = 40;\n\n  /**\n   * The minimum value for the gauge\n   */\n  min: number = 0;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max: number = 100;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  color: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue: boolean = true;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass: string = 'gauge';\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass: string = 'dial';\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass: string = 'value';\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueClass: string = 'value-text';\n\n  /**\n   * The value of the gauge\n   */\n  value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated: boolean = false;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration: number;\n}\n","import {\n  Component,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport Gauge from 'svg-gauge';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\n@Component({\n  selector: 'mwl-gauge',\n  template: '',\n})\nexport class GaugeComponent implements AfterViewInit, OnChanges, GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  @Input() dialStartAngle: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  @Input() dialEndAngle: number;\n\n  /**\n   * The radius of the gauge\n   */\n  @Input() dialRadius: number;\n\n  /**\n   * The minimum value for the gauge\n   */\n  @Input() min: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  @Input() max: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  @Input() label: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  @Input() color: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  @Input() showValue: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  @Input() gaugeClass: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  @Input() dialClass: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  @Input() valueDialClass: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  @Input() valueClass: string;\n\n  /**\n   * The value of the gauge\n   */\n  @Input() value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  @Input() animated: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  @Input() animationDuration: number;\n\n  /**\n   * Called when the gauge is created\n   */\n  @Output() gaugeCreated: EventEmitter<{ gauge: any }> = new EventEmitter();\n\n  private gauge: any;\n\n  constructor(private elm: ElementRef, private defaults: GaugeDefaults) {}\n\n  ngAfterViewInit(): void {\n    const options: GaugeOptions = {\n      dialStartAngle: this.dialStartAngle,\n      dialEndAngle: this.dialEndAngle,\n      dialRadius: this.dialRadius,\n      min: this.min,\n      max: this.max,\n      label: this.label,\n      showValue: this.showValue,\n      gaugeClass: this.gaugeClass,\n      dialClass: this.dialClass,\n      valueDialClass: this.valueDialClass,\n      valueClass: this.valueClass,\n      value: this.value,\n      color: this.color,\n    };\n\n    Object.keys(this.defaults).forEach((optionKey) => {\n      if (typeof options[optionKey] === 'undefined') {\n        options[optionKey] = this.defaults[optionKey];\n      }\n    });\n\n    Object.keys(options).forEach((optionKey) => {\n      if (typeof options[optionKey] === 'undefined') {\n        delete options[optionKey];\n      }\n    });\n\n    this.gauge = Gauge(this.elm.nativeElement, options);\n\n    this.gaugeCreated.emit({ gauge: this.gauge });\n\n    this.updateValue();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['value']) {\n      this.updateValue();\n    }\n  }\n\n  private updateValue(): void {\n    if (this.gauge) {\n      if (this.animated) {\n        this.gauge.setValueAnimated(this.value, this.animationDuration);\n      } else {\n        this.gauge.setValue(this.value);\n      }\n    }\n  }\n}\n","import { NgModule, InjectionToken, ModuleWithProviders } from '@angular/core';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\nexport const USER_DEFAULTS: InjectionToken<string> = new InjectionToken(\n  'gauge defaults'\n);\n\nexport function defaultsFactory(userDefaults: GaugeOptions): GaugeDefaults {\n  const defaults: GaugeDefaults = new GaugeDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [GaugeComponent],\n  exports: [GaugeComponent],\n})\nexport class GaugeModule {\n  static forRoot(\n    userDefaults: GaugeOptions = {}\n  ): ModuleWithProviders<GaugeModule> {\n    return {\n      ngModule: GaugeModule,\n      providers: [\n        {\n          provide: USER_DEFAULTS,\n          useValue: userDefaults,\n        },\n        {\n          provide: GaugeDefaults,\n          useFactory: defaultsFactory,\n          deps: [USER_DEFAULTS],\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {GaugeDefaults as ɵb} from './gauge-defaults.service';\nexport {GaugeComponent as ɵa} from './gauge.component';"]}