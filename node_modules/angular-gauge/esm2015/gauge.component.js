import { Component, ElementRef, Input, Output, EventEmitter, } from '@angular/core';
import Gauge from 'svg-gauge';
import { GaugeDefaults } from './gauge-defaults.service';
export class GaugeComponent {
    constructor(elm, defaults) {
        this.elm = elm;
        this.defaults = defaults;
        /**
         * Called when the gauge is created
         */
        this.gaugeCreated = new EventEmitter();
    }
    ngAfterViewInit() {
        const options = {
            dialStartAngle: this.dialStartAngle,
            dialEndAngle: this.dialEndAngle,
            dialRadius: this.dialRadius,
            min: this.min,
            max: this.max,
            label: this.label,
            showValue: this.showValue,
            gaugeClass: this.gaugeClass,
            dialClass: this.dialClass,
            valueDialClass: this.valueDialClass,
            valueClass: this.valueClass,
            value: this.value,
            color: this.color,
        };
        Object.keys(this.defaults).forEach((optionKey) => {
            if (typeof options[optionKey] === 'undefined') {
                options[optionKey] = this.defaults[optionKey];
            }
        });
        Object.keys(options).forEach((optionKey) => {
            if (typeof options[optionKey] === 'undefined') {
                delete options[optionKey];
            }
        });
        this.gauge = Gauge(this.elm.nativeElement, options);
        this.gaugeCreated.emit({ gauge: this.gauge });
        this.updateValue();
    }
    ngOnChanges(changes) {
        if (changes['value']) {
            this.updateValue();
        }
    }
    updateValue() {
        if (this.gauge) {
            if (this.animated) {
                this.gauge.setValueAnimated(this.value, this.animationDuration);
            }
            else {
                this.gauge.setValue(this.value);
            }
        }
    }
}
GaugeComponent.decorators = [
    { type: Component, args: [{
                selector: 'mwl-gauge',
                template: ''
            },] }
];
GaugeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: GaugeDefaults }
];
GaugeComponent.propDecorators = {
    dialStartAngle: [{ type: Input }],
    dialEndAngle: [{ type: Input }],
    dialRadius: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    label: [{ type: Input }],
    color: [{ type: Input }],
    showValue: [{ type: Input }],
    gaugeClass: [{ type: Input }],
    dialClass: [{ type: Input }],
    valueDialClass: [{ type: Input }],
    valueClass: [{ type: Input }],
    value: [{ type: Input }],
    animated: [{ type: Input }],
    animationDuration: [{ type: Input }],
    gaugeCreated: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9tYXR0bGV3aXMvQ29kZS9vcGVuLXNvdXJjZS9hbmd1bGFyLWdhdWdlL3NyYy8iLCJzb3VyY2VzIjpbImdhdWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksR0FJYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEtBQUssTUFBTSxXQUFXLENBQUM7QUFDOUIsT0FBTyxFQUFFLGFBQWEsRUFBZ0IsTUFBTSwwQkFBMEIsQ0FBQztBQU12RSxNQUFNLE9BQU8sY0FBYztJQW1GekIsWUFBb0IsR0FBZSxFQUFVLFFBQXVCO1FBQWhELFFBQUcsR0FBSCxHQUFHLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFlO1FBUHBFOztXQUVHO1FBQ08saUJBQVksR0FBaUMsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUlILENBQUM7SUFFeEUsZUFBZTtRQUNiLE1BQU0sT0FBTyxHQUFpQjtZQUM1QixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ25DLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLENBQUM7UUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUMvQyxJQUFJLE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLFdBQVcsRUFBRTtnQkFDN0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDL0M7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDekMsSUFBSSxPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxXQUFXLEVBQUU7Z0JBQzdDLE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzNCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRU8sV0FBVztRQUNqQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUNqRTtpQkFBTTtnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakM7U0FDRjtJQUNILENBQUM7OztZQTNJRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRSxFQUFFO2FBQ2I7OztZQWRDLFVBQVU7WUFTSCxhQUFhOzs7NkJBVW5CLEtBQUs7MkJBS0wsS0FBSzt5QkFLTCxLQUFLO2tCQUtMLEtBQUs7a0JBS0wsS0FBSztvQkFLTCxLQUFLO29CQUtMLEtBQUs7d0JBS0wsS0FBSzt5QkFLTCxLQUFLO3dCQUtMLEtBQUs7NkJBS0wsS0FBSzt5QkFLTCxLQUFLO29CQUtMLEtBQUs7dUJBS0wsS0FBSztnQ0FLTCxLQUFLOzJCQUtMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBHYXVnZSBmcm9tICdzdmctZ2F1Z2UnO1xuaW1wb3J0IHsgR2F1Z2VEZWZhdWx0cywgR2F1Z2VPcHRpb25zIH0gZnJvbSAnLi9nYXVnZS1kZWZhdWx0cy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbXdsLWdhdWdlJyxcbiAgdGVtcGxhdGU6ICcnLFxufSlcbmV4cG9ydCBjbGFzcyBHYXVnZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgR2F1Z2VPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBhbmdsZSBpbiBkZWdyZWVzIHRvIHN0YXJ0IHRoZSBkaWFsXG4gICAqL1xuICBASW5wdXQoKSBkaWFsU3RhcnRBbmdsZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgYW5nbGUgaW4gZGVncmVlcyB0byBlbmQgdGhlIGRpYWwuIFRoaXMgTVVTVCBiZSBsZXNzIHRoYW4gZGlhbFN0YXJ0QW5nbGVcbiAgICovXG4gIEBJbnB1dCgpIGRpYWxFbmRBbmdsZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgcmFkaXVzIG9mIHRoZSBnYXVnZVxuICAgKi9cbiAgQElucHV0KCkgZGlhbFJhZGl1czogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSB2YWx1ZSBmb3IgdGhlIGdhdWdlXG4gICAqL1xuICBASW5wdXQoKSBtaW46IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gdmFsdWUgZm9yIHRoZSBnYXVnZVxuICAgKi9cbiAgQElucHV0KCkgbWF4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHN0cmluZyBsYWJlbCB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgaW4gdGhlIGNlbnRlci4gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHBhc3NlZCB0aGUgY3VycmVudCB2YWx1ZVxuICAgKi9cbiAgQElucHV0KCkgbGFiZWw6ICh2YWx1ZTogbnVtYmVyKSA9PiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHN0cmluZyBjb2xvciB2YWx1ZSBmb3IgdGhlIGdhdWdlJydzIGZpbGwgKHZhbHVlIGRpYWwpXG4gICAqL1xuICBASW5wdXQoKSBjb2xvcjogKHZhbHVlOiBudW1iZXIpID0+IHN0cmluZztcblxuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IHRoZSB2YWx1ZSBhdCB0aGUgY2VudGVyIG9mIHRoZSBnYXVnZVxuICAgKi9cbiAgQElucHV0KCkgc2hvd1ZhbHVlOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZVxuICAgKi9cbiAgQElucHV0KCkgZ2F1Z2VDbGFzczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIGRpYWxcbiAgICovXG4gIEBJbnB1dCgpIGRpYWxDbGFzczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIGZpbGwgKHZhbHVlIGRpYWwpXG4gICAqL1xuICBASW5wdXQoKSB2YWx1ZURpYWxDbGFzczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBcdFRoZSBDU1MgY2xhc3Mgb2YgdGhlIGdhdWdlJ3MgdGV4dFxuICAgKi9cbiAgQElucHV0KCkgdmFsdWVDbGFzczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGdhdWdlXG4gICAqL1xuICBASW5wdXQoKSB2YWx1ZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGFuaW1hdGUgY2hhbmdpbmcgdGhlIGdhdWdlXG4gICAqL1xuICBASW5wdXQoKSBhbmltYXRlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogQW5pbWF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAgICovXG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBnYXVnZSBpcyBjcmVhdGVkXG4gICAqL1xuICBAT3V0cHV0KCkgZ2F1Z2VDcmVhdGVkOiBFdmVudEVtaXR0ZXI8eyBnYXVnZTogYW55IH0+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHByaXZhdGUgZ2F1Z2U6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsbTogRWxlbWVudFJlZiwgcHJpdmF0ZSBkZWZhdWx0czogR2F1Z2VEZWZhdWx0cykge31cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgY29uc3Qgb3B0aW9uczogR2F1Z2VPcHRpb25zID0ge1xuICAgICAgZGlhbFN0YXJ0QW5nbGU6IHRoaXMuZGlhbFN0YXJ0QW5nbGUsXG4gICAgICBkaWFsRW5kQW5nbGU6IHRoaXMuZGlhbEVuZEFuZ2xlLFxuICAgICAgZGlhbFJhZGl1czogdGhpcy5kaWFsUmFkaXVzLFxuICAgICAgbWluOiB0aGlzLm1pbixcbiAgICAgIG1heDogdGhpcy5tYXgsXG4gICAgICBsYWJlbDogdGhpcy5sYWJlbCxcbiAgICAgIHNob3dWYWx1ZTogdGhpcy5zaG93VmFsdWUsXG4gICAgICBnYXVnZUNsYXNzOiB0aGlzLmdhdWdlQ2xhc3MsXG4gICAgICBkaWFsQ2xhc3M6IHRoaXMuZGlhbENsYXNzLFxuICAgICAgdmFsdWVEaWFsQ2xhc3M6IHRoaXMudmFsdWVEaWFsQ2xhc3MsXG4gICAgICB2YWx1ZUNsYXNzOiB0aGlzLnZhbHVlQ2xhc3MsXG4gICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgIH07XG5cbiAgICBPYmplY3Qua2V5cyh0aGlzLmRlZmF1bHRzKS5mb3JFYWNoKChvcHRpb25LZXkpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1tvcHRpb25LZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvcHRpb25zW29wdGlvbktleV0gPSB0aGlzLmRlZmF1bHRzW29wdGlvbktleV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKChvcHRpb25LZXkpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1tvcHRpb25LZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBkZWxldGUgb3B0aW9uc1tvcHRpb25LZXldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5nYXVnZSA9IEdhdWdlKHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5nYXVnZUNyZWF0ZWQuZW1pdCh7IGdhdWdlOiB0aGlzLmdhdWdlIH0pO1xuXG4gICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzWyd2YWx1ZSddKSB7XG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVWYWx1ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5nYXVnZSkge1xuICAgICAgaWYgKHRoaXMuYW5pbWF0ZWQpIHtcbiAgICAgICAgdGhpcy5nYXVnZS5zZXRWYWx1ZUFuaW1hdGVkKHRoaXMudmFsdWUsIHRoaXMuYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nYXVnZS5zZXRWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==