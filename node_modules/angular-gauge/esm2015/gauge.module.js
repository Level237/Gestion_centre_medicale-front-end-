import { NgModule, InjectionToken } from '@angular/core';
import { GaugeComponent } from './gauge.component';
import { GaugeDefaults } from './gauge-defaults.service';
export const USER_DEFAULTS = new InjectionToken('gauge defaults');
export function defaultsFactory(userDefaults) {
    const defaults = new GaugeDefaults();
    Object.assign(defaults, userDefaults);
    return defaults;
}
export class GaugeModule {
    static forRoot(userDefaults = {}) {
        return {
            ngModule: GaugeModule,
            providers: [
                {
                    provide: USER_DEFAULTS,
                    useValue: userDefaults,
                },
                {
                    provide: GaugeDefaults,
                    useFactory: defaultsFactory,
                    deps: [USER_DEFAULTS],
                },
            ],
        };
    }
}
GaugeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [GaugeComponent],
                exports: [GaugeComponent],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9tYXR0bGV3aXMvQ29kZS9vcGVuLXNvdXJjZS9hbmd1bGFyLWdhdWdlL3NyYy8iLCJzb3VyY2VzIjpbImdhdWdlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxhQUFhLEVBQWdCLE1BQU0sMEJBQTBCLENBQUM7QUFFdkUsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUEyQixJQUFJLGNBQWMsQ0FDckUsZ0JBQWdCLENBQ2pCLENBQUM7QUFFRixNQUFNLFVBQVUsZUFBZSxDQUFDLFlBQTBCO0lBQ3hELE1BQU0sUUFBUSxHQUFrQixJQUFJLGFBQWEsRUFBRSxDQUFDO0lBQ3BELE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUFNRCxNQUFNLE9BQU8sV0FBVztJQUN0QixNQUFNLENBQUMsT0FBTyxDQUNaLGVBQTZCLEVBQUU7UUFFL0IsT0FBTztZQUNMLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsYUFBYTtvQkFDdEIsUUFBUSxFQUFFLFlBQVk7aUJBQ3ZCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxhQUFhO29CQUN0QixVQUFVLEVBQUUsZUFBZTtvQkFDM0IsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDO2lCQUN0QjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXRCRixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDO2dCQUM5QixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7YUFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0aW9uVG9rZW4sIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdhdWdlQ29tcG9uZW50IH0gZnJvbSAnLi9nYXVnZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgR2F1Z2VEZWZhdWx0cywgR2F1Z2VPcHRpb25zIH0gZnJvbSAnLi9nYXVnZS1kZWZhdWx0cy5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IFVTRVJfREVGQVVMVFM6IEluamVjdGlvblRva2VuPHN0cmluZz4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdnYXVnZSBkZWZhdWx0cydcbik7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0c0ZhY3RvcnkodXNlckRlZmF1bHRzOiBHYXVnZU9wdGlvbnMpOiBHYXVnZURlZmF1bHRzIHtcbiAgY29uc3QgZGVmYXVsdHM6IEdhdWdlRGVmYXVsdHMgPSBuZXcgR2F1Z2VEZWZhdWx0cygpO1xuICBPYmplY3QuYXNzaWduKGRlZmF1bHRzLCB1c2VyRGVmYXVsdHMpO1xuICByZXR1cm4gZGVmYXVsdHM7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0dhdWdlQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0dhdWdlQ29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgR2F1Z2VNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChcbiAgICB1c2VyRGVmYXVsdHM6IEdhdWdlT3B0aW9ucyA9IHt9XG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8R2F1Z2VNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEdhdWdlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBVU0VSX0RFRkFVTFRTLFxuICAgICAgICAgIHVzZVZhbHVlOiB1c2VyRGVmYXVsdHMsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBHYXVnZURlZmF1bHRzLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGRlZmF1bHRzRmFjdG9yeSxcbiAgICAgICAgICBkZXBzOiBbVVNFUl9ERUZBVUxUU10sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==