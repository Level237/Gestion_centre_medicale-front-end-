export class GaugeDefaults {
    constructor() {
        /**
         * The angle in degrees to start the dial
         */
        this.dialStartAngle = 135;
        /**
         * The angle in degrees to end the dial. This MUST be less than dialStartAngle
         */
        this.dialEndAngle = 45;
        /**
         * The radius of the gauge
         */
        this.dialRadius = 40;
        /**
         * The minimum value for the gauge
         */
        this.min = 0;
        /**
         * The maximum value for the gauge
         */
        this.max = 100;
        /**
         * Whether to show the value at the center of the gauge
         */
        this.showValue = true;
        /**
         * The CSS class of the gauge
         */
        this.gaugeClass = 'gauge';
        /**
         * The CSS class of the gauge's dial
         */
        this.dialClass = 'dial';
        /**
         * The CSS class of the gauge's fill (value dial)
         */
        this.valueDialClass = 'value';
        /**
         * 	The CSS class of the gauge's text
         */
        this.valueClass = 'value-text';
        /**
         * Whether to animate changing the gauge
         */
        this.animated = false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UtZGVmYXVsdHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbWF0dGxld2lzL0NvZGUvb3Blbi1zb3VyY2UvYW5ndWxhci1nYXVnZS9zcmMvIiwic291cmNlcyI6WyJnYXVnZS1kZWZhdWx0cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZFQSxNQUFNLE9BQU8sYUFBYTtJQUExQjtRQUNFOztXQUVHO1FBQ0gsbUJBQWMsR0FBVyxHQUFHLENBQUM7UUFFN0I7O1dBRUc7UUFDSCxpQkFBWSxHQUFXLEVBQUUsQ0FBQztRQUUxQjs7V0FFRztRQUNILGVBQVUsR0FBVyxFQUFFLENBQUM7UUFFeEI7O1dBRUc7UUFDSCxRQUFHLEdBQVcsQ0FBQyxDQUFDO1FBRWhCOztXQUVHO1FBQ0gsUUFBRyxHQUFXLEdBQUcsQ0FBQztRQVlsQjs7V0FFRztRQUNILGNBQVMsR0FBWSxJQUFJLENBQUM7UUFFMUI7O1dBRUc7UUFDSCxlQUFVLEdBQVcsT0FBTyxDQUFDO1FBRTdCOztXQUVHO1FBQ0gsY0FBUyxHQUFXLE1BQU0sQ0FBQztRQUUzQjs7V0FFRztRQUNILG1CQUFjLEdBQVcsT0FBTyxDQUFDO1FBRWpDOztXQUVHO1FBQ0gsZUFBVSxHQUFXLFlBQVksQ0FBQztRQU9sQzs7V0FFRztRQUNILGFBQVEsR0FBWSxLQUFLLENBQUM7SUFNNUIsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBHYXVnZU9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIGFuZ2xlIGluIGRlZ3JlZXMgdG8gc3RhcnQgdGhlIGRpYWxcbiAgICovXG4gIGRpYWxTdGFydEFuZ2xlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgYW5nbGUgaW4gZGVncmVlcyB0byBlbmQgdGhlIGRpYWwuIFRoaXMgTVVTVCBiZSBsZXNzIHRoYW4gZGlhbFN0YXJ0QW5nbGVcbiAgICovXG4gIGRpYWxFbmRBbmdsZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHJhZGl1cyBvZiB0aGUgZ2F1Z2VcbiAgICovXG4gIGRpYWxSYWRpdXM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBtaW51bXVtIHZhbHVlIGZvciB0aGUgZ2F1Z2VcbiAgICovXG4gIG1pbj86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gdmFsdWUgZm9yIHRoZSBnYXVnZVxuICAgKi9cbiAgbWF4PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzdHJpbmcgbGFiZWwgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIGluIHRoZSBjZW50ZXIuIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWQgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICovXG4gIGxhYmVsPzogKHZhbHVlOiBudW1iZXIpID0+IHN0cmluZztcblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc3RyaW5nIGNvbG9yIHZhbHVlIGZvciB0aGUgZ2F1Z2UnJ3MgZmlsbCAodmFsdWUgZGlhbClcbiAgICovXG4gIGNvbG9yPzogKHZhbHVlOiBudW1iZXIpID0+IHN0cmluZztcblxuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IHRoZSB2YWx1ZSBhdCB0aGUgY2VudGVyIG9mIHRoZSBnYXVnZVxuICAgKi9cbiAgc2hvd1ZhbHVlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBvZiB0aGUgZ2F1Z2VcbiAgICovXG4gIGdhdWdlQ2xhc3M/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3Mgb2YgdGhlIGdhdWdlJ3MgZGlhbFxuICAgKi9cbiAgZGlhbENsYXNzPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIGZpbGwgKHZhbHVlIGRpYWwpXG4gICAqL1xuICB2YWx1ZURpYWxDbGFzcz86IHN0cmluZztcblxuICAvKipcbiAgICogXHRUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIHRleHRcbiAgICovXG4gIHZhbHVlQ2xhc3M/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgZ2F1Z2VcbiAgICovXG4gIHZhbHVlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGFuaW1hdGUgY2hhbmdpbmcgdGhlIGdhdWdlXG4gICAqL1xuICBhbmltYXRlZD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFuaW1hdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICBhbmltYXRpb25EdXJhdGlvbj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEdhdWdlRGVmYXVsdHMgaW1wbGVtZW50cyBHYXVnZU9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIGFuZ2xlIGluIGRlZ3JlZXMgdG8gc3RhcnQgdGhlIGRpYWxcbiAgICovXG4gIGRpYWxTdGFydEFuZ2xlOiBudW1iZXIgPSAxMzU7XG5cbiAgLyoqXG4gICAqIFRoZSBhbmdsZSBpbiBkZWdyZWVzIHRvIGVuZCB0aGUgZGlhbC4gVGhpcyBNVVNUIGJlIGxlc3MgdGhhbiBkaWFsU3RhcnRBbmdsZVxuICAgKi9cbiAgZGlhbEVuZEFuZ2xlOiBudW1iZXIgPSA0NTtcblxuICAvKipcbiAgICogVGhlIHJhZGl1cyBvZiB0aGUgZ2F1Z2VcbiAgICovXG4gIGRpYWxSYWRpdXM6IG51bWJlciA9IDQwO1xuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSB2YWx1ZSBmb3IgdGhlIGdhdWdlXG4gICAqL1xuICBtaW46IG51bWJlciA9IDA7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIHZhbHVlIGZvciB0aGUgZ2F1Z2VcbiAgICovXG4gIG1heDogbnVtYmVyID0gMTAwO1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzdHJpbmcgbGFiZWwgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIGluIHRoZSBjZW50ZXIuIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWQgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICovXG4gIGxhYmVsOiAodmFsdWU6IG51bWJlcikgPT4gc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzdHJpbmcgY29sb3IgdmFsdWUgZm9yIHRoZSBnYXVnZScncyBmaWxsICh2YWx1ZSBkaWFsKVxuICAgKi9cbiAgY29sb3I6ICh2YWx1ZTogbnVtYmVyKSA9PiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgdmFsdWUgYXQgdGhlIGNlbnRlciBvZiB0aGUgZ2F1Z2VcbiAgICovXG4gIHNob3dWYWx1ZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3Mgb2YgdGhlIGdhdWdlXG4gICAqL1xuICBnYXVnZUNsYXNzOiBzdHJpbmcgPSAnZ2F1Z2UnO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIGRpYWxcbiAgICovXG4gIGRpYWxDbGFzczogc3RyaW5nID0gJ2RpYWwnO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIGZpbGwgKHZhbHVlIGRpYWwpXG4gICAqL1xuICB2YWx1ZURpYWxDbGFzczogc3RyaW5nID0gJ3ZhbHVlJztcblxuICAvKipcbiAgICogXHRUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIHRleHRcbiAgICovXG4gIHZhbHVlQ2xhc3M6IHN0cmluZyA9ICd2YWx1ZS10ZXh0JztcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBnYXVnZVxuICAgKi9cbiAgdmFsdWU6IG51bWJlcjtcblxuICAvKipcbiAgICogV2hldGhlciB0byBhbmltYXRlIGNoYW5naW5nIHRoZSBnYXVnZVxuICAgKi9cbiAgYW5pbWF0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogQW5pbWF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHNcbiAgICovXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXI7XG59XG4iXX0=