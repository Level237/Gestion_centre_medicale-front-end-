{"version":3,"file":"gauge.component.d.ts","sources":["gauge.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\nexport declare class GaugeComponent implements AfterViewInit, OnChanges, GaugeOptions {\n    private elm;\n    private defaults;\n    /**\n     * The angle in degrees to start the dial\n     */\n    dialStartAngle: number;\n    /**\n     * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n     */\n    dialEndAngle: number;\n    /**\n     * The radius of the gauge\n     */\n    dialRadius: number;\n    /**\n     * The minimum value for the gauge\n     */\n    min: number;\n    /**\n     * The maximum value for the gauge\n     */\n    max: number;\n    /**\n     * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n     */\n    label: (value: number) => string;\n    /**\n     * Function that returns a string color value for the gauge''s fill (value dial)\n     */\n    color: (value: number) => string;\n    /**\n     * Whether to show the value at the center of the gauge\n     */\n    showValue: boolean;\n    /**\n     * The CSS class of the gauge\n     */\n    gaugeClass: string;\n    /**\n     * The CSS class of the gauge's dial\n     */\n    dialClass: string;\n    /**\n     * The CSS class of the gauge's fill (value dial)\n     */\n    valueDialClass: string;\n    /**\n     * \tThe CSS class of the gauge's text\n     */\n    valueClass: string;\n    /**\n     * The value of the gauge\n     */\n    value: number;\n    /**\n     * Whether to animate changing the gauge\n     */\n    animated: boolean;\n    /**\n     * Animation duration in seconds\n     */\n    animationDuration: number;\n    /**\n     * Called when the gauge is created\n     */\n    gaugeCreated: EventEmitter<{\n        gauge: any;\n    }>;\n    private gauge;\n    constructor(elm: ElementRef, defaults: GaugeDefaults);\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    private updateValue;\n}\n"]}