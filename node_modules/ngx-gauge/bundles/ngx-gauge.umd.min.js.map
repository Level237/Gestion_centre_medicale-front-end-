{"version":3,"sources":["../../../projects/ngx-gauge/src/common/util.ts","../../../projects/ngx-gauge/src/gauge/gauge-directives.ts","../../../projects/ngx-gauge/src/gauge/gauge.ts","../../../projects/ngx-gauge/src/ngx-gauge.module.ts"],"names":["coerceNumberProperty","value","fallbackValue","isNaN","parseFloat","Number","cssUnit","Directive","args","selector","exportAs","DEFAULTS","NgxGauge","_elementRef","_renderer","this","_size","_min","_max","_animate","_initialized","_animationRequestID","ariaLabel","ariaLabelledby","type","cap","thick","foregroundColor","backgroundColor","thresholds","Object","create","_value","duration","defineProperty","prototype","coerceBooleanProperty","val","ngOnChanges","changes","isCanvasPropertyChanged","isDataChanged","nv","ov","currentValue","previousValue","_update","_destroy","_init","_updateSize","setStyle","nativeElement","_getWidth","_getCanvasHeight","_canvas","width","height","_label","size","_reading","ngAfterViewInit","ngOnDestroy","_getBounds","head","tail","Math","PI","_drawShell","start","middle","color","center","_getCenter","radius","_getRadius","max","min","_clear","_context","beginPath","strokeStyle","arc","x","y","stroke","clearRect","_getHeight","getContext","_setupStyles","_create","window","cancelAnimationFrame","lineCap","lineWidth","_getForegroundColorByRange","match","keys","filter","item","undefined","isNumber","sort","a","b","reverse","startTime","self","bounds","clamp","unit","displacement","animate","timestamp","runtime","Date","getTime","progress","requestAnimationFrame","Component","template","host","role","aria-readonly","[class.ngx-gauge-meter]","[attr.aria-valuemin]","[attr.aria-valuemax]","[attr.aria-valuenow]","[attr.aria-label]","[attr.aria-labelledby]","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ViewChild","static","ContentChild","NgxGaugeLabel","NgxGaugePrepend","NgxGaugeAppend","NgxGaugeValue","Input","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export function clamp(value: number, min: number, max: number): number {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\nexport function coerceBooleanProperty(value: any): boolean {\r\n    return value != null && `${value}` !== 'false';\r\n}\r\nexport function coerceNumberProperty(value: any, fallbackValue: number = 0): number {\r\n    return isNaN(parseFloat(value)) || isNaN(Number(value)) ? fallbackValue : Number(value);\r\n}\r\nexport function cssUnit(value: number) {\r\n    return `${value}px`;\r\n}\r\nexport function isNumber(value: string) {\r\n    return value != undefined && !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n}","import { Directive } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-append\",\r\n  exportAs: \"ngxGaugeAppend\"\r\n})\r\nexport class NgxGaugeAppend {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-prepend\",\r\n  exportAs: \"ngxGaugePrepend\"\r\n})\r\nexport class NgxGaugePrepend {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-value\",\r\n  exportAs: \"ngxGaugeValue\"\r\n})\r\nexport class NgxGaugeValue {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-label\",\r\n  exportAs: \"ngxGaugeLabel\"\r\n})\r\nexport class NgxGaugeLabel {}\r\n","import {\r\n    Component,\r\n    Input,\r\n    SimpleChanges,\r\n    ViewEncapsulation,\r\n    Renderer2,\r\n    AfterViewInit,\r\n    ElementRef,\r\n    OnChanges,\r\n    OnDestroy,\r\n    ViewChild,\r\n    ContentChild\r\n} from '@angular/core';\r\nimport { NgxGaugeError } from './gauge-error';\r\nimport {\r\n    clamp,\r\n    coerceBooleanProperty,\r\n    coerceNumberProperty,\r\n    cssUnit,\r\n    isNumber\r\n} from '../common/util';\r\nimport { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge-directives';\r\n\r\nconst DEFAULTS = {\r\n    MIN: 0,\r\n    MAX: 100,\r\n    TYPE: 'arch',\r\n    THICK: 4,\r\n    FOREGROUND_COLOR: 'rgba(0, 150, 136, 1)',\r\n    BACKGROUND_COLOR: 'rgba(0, 0, 0, 0.1)',\r\n    CAP: 'butt',\r\n    SIZE: 200\r\n};\r\n\r\nexport type NgxGaugeType = 'full' | 'arch' | 'semi';\r\nexport type NgxGaugeCap = 'round' | 'butt';\r\n\r\n@Component({\r\n    selector: 'ngx-gauge',\r\n    templateUrl: 'gauge.html',\r\n    styleUrls: ['gauge.css'],\r\n    host: {\r\n        'role': 'slider',\r\n        'aria-readonly': 'true',\r\n        '[class.ngx-gauge-meter]': 'true',\r\n        '[attr.aria-valuemin]': 'min',\r\n        '[attr.aria-valuemax]': 'max',\r\n        '[attr.aria-valuenow]': 'value',\r\n        '[attr.aria-label]': 'ariaLabel',\r\n        '[attr.aria-labelledby]': 'ariaLabelledby'\r\n\r\n    },\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxGauge implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    @ViewChild('canvas', { static: true }) _canvas: ElementRef;\r\n    @ViewChild('rLabel', { static: true }) _label: ElementRef;\r\n    @ViewChild('reading', { static: true }) _reading: ElementRef;\r\n\r\n    @ContentChild(NgxGaugeLabel) _labelChild: NgxGaugeLabel;\r\n    @ContentChild(NgxGaugePrepend) _prependChild: NgxGaugePrepend;\r\n    @ContentChild(NgxGaugeAppend) _appendChild: NgxGaugeAppend;\r\n    @ContentChild(NgxGaugeValue) _valueDisplayChild: NgxGaugeValue;\r\n\r\n    private _size: number = DEFAULTS.SIZE;\r\n    private _min: number = DEFAULTS.MIN;\r\n    private _max: number = DEFAULTS.MAX;\r\n    private _animate: boolean = true;\r\n\r\n    private _initialized: boolean = false;\r\n    private _context: CanvasRenderingContext2D;\r\n    private _animationRequestID: number = 0;\r\n\r\n    @Input('aria-label') ariaLabel: string = '';\r\n\r\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n    @Input()\r\n    get size(): number { return this._size; }\r\n    set size(value: number) {\r\n        this._size = coerceNumberProperty(value);\r\n    }\r\n\r\n    @Input()\r\n    get min(): number { return this._min; }\r\n    set min(value: number) {\r\n        this._min = coerceNumberProperty(value, DEFAULTS.MIN);\r\n    }\r\n    @Input()\r\n    get animate(): boolean { return this._animate; }\r\n    set animate(value) {\r\n        this._animate = coerceBooleanProperty(value);\r\n    }\r\n\r\n    @Input()\r\n    get max(): number { return this._max; }\r\n    set max(value: number) {\r\n        this._max = coerceNumberProperty(value, DEFAULTS.MAX);\r\n    }\r\n\r\n    @Input() type: NgxGaugeType = DEFAULTS.TYPE as NgxGaugeType;\r\n\r\n    @Input() cap: NgxGaugeCap = DEFAULTS.CAP as NgxGaugeCap;\r\n\r\n    @Input() thick: number = DEFAULTS.THICK;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() append: string;\r\n\r\n    @Input() prepend: string;\r\n\r\n    @Input() foregroundColor: string = DEFAULTS.FOREGROUND_COLOR;\r\n\r\n    @Input() backgroundColor: string = DEFAULTS.BACKGROUND_COLOR;\r\n\r\n    @Input() thresholds: Object = Object.create(null);\r\n\r\n    private _value: number = 0;\r\n\r\n    @Input()\r\n    get value() { return this._value; }\r\n    set value(val: number) {\r\n        this._value = coerceNumberProperty(val);\r\n    }\r\n\r\n    @Input() duration: number = 1200;\r\n\r\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const isCanvasPropertyChanged = changes['thick'] || changes['type'] || changes['cap'] || changes['size'];\r\n        const isDataChanged = changes['value'] || changes['min'] || changes['max'];\r\n\r\n        if (this._initialized) {\r\n            if (isDataChanged) {\r\n                let nv, ov;\r\n                if (changes['value']) {\r\n                    nv = changes['value'].currentValue;\r\n                    ov = changes['value'].previousValue;\r\n                }\r\n                this._update(nv, ov);\r\n            }\r\n            if (isCanvasPropertyChanged) {\r\n                this._destroy();\r\n                this._init();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateSize() {\r\n        this._renderer.setStyle(this._elementRef.nativeElement, 'width', cssUnit(this._getWidth()));\r\n        this._renderer.setStyle(this._elementRef.nativeElement, 'height', cssUnit(this._getCanvasHeight()));\r\n        this._canvas.nativeElement.width = this._getWidth();\r\n        this._canvas.nativeElement.height = this._getCanvasHeight();\r\n        this._renderer.setStyle(this._label.nativeElement,\r\n            'transform', 'translateY(' + (this.size / 3 * 2 - this.size / 13 / 4) + 'px)');\r\n        this._renderer.setStyle(this._reading.nativeElement,\r\n            'transform', 'translateY(' + (this.size / 2 - this.size * 0.22 / 2) + 'px)');\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this._canvas) {\r\n            this._init();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._destroy();\r\n    }\r\n\r\n    private _getBounds(type: NgxGaugeType) {\r\n        let head, tail;\r\n        if (type == 'semi') {\r\n            head = Math.PI;\r\n            tail = 2 * Math.PI;\r\n        } else if (type == 'full') {\r\n            head = 1.5 * Math.PI;\r\n            tail = 3.5 * Math.PI;\r\n        } else if (type === 'arch') {\r\n            head = 0.8 * Math.PI;\r\n            tail = 2.2 * Math.PI;\r\n        }\r\n        return { head, tail };\r\n    }\r\n\r\n    private _drawShell(start: number, middle: number, tail: number, color: string) {\r\n        let center = this._getCenter(),\r\n            radius = this._getRadius();\r\n\r\n        middle = Math.max(middle, start); // never below 0%\r\n        middle = Math.min(middle, tail); // never exceed 100%\r\n        if (this._initialized) {\r\n            this._clear();\r\n            this._context.beginPath();\r\n            this._context.strokeStyle = this.backgroundColor;\r\n            this._context.arc(center.x, center.y, radius, middle, tail, false);\r\n            this._context.stroke();\r\n\r\n            this._context.beginPath();\r\n            this._context.strokeStyle = color;\r\n            this._context.arc(center.x, center.y, radius, start, middle, false);\r\n            this._context.stroke();\r\n        }\r\n    }\r\n\r\n    private _clear() {\r\n        this._context.clearRect(0, 0, this._getWidth(), this._getHeight());\r\n    }\r\n\r\n    private _getWidth() {\r\n        return this.size;\r\n    }\r\n\r\n    private _getHeight() {\r\n        return this.size;\r\n    }\r\n\r\n    // canvas height will be shorter for type 'semi' and 'arch'\r\n    private _getCanvasHeight() {\r\n        return (this.type == 'arch' || this.type == 'semi')\r\n            ? 0.85 * this._getHeight()\r\n            : this._getHeight();\r\n    }\r\n\r\n    private _getRadius() {\r\n        var center = this._getCenter();\r\n        return center.x - this.thick;\r\n    }\r\n\r\n    private _getCenter() {\r\n        var x = this._getWidth() / 2,\r\n            y = this._getHeight() / 2;\r\n        return { x, y };\r\n    }\r\n\r\n    private _init() {\r\n        this._context = (this._canvas.nativeElement as HTMLCanvasElement).getContext('2d');\r\n        this._initialized = true;\r\n        this._updateSize();\r\n        this._setupStyles();\r\n        this._create();\r\n    }\r\n\r\n    private _destroy() {\r\n        if (this._animationRequestID) {\r\n            window.cancelAnimationFrame(this._animationRequestID);\r\n            this._animationRequestID = 0;\r\n        }\r\n        this._clear();\r\n        this._context = null;\r\n        this._initialized = false;\r\n    }\r\n\r\n    private _setupStyles() {\r\n        this._context.lineCap = this.cap;\r\n        this._context.lineWidth = this.thick;\r\n    }\r\n\r\n    private _getForegroundColorByRange(value) {\r\n\r\n        const match = Object.keys(this.thresholds)\r\n            .filter(function (item) { return isNumber(item) && Number(item) <= value })\r\n            .sort((a, b) => Number(a) - Number(b))\r\n            .reverse()[0];\r\n\r\n        return match !== undefined\r\n            ? this.thresholds[match].color || this.foregroundColor\r\n            : this.foregroundColor;\r\n    }\r\n\r\n    private _create(nv?: number, ov?: number) {\r\n        let self = this,\r\n            type = this.type,\r\n            bounds = this._getBounds(type),\r\n            duration = this.duration,\r\n            min = this.min,\r\n            max = this.max,\r\n            value = clamp(this.value, this.min, this.max),\r\n            start = bounds.head,\r\n            unit = (bounds.tail - bounds.head) / (max - min),\r\n            displacement = unit * (value - min),\r\n            tail = bounds.tail,\r\n            color = this._getForegroundColorByRange(value),\r\n            startTime;\r\n\r\n        if (self._animationRequestID) {\r\n            window.cancelAnimationFrame(self._animationRequestID);\r\n        }\r\n\r\n        function animate(timestamp) {\r\n            timestamp = timestamp || new Date().getTime();\r\n            let runtime = timestamp - startTime;\r\n            let progress = Math.min(runtime / duration, 1);\r\n            let previousProgress = ov ? (ov - min) * unit : 0;\r\n            let middle = start + previousProgress + displacement * progress;\r\n\r\n            self._drawShell(start, middle, tail, color);\r\n            if (self._animationRequestID && (runtime < duration)) {\r\n                self._animationRequestID = window.requestAnimationFrame((timestamp) => animate(timestamp));\r\n            } else {\r\n                window.cancelAnimationFrame(self._animationRequestID);\r\n            }\r\n        }\r\n        if (this._animate) {\r\n            if (nv != undefined && ov != undefined) {\r\n                displacement = unit * nv - unit * ov;\r\n            }\r\n            self._animationRequestID = window.requestAnimationFrame((timestamp) => {\r\n                startTime = timestamp || new Date().getTime();\r\n                animate(startTime);\r\n            });\r\n        } else {\r\n            self._drawShell(start, start + displacement, tail, color);\r\n        }\r\n    }\r\n\r\n    private _update(nv: number, ov: number) {\r\n        this._clear();\r\n        this._create(nv, ov);\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxGauge } from './gauge/gauge';\r\nimport { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge/gauge-directives';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel],\r\n  exports: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel]\r\n})\r\nexport class NgxGaugeModule { }"]}