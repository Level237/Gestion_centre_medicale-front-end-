import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import { NgImageFullscreenViewService } from '../ng-image-fullscreen-view.service';
var youtubeRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*/, validFileExtensions = ['jpeg', 'jpg', 'gif', 'png'], validVideoExtensions = ['mp4'];
var SliderCustomImageComponent = /** @class */ (function () {
    function SliderCustomImageComponent(imageFullscreenViewService, sanitizer) {
        this.imageFullscreenViewService = imageFullscreenViewService;
        this.sanitizer = sanitizer;
        this.YOUTUBE = 'youtube';
        this.IMAGE = 'image';
        this.VIDEO = 'video';
        this.fileUrl = '';
        this.fileExtension = '';
        this.type = this.IMAGE;
        // @inputs
        this.videoAutoPlay = false;
        this.showVideoControls = 1;
        this.isVideo = false;
        this.alt = '';
        this.title = '';
        this.direction = 'ltr';
    }
    Object.defineProperty(SliderCustomImageComponent.prototype, "imageUrl", {
        set: function (url) {
            if (url && typeof (url) === 'string') {
                this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);
                this.fileExtension = url.replace(/^.*\./, '');
                if (this.imageFullscreenViewService.base64FileExtension(url)
                    && (validFileExtensions.indexOf(this.imageFullscreenViewService.base64FileExtension(url).toLowerCase()) > -1
                        || validVideoExtensions.indexOf(this.imageFullscreenViewService.base64FileExtension(url).toLowerCase()) > -1)) {
                    this.fileExtension = this.imageFullscreenViewService.base64FileExtension(url);
                }
                // verify for youtube url
                var match = url.match(youtubeRegExp);
                if (match && match[2].length === 11) {
                    this.type = this.YOUTUBE;
                    this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl("" + '//www.youtube.com/embed/' + match[2] + (this.videoAutoPlay ? '?autoplay=1&enablejsapi=1' : '?autoplay=0&enablejsapi=1') + '&controls=' + this.showVideoControls);
                }
                else if (this.fileExtension && validFileExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                    this.type = this.IMAGE;
                }
                else if (this.fileExtension && validVideoExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                    this.type = this.VIDEO;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    SliderCustomImageComponent.prototype.videoClickHandler = function (event) {
        if (event && event.srcElement && !this.showVideoControls) {
            if (event.srcElement.paused) {
                event.srcElement.play();
            }
            else {
                event.srcElement.pause();
            }
        }
    };
    SliderCustomImageComponent.ctorParameters = function () { return [
        { type: NgImageFullscreenViewService },
        { type: DomSanitizer }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SliderCustomImageComponent.prototype, "videoAutoPlay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SliderCustomImageComponent.prototype, "showVideoControls", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SliderCustomImageComponent.prototype, "imageUrl", null);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SliderCustomImageComponent.prototype, "isVideo", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderCustomImageComponent.prototype, "alt", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderCustomImageComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SliderCustomImageComponent.prototype, "direction", void 0);
    SliderCustomImageComponent = __decorate([
        Component({
            selector: 'custom-img',
            template: "<div *ngIf=\"fileUrl\" class=\"custom-image-main\">\n    <img class=\"image\"\n        *ngIf=\"type === IMAGE && fileUrl\"\n        [src]=\"fileUrl\"\n        [alt]=\"alt\"\n        [title]=\"title\">\n    <iframe class=\"youtube\"\n        *ngIf=\"type === YOUTUBE && fileUrl\"\n        [src]=\"fileUrl\"\n        frameborder=\"0\"\n        allowfullscreen></iframe>\n    <video class=\"video\"\n        (click)=\"videoClickHandler($event)\"\n        [autoplay]=\"videoAutoPlay\"\n        *ngIf=\"type === VIDEO\"\n        type=\"video/mp4\"\n        [attr.controls]=\"showVideoControls ? showVideoControls : null\"\n        controlsList=\"nodownload\">\n        <source [src]=\"fileUrl\" type=\"video/mp4\">\n        Your browser does not support the video tag.\n    </video>\n    <div [dir]=\"direction\" *ngIf=\"!fileUrl\" class=\"invalid-msg\">Invalid file format</div>\n    <span *ngIf=\"type === YOUTUBE || type === VIDEO || isVideo\" class=\"youtube-icon\"></span>\n</div>"
        }),
        __metadata("design:paramtypes", [NgImageFullscreenViewService, DomSanitizer])
    ], SliderCustomImageComponent);
    return SliderCustomImageComponent;
}());
export { SliderCustomImageComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWN1c3RvbS1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1pbWFnZS1mdWxsc2NyZWVuLXZpZXcvIiwic291cmNlcyI6WyJsaWIvc2xpZGVyLWN1c3RvbS1pbWFnZS9zbGlkZXItY3VzdG9tLWltYWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxLQUFLLEVBQ1IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVuRixJQUFNLGFBQWEsR0FBRyxzRUFBc0UsRUFDeEYsbUJBQW1CLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFDbkQsb0JBQW9CLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQU1uQztJQXNDSSxvQ0FBbUIsMEJBQXdELEVBQVUsU0FBdUI7UUFBekYsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE4QjtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFyQzVHLFlBQU8sR0FBRyxTQUFTLENBQUM7UUFDcEIsVUFBSyxHQUFHLE9BQU8sQ0FBQztRQUNoQixVQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ2hCLFlBQU8sR0FBb0IsRUFBRSxDQUFDO1FBQzlCLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ25CLFNBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRWxCLFVBQVU7UUFDRCxrQkFBYSxHQUFZLEtBQUssQ0FBQztRQUMvQixzQkFBaUIsR0FBVyxDQUFDLENBQUM7UUF1QjlCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsUUFBRyxHQUFXLEVBQUUsQ0FBQztRQUNqQixVQUFLLEdBQVcsRUFBRSxDQUFDO1FBQ25CLGNBQVMsR0FBVyxLQUFL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akI7UUFBUixLQUFLLEVBQUU7a0NBQVEsTUFBTTs2REFBTTtJQUNuQjtRQUFSLEtBQUssRUFBRTs7aUVBQTJCO0lBcEMxQiwwQkFBMEI7UUFKdEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFlBQVk7WUFDdEIsZytCQUFtRDtTQUN0RCxDQUFDO3lDQXVDaUQsNEJBQTRCLEVBQXFCLFlBQVk7T0F0Q25HLDBCQUEwQixDQWtEdEM7SUFBRCxpQ0FBQztDQUFBLEFBbERELElBa0RDO1NBbERZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlUmVzb3VyY2VVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IE5nSW1hZ2VGdWxsc2NyZWVuVmlld1NlcnZpY2UgfSBmcm9tICcuLi9uZy1pbWFnZS1mdWxsc2NyZWVuLXZpZXcuc2VydmljZSc7XG5cbmNvbnN0IHlvdXR1YmVSZWdFeHAgPSAvXi4qKHlvdXR1LmJlXFwvfHZcXC98dVxcL1xcd1xcL3xlbWJlZFxcL3x3YXRjaFxcP3Y9fFxcJnY9fFxcP3Y9KShbXiNcXCZcXD9dKikuKi8sXG4gICAgdmFsaWRGaWxlRXh0ZW5zaW9ucyA9IFsnanBlZycsICdqcGcnLCAnZ2lmJywgJ3BuZyddLFxuICAgIHZhbGlkVmlkZW9FeHRlbnNpb25zID0gWydtcDQnXTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjdXN0b20taW1nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2xpZGVyLWN1c3RvbS1pbWFnZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU2xpZGVyQ3VzdG9tSW1hZ2VDb21wb25lbnQge1xuICAgIFlPVVRVQkUgPSAneW91dHViZSc7XG4gICAgSU1BR0UgPSAnaW1hZ2UnO1xuICAgIFZJREVPID0gJ3ZpZGVvJztcbiAgICBmaWxlVXJsOiBTYWZlUmVzb3VyY2VVcmwgPSAnJztcbiAgICBmaWxlRXh0ZW5zaW9uID0gJyc7XG4gICAgdHlwZSA9IHRoaXMuSU1BR0U7XG5cbiAgICAvLyBAaW5wdXRzXG4gICAgQElucHV0KCkgdmlkZW9BdXRvUGxheTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIEBJbnB1dCgpIHNob3dWaWRlb0NvbnRyb2xzOiBudW1iZXIgPSAxO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGltYWdlVXJsKHVybCkge1xuICAgICAgICBpZiAodXJsICYmIHR5cGVvZiAodXJsKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsZVVybCA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybCh1cmwpO1xuICAgICAgICAgICAgdGhpcy5maWxlRXh0ZW5zaW9uID0gdXJsLnJlcGxhY2UoL14uKlxcLi8sICcnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmltYWdlRnVsbHNjcmVlblZpZXdTZXJ2aWNlLmJhc2U2NEZpbGVFeHRlbnNpb24odXJsKVxuICAgICAgICAgICAgJiYgKHZhbGlkRmlsZUV4dGVuc2lvbnMuaW5kZXhPZih0aGlzLmltYWdlRnVsbHNjcmVlblZpZXdTZXJ2aWNlLmJhc2U2NEZpbGVFeHRlbnNpb24odXJsKS50b0xvd2VyQ2FzZSgpKSA+IC0xIFxuICAgICAgICAgICAgfHwgdmFsaWRWaWRlb0V4dGVuc2lvbnMuaW5kZXhPZih0aGlzLmltYWdlRnVsbHNjcmVlblZpZXdTZXJ2aWNlLmJhc2U2NEZpbGVFeHRlbnNpb24odXJsKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsZUV4dGVuc2lvbiA9IHRoaXMuaW1hZ2VGdWxsc2NyZWVuVmlld1NlcnZpY2UuYmFzZTY0RmlsZUV4dGVuc2lvbih1cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IGZvciB5b3V0dWJlIHVybFxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2goeW91dHViZVJlZ0V4cCk7XG4gICAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMl0ubGVuZ3RoID09PSAxMSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMuWU9VVFVCRTtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVVcmwgPSB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoYCR7Jy8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyd9JHttYXRjaFsyXX0ke3RoaXMudmlkZW9BdXRvUGxheSA/ICc/YXV0b3BsYXk9MSZlbmFibGVqc2FwaT0xJyA6ICc/YXV0b3BsYXk9MCZlbmFibGVqc2FwaT0xJ30keycmY29udHJvbHM9J30ke3RoaXMuc2hvd1ZpZGVvQ29udHJvbHN9YCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmlsZUV4dGVuc2lvbiAmJiB2YWxpZEZpbGVFeHRlbnNpb25zLmluZGV4T2YodGhpcy5maWxlRXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLklNQUdFO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpbGVFeHRlbnNpb24gJiYgdmFsaWRWaWRlb0V4dGVuc2lvbnMuaW5kZXhPZih0aGlzLmZpbGVFeHRlbnNpb24udG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMuVklERU87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgQElucHV0KCkgaXNWaWRlbyA9IGZhbHNlO1xuICAgIEBJbnB1dCgpIGFsdDogU3RyaW5nID0gJyc7XG4gICAgQElucHV0KCkgdGl0bGU6IFN0cmluZyA9ICcnO1xuICAgIEBJbnB1dCgpIGRpcmVjdGlvbjogc3RyaW5nID0gJ2x0cic7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaW1hZ2VGdWxsc2NyZWVuVmlld1NlcnZpY2U6IE5nSW1hZ2VGdWxsc2NyZWVuVmlld1NlcnZpY2UsIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcbiAgICB9XG5cbiAgICB2aWRlb0NsaWNrSGFuZGxlcihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQuc3JjRWxlbWVudCAmJiAhdGhpcy5zaG93VmlkZW9Db250cm9scykge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNyY0VsZW1lbnQucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3JjRWxlbWVudC5wbGF5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV2ZW50LnNyY0VsZW1lbnQucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==