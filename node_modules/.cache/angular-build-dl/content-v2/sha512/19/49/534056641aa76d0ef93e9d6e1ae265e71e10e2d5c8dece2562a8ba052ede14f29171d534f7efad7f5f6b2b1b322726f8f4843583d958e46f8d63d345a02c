{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js"],"names":["MatProgressSpinner__svg_circle_1_Template","rf","ctx","ctx_r0","_spinnerAnimationLabel","_getStrokeDashOffset","_getStrokeCircumference","_getCircleStrokeWidth","_getCircleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r1","MatSpinner__svg_circle_1_Template","MatSpinner__svg_circle_2_Template","_c0","BASE_SIZE","BASE_STROKE_WIDTH","_MatProgressSpinnerBase","mixinColor","_elementRef","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","elementRef","platform","_document","animationMode","defaults","_diameter","_value","_fallbackAnimation","mode","trackedDiameters","_diameters","_getSpinnerAnimationLabel","has","head","set","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","size","coerceNumberProperty","_styleRoot","_attachStyleNode","_strokeWidth","value","newValue","Math","max","min","element","nativeElement","_getShadowRoot","animationClass","classList","add","viewBox","PI","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","ɵfac","MatProgressSpinner_Factory","t","DOCUMENT","ANIMATION_MODULE_TYPE","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","MatProgressSpinner_HostBindings","inputs","color","exportAs","features","decls","vars","consts","template","MatProgressSpinner_Template","_getViewBox","directives","styles","encapsulation","changeDetection","WeakMap","ctorParameters","ElementRef","Platform","undefined","decorators","Optional","Inject","args","String","propDecorators","Input","ngDevMode","Component","selector","host","ChangeDetectionStrategy","ViewEncapsulation","MatSpinner","document","MatSpinner_Factory","MatSpinner_HostBindings","MatSpinner_Template","MatProgressSpinnerModule","MatProgressSpinnerModule_Factory","ɵmod","ɵinj","imports","MatCommonModule","CommonModule","NgModule","exports","declarations","ngJitMode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AAKA,eAASA,yCAAT,CAAmDC,EAAnD,EAAuDC,GAAvD,EAA4D;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AACtE;;AACA,kEAAiB,CAAjB,EAAoB,QAApB,EAA8B,CAA9B;AACH;;AAAC,YAAIA,EAAE,GAAG,CAAT,EAAY;AACV,cAAME,MAAM,GAAG,6DAAf;;AACA,oEAAmB,gBAAnB,EAAqC,wCAAwCA,MAAM,CAACC,sBAApF,EAA4G,mBAA5G,EAAiID,MAAM,CAACE,oBAAP,EAAjI,EAAgK,IAAhK,EAAsK,kBAAtK,EAA0LF,MAAM,CAACG,uBAAP,EAA1L,EAA4N,IAA5N,EAAkO,cAAlO,EAAkPH,MAAM,CAACI,qBAAP,EAAlP,EAAkR,GAAlR;;AACA,oEAAmB,GAAnB,EAAwBJ,MAAM,CAACK,gBAAP,EAAxB;AACH;AAAE;;AACH,eAASC,yCAAT,CAAmDR,EAAnD,EAAuDC,GAAvD,EAA4D;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AACtE;;AACA,kEAAiB,CAAjB,EAAoB,QAApB,EAA8B,CAA9B;AACH;;AAAC,YAAIA,EAAE,GAAG,CAAT,EAAY;AACV,cAAMS,MAAM,GAAG,6DAAf;;AACA,oEAAmB,mBAAnB,EAAwCA,MAAM,CAACL,oBAAP,EAAxC,EAAuE,IAAvE,EAA6E,kBAA7E,EAAiGK,MAAM,CAACJ,uBAAP,EAAjG,EAAmI,IAAnI,EAAyI,cAAzI,EAAyJI,MAAM,CAACH,qBAAP,EAAzJ,EAAyL,GAAzL;;AACA,oEAAmB,GAAnB,EAAwBG,MAAM,CAACF,gBAAP,EAAxB;AACH;AAAE;;AACH,eAASG,iCAAT,CAA2CV,EAA3C,EAA+CC,GAA/C,EAAoD;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAC9D;;AACA,kEAAiB,CAAjB,EAAoB,QAApB,EAA8B,CAA9B;AACH;;AAAC,YAAIA,EAAE,GAAG,CAAT,EAAY;AACV,cAAME,MAAM,GAAG,6DAAf;;AACA,oEAAmB,gBAAnB,EAAqC,wCAAwCA,MAAM,CAACC,sBAApF,EAA4G,mBAA5G,EAAiID,MAAM,CAACE,oBAAP,EAAjI,EAAgK,IAAhK,EAAsK,kBAAtK,EAA0LF,MAAM,CAACG,uBAAP,EAA1L,EAA4N,IAA5N,EAAkO,cAAlO,EAAkPH,MAAM,CAACI,qBAAP,EAAlP,EAAkR,GAAlR;;AACA,oEAAmB,GAAnB,EAAwBJ,MAAM,CAACK,gBAAP,EAAxB;AACH;AAAE;;AACH,eAASI,iCAAT,CAA2CX,EAA3C,EAA+CC,GAA/C,EAAoD;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAC9D;;AACA,kEAAiB,CAAjB,EAAoB,QAApB,EAA8B,CAA9B;AACH;;AAAC,YAAIA,EAAE,GAAG,CAAT,EAAY;AACV,cAAMS,MAAM,GAAG,6DAAf;;AACA,oEAAmB,mBAAnB,EAAwCA,MAAM,CAACL,oBAAP,EAAxC,EAAuE,IAAvE,EAA6E,kBAA7E,EAAiGK,MAAM,CAACJ,uBAAP,EAAjG,EAAmI,IAAnI,EAAyI,cAAzI,EAAyJI,MAAM,CAACH,qBAAP,EAAzJ,EAAyL,GAAzL;;AACA,oEAAmB,GAAnB,EAAwBG,MAAM,CAACF,gBAAP,EAAxB;AACH;AAAE;;AACH,UAAMK,GAAG,GAAG,6wGAAZ;AACA,UAAMC,SAAS,GAAG,GAAlB;AACA;AACA;AACA;AACA;;AACA,UAAMC,iBAAiB,GAAG,EAA1B,C,CACA;;AACA;;AACA,UAAMC,uBAAuB,GAAG,wDAAAC,UAAA;AAC5B,wBAAYC,WAAZ,EAAyB;AAAA;;AACrB,eAAKA,WAAL,GAAmBA,WAAnB;AACH;;AAH2B;AAAA,WAI7B,SAJ6B,CAAhC;AAKA;;;AACA,UAAMC,qCAAoC,GAAG,IAAI,2CAAAC,cAAJ,CAAmB,sCAAnB,EAA2D;AACpGC,kBAAU,EAAE,MADwF;AAEpGC,eAAO,EAAEC;AAF2F,OAA3D,CAA7C;AAIA;;;AACA,eAASA,6CAAT,GAAwD;AACpD,eAAO;AAAEC,kBAAQ,EAAEV;AAAZ,SAAP;AACH,O,CACD;AACA;AACA;AACA;;;AACA,UAAMW,gCAAgC,86CAAtC;AAuBA;AACA;AACA;;UACMC,mB;;;;;AACF,qCAAYC,UAAZ,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,aAA7C,EAA4DC,QAA5D,EAAsE;AAAA;;AAAA;;AAClE,oCAAMJ,UAAN;AACA,gBAAKE,SAAL,GAAiBA,SAAjB;AACA,gBAAKG,SAAL,GAAiBlB,SAAjB;AACA,gBAAKmB,MAAL,GAAc,CAAd;AACA,gBAAKC,kBAAL,GAA0B,KAA1B;AACA;;AACA,gBAAKC,IAAL,GAAY,aAAZ;AACA,cAAMC,gBAAgB,GAAGV,mBAAkB,CAACW,UAA5C;AACA,gBAAKjC,sBAAL,GAA8B,MAAKkC,yBAAL,EAA9B,CATkE,CAUlE;AACA;;AACA,cAAI,CAACF,gBAAgB,CAACG,GAAjB,CAAqBV,SAAS,CAACW,IAA/B,CAAL,EAA2C;AACvCJ,4BAAgB,CAACK,GAAjB,CAAqBZ,SAAS,CAACW,IAA/B,EAAqC,IAAIE,GAAJ,CAAQ,CAAC5B,SAAD,CAAR,CAArC;AACH;;AACD,gBAAKoB,kBAAL,GAA0BN,QAAQ,CAACe,IAAT,IAAiBf,QAAQ,CAACgB,OAApD;AACA,gBAAKC,eAAL,GAAuBf,aAAa,KAAK,gBAAlB,IAClB,CAAC,CAACC,QAAF,IAAc,CAACA,QAAQ,CAACe,gBAD7B;;AAEA,cAAIf,QAAJ,EAAc;AACV,gBAAIA,QAAQ,CAACP,QAAb,EAAuB;AACnB,oBAAKA,QAAL,GAAgBO,QAAQ,CAACP,QAAzB;AACH;;AACD,gBAAIO,QAAQ,CAACgB,WAAb,EAA0B;AACtB,oBAAKA,WAAL,GAAmBhB,QAAQ,CAACgB,WAA5B;AACH;AACJ;;AAzBiE;AA0BrE;AACD;;;;;eACA,eAAe;AAAE,mBAAO,KAAKf,SAAZ;AAAwB,W;eACzC,aAAagB,IAAb,EAAmB;AACf,iBAAKhB,SAAL,GAAiB,uDAAAiB,oBAAA,EAAqBD,IAArB,CAAjB;AACA,iBAAK5C,sBAAL,GAA8B,KAAKkC,yBAAL,EAA9B,CAFe,CAGf;;AACA,gBAAI,CAAC,KAAKJ,kBAAN,IAA4B,KAAKgB,UAArC,EAAiD;AAC7C,mBAAKC,gBAAL;AACH;AACJ;AACD;;;;eACA,eAAkB;AACd,mBAAO,KAAKC,YAAL,IAAqB,KAAK5B,QAAL,GAAgB,EAA5C;AACH,W;eACD,aAAgB6B,KAAhB,EAAuB;AACnB,iBAAKD,YAAL,GAAoB,uDAAAH,oBAAA,EAAqBI,KAArB,CAApB;AACH;AACD;;;;eACA,eAAY;AACR,mBAAO,KAAKlB,IAAL,KAAc,aAAd,GAA8B,KAAKF,MAAnC,GAA4C,CAAnD;AACH,W;eACD,aAAUqB,QAAV,EAAoB;AAChB,iBAAKrB,MAAL,GAAcsB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAAS,GAAT,EAAc,uDAAAR,oBAAA,EAAqBK,QAArB,CAAd,CAAZ,CAAd;AACH;;;iBACD,oBAAW;AACP,gBAAMI,OAAO,GAAG,KAAKxC,WAAL,CAAiByC,aAAjC,CADO,CAEP;AACA;AACA;;AACA,iBAAKT,UAAL,GAAkB,uDAAAU,cAAA,EAAeF,OAAf,KAA2B,KAAK7B,SAAL,CAAeW,IAA5D;;AACA,iBAAKW,gBAAL,GANO,CAOP;AACA;;;AACA,gBAAMU,cAAc,+CAAwC,KAAK3B,kBAAL,GAA0B,WAA1B,GAAwC,EAAhF,eAApB;AACAwB,mBAAO,CAACI,SAAR,CAAkBC,GAAlB,CAAsBF,cAAtB;AACH;AACD;;;;iBACA,4BAAmB;AACf,mBAAO,CAAC,KAAKrC,QAAL,GAAgBT,iBAAjB,IAAsC,CAA7C;AACH;AACD;;;;iBACA,uBAAc;AACV,gBAAMiD,OAAO,GAAG,KAAKxD,gBAAL,KAA0B,CAA1B,GAA8B,KAAKuC,WAAnD;AACA,iCAAciB,OAAd,cAAyBA,OAAzB;AACH;AACD;;;;iBACA,mCAA0B;AACtB,mBAAO,IAAIT,IAAI,CAACU,EAAT,GAAc,KAAKzD,gBAAL,EAArB;AACH;AACD;;;;iBACA,gCAAuB;AACnB,gBAAI,KAAK2B,IAAL,KAAc,aAAlB,EAAiC;AAC7B,qBAAO,KAAK7B,uBAAL,MAAkC,MAAM,KAAK2B,MAA7C,IAAuD,GAA9D;AACH,aAHkB,CAInB;;;AACA,gBAAI,KAAKC,kBAAL,IAA2B,KAAKC,IAAL,KAAc,eAA7C,EAA8D;AAC1D,qBAAO,KAAK7B,uBAAL,KAAiC,GAAxC;AACH;;AACD,mBAAO,IAAP;AACH;AACD;;;;iBACA,iCAAwB;AACpB,mBAAO,KAAKyC,WAAL,GAAmB,KAAKvB,QAAxB,GAAmC,GAA1C;AACH;AACD;;;;iBACA,4BAAmB;AACf,gBAAM0C,SAAS,GAAG,KAAKhB,UAAvB;AACA,gBAAMiB,eAAe,GAAG,KAAKnC,SAA7B;AACA,gBAAMoC,SAAS,GAAG1C,mBAAkB,CAACW,UAArC;AACA,gBAAIgC,mBAAmB,GAAGD,SAAS,CAACE,GAAV,CAAcJ,SAAd,CAA1B;;AACA,gBAAI,CAACG,mBAAD,IAAwB,CAACA,mBAAmB,CAAC9B,GAApB,CAAwB4B,eAAxB,CAA7B,EAAuE;AACnE,kBAAMI,QAAQ,GAAG,KAAK1C,SAAL,CAAe2C,aAAf,CAA6B,OAA7B,CAAjB;;AACAD,sBAAQ,CAACE,YAAT,CAAsB,uBAAtB,EAA+C,KAAKrE,sBAApD;AACAmE,sBAAQ,CAACG,WAAT,GAAuB,KAAKC,iBAAL,EAAvB;AACAT,uBAAS,CAACU,WAAV,CAAsBL,QAAtB;;AACA,kBAAI,CAACF,mBAAL,EAA0B;AACtBA,mCAAmB,GAAG,IAAI3B,GAAJ,EAAtB;AACA0B,yBAAS,CAAC3B,GAAV,CAAcyB,SAAd,EAAyBG,mBAAzB;AACH;;AACDA,iCAAmB,CAACN,GAApB,CAAwBI,eAAxB;AACH;AACJ;AACD;;;;iBACA,6BAAoB;AAChB,gBAAMU,mBAAmB,GAAG,KAAKvE,uBAAL,EAA5B;;AACA,mBAAOmB,gCAAgC,CACnC;AADmC,aAElCqD,OAFE,CAEM,cAFN,YAEyB,OAAOD,mBAFhC,GAGFC,OAHE,CAGM,YAHN,YAGuB,MAAMD,mBAH7B,GAIFC,OAJE,CAIM,WAJN,YAIsB,KAAK1E,sBAJ3B,EAAP;AAKH;AACD;;;;iBACA,qCAA4B;AACxB;AACA;AACA,mBAAO,KAAKoB,QAAL,CAAcuD,QAAd,GAAyBD,OAAzB,CAAiC,GAAjC,EAAsC,GAAtC,CAAP;AACH;;;;QA5H4B9D,uB;;AA8HjCU,yBAAkB,CAACsD,IAAnB,GAA0B,SAASC,0BAAT,CAAoCC,CAApC,EAAuC;AAAE,eAAO,KAAKA,CAAC,IAAIxD,mBAAV,EAA8B,gEAAyB,qDAAzB,CAA9B,EAA2E,gEAAyB,2DAAzB,CAA3E,EAAsH,gEAAyB,6CAAAyD,QAAzB,EAAmC,CAAnC,CAAtH,EAA6J,gEAAyB,kEAAAC,qBAAzB,EAAgD,CAAhD,CAA7J,EAAiN,gEAAyBjE,qCAAzB,CAAjN,CAAP;AAA0R,OAA7V;;AACAO,yBAAkB,CAAC2D,IAAnB,GAA0B,aAAc,gEAAyB;AAAEC,YAAI,EAAE5D,mBAAR;AAA4B6D,iBAAS,EAAE,CAAC,CAAC,sBAAD,CAAD,CAAvC;AAAmEC,iBAAS,EAAE,CAAC,MAAD,EAAS,aAAT,EAAwB,UAAxB,EAAoC,IAApC,EAA0C,CAA1C,EAA6C,sBAA7C,CAA9E;AAAoJC,gBAAQ,EAAE,EAA9J;AAAkKC,oBAAY,EAAE,SAASC,+BAAT,CAAyC1F,EAAzC,EAA6CC,GAA7C,EAAkD;AAAE,cAAID,EAAE,GAAG,CAAT,EAAY;AACzS,sEAAmB,eAAnB,EAAoCC,GAAG,CAACiC,IAAJ,KAAa,aAAb,GAA6B,CAA7B,GAAiC,IAArE,EAA2E,eAA3E,EAA4FjC,GAAG,CAACiC,IAAJ,KAAa,aAAb,GAA6B,GAA7B,GAAmC,IAA/H,EAAqI,eAArI,EAAsJjC,GAAG,CAACiC,IAAJ,KAAa,aAAb,GAA6BjC,GAAG,CAACmD,KAAjC,GAAyC,IAA/L,EAAqM,MAArM,EAA6MnD,GAAG,CAACiC,IAAjN;;AACA,sEAAmB,OAAnB,EAA4BjC,GAAG,CAACsB,QAAhC,EAA0C,IAA1C,EAAgD,QAAhD,EAA0DtB,GAAG,CAACsB,QAA9D,EAAwE,IAAxE;;AACA,sEAAmB,yBAAnB,EAA8CtB,GAAG,CAAC2C,eAAlD;AACH;AAAE,SAJ0D;AAIxD+C,cAAM,EAAE;AAAEC,eAAK,EAAE,OAAT;AAAkB1D,cAAI,EAAE,MAAxB;AAAgCX,kBAAQ,EAAE,UAA1C;AAAsDuB,qBAAW,EAAE,aAAnE;AAAkFM,eAAK,EAAE;AAAzF,SAJgD;AAIoDyC,gBAAQ,EAAE,CAAC,oBAAD,CAJ9D;AAIsFC,gBAAQ,EAAE,CAAC,wEAAD,CAJhG;AAIqIC,aAAK,EAAE,CAJ5I;AAI+IC,YAAI,EAAE,CAJrJ;AAIwJC,cAAM,EAAE,CAAC,CAAC,qBAAD,EAAwB,eAAxB,EAAyC,WAAzC,EAAsD,OAAtD,EAA+D,aAA/D,EAA8E,MAA9E,EAAsF,CAAtF,EAAyF,UAAzF,CAAD,EAAuG,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,EAA2B,CAA3B,EAA8B,gBAA9B,EAAgD,mBAAhD,EAAqE,kBAArE,EAAyF,cAAzF,EAAyG,CAAzG,EAA4G,cAA5G,CAAvG,EAAoO,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,EAA2B,CAA3B,EAA8B,mBAA9B,EAAmD,kBAAnD,EAAuE,cAAvE,EAAuF,CAAvF,EAA0F,cAA1F,CAApO,EAA+U,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,CAA/U,CAJhK;AAI4gBC,gBAAQ,EAAE,SAASC,2BAAT,CAAqCnG,EAArC,EAAyCC,GAAzC,EAA8C;AAAE,cAAID,EAAE,GAAG,CAAT,EAAY;AAC3oB;;AACA,yEAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;;AACA,qEAAkB,CAAlB,EAAqBD,yCAArB,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,QAAtE,EAAgF,CAAhF;;AACA,qEAAkB,CAAlB,EAAqBS,yCAArB,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,QAAtE,EAAgF,CAAhF;;AACA;AACH;;AAAC,cAAIR,EAAE,GAAG,CAAT,EAAY;AACV,sEAAmB,OAAnB,EAA4BC,GAAG,CAACsB,QAAhC,EAA0C,IAA1C,EAAgD,QAAhD,EAA0DtB,GAAG,CAACsB,QAA9D,EAAwE,IAAxE;;AACA,qEAAkB,UAAlB,EAA8BtB,GAAG,CAACiC,IAAJ,KAAa,eAA3C;;AACA,sEAAmB,SAAnB,EAA8BjC,GAAG,CAACmG,WAAJ,EAA9B;;AACA,oEAAiB,CAAjB;;AACA,qEAAkB,cAAlB,EAAkC,IAAlC;;AACA,oEAAiB,CAAjB;;AACA,qEAAkB,cAAlB,EAAkC,KAAlC;AACH;AAAE,SAlB0D;AAkBxDC,kBAAU,EAAE,CAAC,qDAAD,EAAkB,yDAAlB,CAlB4C;AAkBJC,cAAM,EAAE,CAAC1F,GAAD,CAlBJ;AAkBW2F,qBAAa,EAAE,CAlB1B;AAkB6BC,uBAAe,EAAE;AAlB9C,OAAzB,CAAxC;AAmBA;AACA;AACA;AACA;AACA;AACA;;AACA/E,yBAAkB,CAACW,UAAnB,GAAgC,IAAIqE,OAAJ,EAAhC;;AACAhF,yBAAkB,CAACiF,cAAnB,GAAoC;AAAA,eAAM,CACtC;AAAErB,cAAI,EAAE,2CAAAsB;AAAR,SADsC,EAEtC;AAAEtB,cAAI,EAAE,mDAAAuB;AAAR,SAFsC,EAGtC;AAAEvB,cAAI,EAAEwB,SAAR;AAAmBC,oBAAU,EAAE,CAAC;AAAEzB,gBAAI,EAAE,2CAAA0B;AAAR,WAAD,EAAqB;AAAE1B,gBAAI,EAAE,2CAAA2B,MAAR;AAAgBC,gBAAI,EAAE,CAAC,6CAAA/B,QAAD;AAAtB,WAArB;AAA/B,SAHsC,EAItC;AAAEG,cAAI,EAAE6B,MAAR;AAAgBJ,oBAAU,EAAE,CAAC;AAAEzB,gBAAI,EAAE,2CAAA0B;AAAR,WAAD,EAAqB;AAAE1B,gBAAI,EAAE,2CAAA2B,MAAR;AAAgBC,gBAAI,EAAE,CAAC,kEAAA9B,qBAAD;AAAtB,WAArB;AAA5B,SAJsC,EAKtC;AAAEE,cAAI,EAAEwB,SAAR;AAAmBC,oBAAU,EAAE,CAAC;AAAEzB,gBAAI,EAAE,2CAAA2B,MAAR;AAAgBC,gBAAI,EAAE,CAAC/F,qCAAD;AAAtB,WAAD;AAA/B,SALsC,CAAN;AAAA,OAApC;;AAOAO,yBAAkB,CAAC0F,cAAnB,GAAoC;AAChC5F,gBAAQ,EAAE,CAAC;AAAE8D,cAAI,EAAE,2CAAA+B;AAAR,SAAD,CADsB;AAEhCtE,mBAAW,EAAE,CAAC;AAAEuC,cAAI,EAAE,2CAAA+B;AAAR,SAAD,CAFmB;AAGhClF,YAAI,EAAE,CAAC;AAAEmD,cAAI,EAAE,2CAAA+B;AAAR,SAAD,CAH0B;AAIhChE,aAAK,EAAE,CAAC;AAAEiC,cAAI,EAAE,2CAAA+B;AAAR,SAAD;AAJyB,OAApC;;AAMA,OAAC,YAAY;AAAE,SAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,gEAAyB5F,mBAAzB,EAA6C,CAAC;AACxG4D,cAAI,EAAE,2CAAAiC,SADkG;AAExGL,cAAI,EAAE,CAAC;AACCM,oBAAQ,EAAE,sBADX;AAEC1B,oBAAQ,EAAE,oBAFX;AAGC2B,gBAAI,EAAE;AACF,sBAAQ,aADN;AAEF,uBAAS,sBAFP;AAGF;AACA;AACA,0BAAY,IALV;AAMF,kEANE;AAOF,kCAAoB,UAPlB;AAQF,mCAAqB,UARnB;AASF,sCAAwB,mCATtB;AAUF,sCAAwB,qCAVtB;AAWF,sCAAwB,uCAXtB;AAYF,6BAAe;AAZb,aAHP;AAiBC7B,kBAAM,EAAE,CAAC,OAAD,CAjBT;AAkBCO,oBAAQ,EAAE,q3DAlBX;AAmBCM,2BAAe,EAAE,2CAAAiB,uBAAA,OAnBlB;AAoBClB,yBAAa,EAAE,2CAAAmB,iBAAA,KApBhB;AAqBCpB,kBAAM,EAAE,CAAC,6wGAAD;AArBT,WAAD;AAFkG,SAAD,CAA7C,EAyB1D,YAAY;AAAE,iBAAO,CAAC;AAAEjB,gBAAI,EAAE;AAAR,WAAD,EAA8B;AAAEA,gBAAI,EAAE;AAAR,WAA9B,EAAyD;AAAEA,gBAAI,EAAEwB,SAAR;AAAmBC,sBAAU,EAAE,CAAC;AACtGzB,kBAAI,EAAE,2CAAA0B;AADgG,aAAD,EAEtG;AACC1B,kBAAI,EAAE,2CAAA2B,MADP;AAECC,kBAAI,EAAE,CAAC,6CAAA/B,QAAD;AAFP,aAFsG;AAA/B,WAAzD,EAKX;AAAEG,gBAAI,EAAE6B,MAAR;AAAgBJ,sBAAU,EAAE,CAAC;AAC/BzB,kBAAI,EAAE,2CAAA0B;AADyB,aAAD,EAE/B;AACC1B,kBAAI,EAAE,2CAAA2B,MADP;AAECC,kBAAI,EAAE,CAAC,kEAAA9B,qBAAD;AAFP,aAF+B;AAA5B,WALW,EAUX;AAAEE,gBAAI,EAAEwB,SAAR;AAAmBC,sBAAU,EAAE,CAAC;AAClCzB,kBAAI,EAAE,2CAAA2B,MAD4B;AAElCC,kBAAI,EAAE,CAAC/F,qCAAD;AAF4B,aAAD;AAA/B,WAVW,CAAP;AAaF,SAtC8C,EAsC5C;AAAEgB,cAAI,EAAE,CAAC;AACnBmD,gBAAI,EAAE,2CAAA+B;AADa,WAAD,CAAR;AAEV7F,kBAAQ,EAAE,CAAC;AACX8D,gBAAI,EAAE,2CAAA+B;AADK,WAAD,CAFA;AAIVtE,qBAAW,EAAE,CAAC;AACduC,gBAAI,EAAE,2CAAA+B;AADQ,WAAD,CAJH;AAMVhE,eAAK,EAAE,CAAC;AACRiC,gBAAI,EAAE,2CAAA+B;AADE,WAAD;AANG,SAtC4C,CAAnD;AA8CC,OA9ChB;AA+CA;AACA;AACA;AACA;AACA;AACA;;;UACMO,W;;;;;AACF,6BAAYjG,UAAZ,EAAwBC,QAAxB,EAAkCiG,QAAlC,EAA4C/F,aAA5C,EAA2DC,QAA3D,EAAqE;AAAA;;AAAA;;AACjE,sCAAMJ,UAAN,EAAkBC,QAAlB,EAA4BiG,QAA5B,EAAsC/F,aAAtC,EAAqDC,QAArD;AACA,iBAAKI,IAAL,GAAY,eAAZ;AAFiE;AAGpE;;;QAJoBT,mB;;AAMzBkG,iBAAU,CAAC5C,IAAX,GAAkB,SAAS8C,kBAAT,CAA4B5C,CAA5B,EAA+B;AAAE,eAAO,KAAKA,CAAC,IAAI0C,WAAV,EAAsB,gEAAyB,qDAAzB,CAAtB,EAAmE,gEAAyB,2DAAzB,CAAnE,EAA8G,gEAAyB,6CAAAzC,QAAzB,EAAmC,CAAnC,CAA9G,EAAqJ,gEAAyB,kEAAAC,qBAAzB,EAAgD,CAAhD,CAArJ,EAAyM,gEAAyBjE,qCAAzB,CAAzM,CAAP;AAAkR,OAArU;;AACAyG,iBAAU,CAACvC,IAAX,GAAkB,aAAc,gEAAyB;AAAEC,YAAI,EAAEsC,WAAR;AAAoBrC,iBAAS,EAAE,CAAC,CAAC,aAAD,CAAD,CAA/B;AAAkDC,iBAAS,EAAE,CAAC,MAAD,EAAS,aAAT,EAAwB,MAAxB,EAAgC,eAAhC,EAAiD,CAAjD,EAAoD,aAApD,EAAmE,sBAAnE,CAA7D;AAAyJC,gBAAQ,EAAE,CAAnK;AAAsKC,oBAAY,EAAE,SAASqC,uBAAT,CAAiC9H,EAAjC,EAAqCC,GAArC,EAA0C;AAAE,cAAID,EAAE,GAAG,CAAT,EAAY;AAC7R,sEAAmB,OAAnB,EAA4BC,GAAG,CAACsB,QAAhC,EAA0C,IAA1C,EAAgD,QAAhD,EAA0DtB,GAAG,CAACsB,QAA9D,EAAwE,IAAxE;;AACA,sEAAmB,yBAAnB,EAA8CtB,GAAG,CAAC2C,eAAlD;AACH;AAAE,SAHkD;AAGhD+C,cAAM,EAAE;AAAEC,eAAK,EAAE;AAAT,SAHwC;AAGpBE,gBAAQ,EAAE,CAAC,wEAAD,CAHU;AAG2BC,aAAK,EAAE,CAHlC;AAGqCC,YAAI,EAAE,CAH3C;AAG8CC,cAAM,EAAE,CAAC,CAAC,qBAAD,EAAwB,eAAxB,EAAyC,WAAzC,EAAsD,OAAtD,EAA+D,aAA/D,EAA8E,MAA9E,EAAsF,CAAtF,EAAyF,UAAzF,CAAD,EAAuG,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,EAA2B,CAA3B,EAA8B,gBAA9B,EAAgD,mBAAhD,EAAqE,kBAArE,EAAyF,cAAzF,EAAyG,CAAzG,EAA4G,cAA5G,CAAvG,EAAoO,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,EAA2B,CAA3B,EAA8B,mBAA9B,EAAmD,kBAAnD,EAAuE,cAAvE,EAAuF,CAAvF,EAA0F,cAA1F,CAApO,EAA+U,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,CAA/U,CAHtD;AAGkaC,gBAAQ,EAAE,SAAS6B,mBAAT,CAA6B/H,EAA7B,EAAiCC,GAAjC,EAAsC;AAAE,cAAID,EAAE,GAAG,CAAT,EAAY;AACjhB;;AACA,yEAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;;AACA,qEAAkB,CAAlB,EAAqBU,iCAArB,EAAwD,CAAxD,EAA2D,CAA3D,EAA8D,QAA9D,EAAwE,CAAxE;;AACA,qEAAkB,CAAlB,EAAqBC,iCAArB,EAAwD,CAAxD,EAA2D,CAA3D,EAA8D,QAA9D,EAAwE,CAAxE;;AACA;AACH;;AAAC,cAAIX,EAAE,GAAG,CAAT,EAAY;AACV,sEAAmB,OAAnB,EAA4BC,GAAG,CAACsB,QAAhC,EAA0C,IAA1C,EAAgD,QAAhD,EAA0DtB,GAAG,CAACsB,QAA9D,EAAwE,IAAxE;;AACA,qEAAkB,UAAlB,EAA8BtB,GAAG,CAACiC,IAAJ,KAAa,eAA3C;;AACA,sEAAmB,SAAnB,EAA8BjC,GAAG,CAACmG,WAAJ,EAA9B;;AACA,oEAAiB,CAAjB;;AACA,qEAAkB,cAAlB,EAAkC,IAAlC;;AACA,oEAAiB,CAAjB;;AACA,qEAAkB,cAAlB,EAAkC,KAAlC;AACH;AAAE,SAjBkD;AAiBhDC,kBAAU,EAAE,CAAC,qDAAD,EAAkB,yDAAlB,CAjBoC;AAiBIC,cAAM,EAAE,CAAC1F,GAAD,CAjBZ;AAiBmB2F,qBAAa,EAAE,CAjBlC;AAiBqCC,uBAAe,EAAE;AAjBtD,OAAzB,CAAhC;;AAkBAmB,iBAAU,CAACjB,cAAX,GAA4B;AAAA,eAAM,CAC9B;AAAErB,cAAI,EAAE,2CAAAsB;AAAR,SAD8B,EAE9B;AAAEtB,cAAI,EAAE,mDAAAuB;AAAR,SAF8B,EAG9B;AAAEvB,cAAI,EAAEwB,SAAR;AAAmBC,oBAAU,EAAE,CAAC;AAAEzB,gBAAI,EAAE,2CAAA0B;AAAR,WAAD,EAAqB;AAAE1B,gBAAI,EAAE,2CAAA2B,MAAR;AAAgBC,gBAAI,EAAE,CAAC,6CAAA/B,QAAD;AAAtB,WAArB;AAA/B,SAH8B,EAI9B;AAAEG,cAAI,EAAE6B,MAAR;AAAgBJ,oBAAU,EAAE,CAAC;AAAEzB,gBAAI,EAAE,2CAAA0B;AAAR,WAAD,EAAqB;AAAE1B,gBAAI,EAAE,2CAAA2B,MAAR;AAAgBC,gBAAI,EAAE,CAAC,kEAAA9B,qBAAD;AAAtB,WAArB;AAA5B,SAJ8B,EAK9B;AAAEE,cAAI,EAAEwB,SAAR;AAAmBC,oBAAU,EAAE,CAAC;AAAEzB,gBAAI,EAAE,2CAAA2B,MAAR;AAAgBC,gBAAI,EAAE,CAAC/F,qCAAD;AAAtB,WAAD;AAA/B,SAL8B,CAAN;AAAA,OAA5B;;AAOA,OAAC,YAAY;AAAE,SAAC,OAAOmG,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,gEAAyBM,WAAzB,EAAqC,CAAC;AAChGtC,cAAI,EAAE,2CAAAiC,SAD0F;AAEhGL,cAAI,EAAE,CAAC;AACCM,oBAAQ,EAAE,aADX;AAECC,gBAAI,EAAE;AACF,sBAAQ,aADN;AAEF,sBAAQ,eAFN;AAGF,uBAAS,kCAHP;AAIF,kEAJE;AAKF,kCAAoB,UALlB;AAMF,mCAAqB;AANnB,aAFP;AAUC7B,kBAAM,EAAE,CAAC,OAAD,CAVT;AAWCO,oBAAQ,EAAE,q3DAXX;AAYCM,2BAAe,EAAE,2CAAAiB,uBAAA,OAZlB;AAaClB,yBAAa,EAAE,2CAAAmB,iBAAA,KAbhB;AAcCpB,kBAAM,EAAE,CAAC,6wGAAD;AAdT,WAAD;AAF0F,SAAD,CAArC,EAkB1D,YAAY;AAAE,iBAAO,CAAC;AAAEjB,gBAAI,EAAE;AAAR,WAAD,EAA8B;AAAEA,gBAAI,EAAE;AAAR,WAA9B,EAAyD;AAAEA,gBAAI,EAAEwB,SAAR;AAAmBC,sBAAU,EAAE,CAAC;AACtGzB,kBAAI,EAAE,2CAAA0B;AADgG,aAAD,EAEtG;AACC1B,kBAAI,EAAE,2CAAA2B,MADP;AAECC,kBAAI,EAAE,CAAC,6CAAA/B,QAAD;AAFP,aAFsG;AAA/B,WAAzD,EAKX;AAAEG,gBAAI,EAAE6B,MAAR;AAAgBJ,sBAAU,EAAE,CAAC;AAC/BzB,kBAAI,EAAE,2CAAA0B;AADyB,aAAD,EAE/B;AACC1B,kBAAI,EAAE,2CAAA2B,MADP;AAECC,kBAAI,EAAE,CAAC,kEAAA9B,qBAAD;AAFP,aAF+B;AAA5B,WALW,EAUX;AAAEE,gBAAI,EAAEwB,SAAR;AAAmBC,sBAAU,EAAE,CAAC;AAClCzB,kBAAI,EAAE,2CAAA2B,MAD4B;AAElCC,kBAAI,EAAE,CAAC/F,qCAAD;AAF4B,aAAD;AAA/B,WAVW,CAAP;AAaF,SA/B8C,EA+B5C,IA/B4C,CAAnD;AA+Be,OA/B9B;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACM8G,yB;;;;AAENA,+BAAwB,CAACjD,IAAzB,GAAgC,SAASkD,gCAAT,CAA0ChD,CAA1C,EAA6C;AAAE,eAAO,KAAKA,CAAC,IAAI+C,yBAAV,GAAP;AAA+C,OAA9H;;AACAA,+BAAwB,CAACE,IAAzB,GAAgC,aAAc,+DAAwB;AAAE7C,YAAI,EAAE2C;AAAR,OAAxB,CAA9C;AACAA,+BAAwB,CAACG,IAAzB,GAAgC,aAAc,+DAAwB;AAAEC,eAAO,EAAE,CAAC,CAAC,oDAAAC,eAAD,EAAkB,6CAAAC,YAAlB,CAAD,EAAkC,oDAAAD,eAAlC;AAAX,OAAxB,CAA9C;;AACA,OAAC,YAAY;AAAE,SAAC,OAAOhB,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,gEAAyBW,yBAAzB,EAAmD,CAAC;AAC9G3C,cAAI,EAAE,2CAAAkD,QADwG;AAE9GtB,cAAI,EAAE,CAAC;AACCmB,mBAAO,EAAE,CAAC,oDAAAC,eAAD,EAAkB,6CAAAC,YAAlB,CADV;AAECE,mBAAO,EAAE,CACL/G,mBADK,EAELkG,WAFK,EAGL,oDAAAU,eAHK,CAFV;AAOCI,wBAAY,EAAE,CACVhH,mBADU,EAEVkG,WAFU;AAPf,WAAD;AAFwG,SAAD,CAAnD,EAc1D,IAd0D,EAcpD,IAdoD,CAAnD;AAcO,OAdtB;;AAeA,OAAC,YAAY;AAAE,SAAC,OAAOe,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,iEAA0BV,yBAA1B,EAAoD;AAAES,sBAAY,EAAE,wBAAY;AAAE,mBAAO,CAAChH,mBAAD,EAAqBkG,WAArB,CAAP;AAA0C,WAAxE;AAA0ES,iBAAO,EAAE,mBAAY;AAAE,mBAAO,CAAC,oDAAAC,eAAD,EAAkB,6CAAAC,YAAlB,CAAP;AAAyC,WAA1I;AAA4IE,iBAAO,EAAE,mBAAY;AAAE,mBAAO,CAAC/G,mBAAD,EAAqBkG,WAArB,EAAiC,oDAAAU,eAAjC,CAAP;AAA2D;AAA9N,SAApD,CAAnD;AAA2U,OAA1V;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAIA","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_progress-spinner_js-es5.js","sourcesContent":["import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nconst _c0 = \".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\";\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\n    constructor(elementRef, platform, _document, animationMode, defaults) {\n        super(elementRef);\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() { return this._diameter; }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (!this._fallbackAnimation && this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        element.classList.add(animationClass);\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._getStrokeCircumference() * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._getStrokeCircumference() * 0.2;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    // set tab index to -1 so screen readers will read the aria-label\n                    // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                    'tabindex': '-1',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); };\nMatProgressSpinnerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, CommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n\n//# sourceMappingURL=progress-spinner.js.map"]}