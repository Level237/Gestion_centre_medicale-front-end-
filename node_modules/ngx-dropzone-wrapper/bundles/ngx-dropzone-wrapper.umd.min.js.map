{"version":3,"sources":["../../../projects/lib/src/lib/dropzone.interfaces.ts","../../../projects/lib/src/lib/dropzone.directive.ts","../../../projects/lib/src/lib/dropzone.component.ts","../../../projects/lib/src/lib/dropzone.module.ts"],"names":["DROPZONE_CONFIG","InjectionToken","DropzoneEvents","DropzoneConfig","config","this","assign","prototype","target","key","Array","isArray","HTMLElement","DropzoneDirective","zone","renderer","elementRef","differs","platformId","defaults","configDiff","disabled","DZ_INIT","EventEmitter","DZ_ERROR","DZ_SUCCESS","DZ_SENDING","DZ_CANCELED","DZ_COMPLETE","DZ_PROCESSING","DZ_DROP","DZ_DRAGSTART","DZ_DRAGEND","DZ_DRAGENTER","DZ_DRAGOVER","DZ_DRAGLEAVE","DZ_THUMBNAIL","DZ_ADDEDFILE","DZ_ADDEDFILES","DZ_REMOVEDFILE","DZ_UPLOADPROGRESS","DZ_MAXFILESREACHED","DZ_MAXFILESEXCEEDED","DZ_ERRORMULTIPLE","DZ_SUCCESSMULTIPLE","DZ_SENDINGMULTIPLE","DZ_CANCELEDMULTIPLE","DZ_COMPLETEMULTIPLE","DZ_PROCESSINGMULTIPLE","DZ_RESET","DZ_QUEUECOMPLETE","DZ_TOTALUPLOADPROGRESS","Dropzone","autoDiscover","ngOnInit","_this","isPlatformBrowser","params","addClass","nativeElement","maxFiles","removeClass","runOutsideAngular","instance","disable","observers","length","run","emit","on","autoReset","setTimeout","reset","errorReset","cancelReset","forEach","eventName","toLowerCase","args","_i","arguments","output","toUpperCase","emitter","find","create","diff","ngOnDestroy","destroy","ngDoCheck","ngOnChanges","changes","currentValue","previousValue","enable","dropzone","cancel","removeAllFiles","Directive","selector","exportAs","NgZone","Renderer2","ElementRef","KeyValueDiffers","Object","decorators","type","Inject","PLATFORM_ID","Optional","Input","Output","DropzoneComponent","message","placeholder","useDropzoneClass","window","directiveRef","directiveOutput","componentOutput","getPlaceholder","encodeURI","Component","template","encapsulation","ViewEncapsulation","None","ViewChild","static","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const DROPZONE_CONFIG = new InjectionToken('DROPZONE_CONFIG');\n\nexport type DropzoneEvent = 'error' | 'success' | 'sending' | 'canceled' | 'complete' |\n  'processing' | 'drop' | 'dragStart' | 'dragEnd' | 'dragEnter' | 'dragOver' | 'dragLeave' |\n  'thumbnail' | 'addedFile' | 'addedFiles' | 'removedFile' | 'uploadProgress' | 'maxFilesReached' |\n  'maxFilesExceeded' | 'errorMultiple' | 'successMultiple' | 'sendingMultiple' | 'canceledMultiple' |\n  'completeMultiple' | 'processingMultiple' | 'reset' | 'queueComplete' | 'totalUploadProgress';\n\nexport const DropzoneEvents: DropzoneEvent[] = [\n  'error',\n  'success',\n  'sending',\n  'canceled',\n  'complete',\n  'processing',\n\n  'drop',\n  'dragStart',\n  'dragEnd',\n  'dragEnter',\n  'dragOver',\n  'dragLeave',\n\n  'thumbnail',\n  'addedFile',\n  'addedFiles',\n  'removedFile',\n  'uploadProgress',\n  'maxFilesReached',\n  'maxFilesExceeded',\n\n  'errorMultiple',\n  'successMultiple',\n  'sendingMultiple',\n  'canceledMultiple',\n  'completeMultiple',\n  'processingMultiple',\n\n  'reset',\n  'queueComplete',\n  'totalUploadProgress'\n];\n\nexport interface DropzoneConfigInterface {\n  timeout?: number,\n\n  autoReset?: number | null,\n  errorReset?: number | null,\n  cancelReset?: number | null,\n\n  url?: string | DropzoneUrlFunction,\n  method?: string | DropzoneMethodFunction,\n\n  params?: any | DropzoneParamsFunction,\n  headers?: any | DropzoneHeadersFunction,\n\n  init?: DropzoneInitFunction,\n  accept?: DropzoneAcceptFunction,\n  resize?: DropzoneResizeFunction,\n  fallback?: DropzoneFallbackFunction,\n  renameFile?: DropzoneRenameFileFunction,\n  transformFile?: DropzoneTransformFileFunction,\n  chunksUploaded?: DropzoneChunksUploadedFunction,\n\n  withCredentials?: boolean,\n\n  previewsContainer?: any,\n  hiddenInputContainer?: any,\n\n  clickable?: string | string[] | boolean,\n  paramName?: any,\n  capture?: string,\n  maxFiles?: number,\n  maxFilesize?: number,\n  filesizeBase?: number,\n  acceptedFiles?: string,\n  forceFallback?: boolean,\n  addRemoveLinks?: boolean,\n  uploadMultiple?: boolean,\n  parallelUploads?: number,\n  resizeWidth?: number,\n  resizeHeight?: number,\n  resizeMethod?: 'contain' | 'crop',\n  resizeQuality?: number,\n  resizeMimeType?: string,\n  thumbnailWidth?: number,\n  thumbnailHeight?: number,\n  thumbnailMethod?: 'contain' | 'crop',\n  previewTemplate?: string,\n  autoQueue?: boolean,\n  autoProcessQueue?: boolean,\n  ignoreHiddenFiles?: boolean,\n  maxThumbnailFilesize?: number,\n  createImageThumbnails?: boolean,\n\n  chunking?: boolean,\n  chunkSize?: number,\n  retryChunks?: boolean,\n  forceChunking?: boolean,\n  retryChunksLimit?: number,\n  parallelChunkUploads?: boolean,\n\n  dictFileSizeUnits?: any,\n\n  dictDefaultMessage?: string,\n  dictFallbackMessage?: string,\n\n  dictFileTooBig?: string,\n  dictResponseError?: string,\n  dictInvalidFileType?: string,\n\n  dictRemoveFile?: string,\n  dictCancelUpload?: string,\n  dictUploadCanceled?: string,\n  dictFallbackText?: string,\n  dictMaxFilesExceeded?: string,\n  dictRemoveFileConfirmation?: string,\n  dictCancelUploadConfirmation?: string\n}\n\nexport class DropzoneConfig implements DropzoneConfigInterface {\n  timeout?: number;\n\n  autoReset?: number;\n  errorReset?: number;\n  cancelReset?: number;\n\n  url?: string | DropzoneUrlFunction;\n  method?: string | DropzoneMethodFunction;\n\n  params?: any | DropzoneParamsFunction;\n  headers?: any | DropzoneHeadersFunction;\n\n  init?: DropzoneInitFunction;\n  accept?: DropzoneAcceptFunction;\n  resize?: DropzoneResizeFunction;\n  fallback?: DropzoneFallbackFunction;\n  renameFile?: DropzoneRenameFileFunction;\n  transformFile?: DropzoneTransformFileFunction;\n  chunksUploaded?: DropzoneChunksUploadedFunction;\n\n  withCredentials?: boolean;\n\n  previewsContainer?: any;\n  hiddenInputContainer?: any;\n\n  clickable?: string | string[] | boolean;\n  paramName?: any;\n  capture?: string;\n  maxFiles?: number;\n  maxFilesize?: number;\n  filesizeBase?: number;\n  acceptedFiles?: string;\n  forceFallback?: boolean;\n  addRemoveLinks?: boolean;\n  uploadMultiple?: boolean;\n  parallelUploads?: number;\n  resizeWidth?: number;\n  resizeHeight?: number;\n  resizeMethod?: 'contain' | 'crop';\n  resizeQuality?: number;\n  resizeMimeType?: string;\n  thumbnailWidth?: number;\n  thumbnailHeight?: number;\n  thumbnailMethod?: 'contain' | 'crop';\n  previewTemplate?: string;\n  autoQueue?: boolean;\n  autoProcessQueue?: boolean;\n  ignoreHiddenFiles?: boolean;\n  maxThumbnailFilesize?: number;\n  createImageThumbnails?: boolean;\n\n  chunking?: boolean;\n  chunkSize?: number;\n  retryChunks?: boolean;\n  forceChunking?: boolean;\n  retryChunksLimit?: number;\n  parallelChunkUploads?: boolean;\n\n  dictFileSizeUnits?: any;\n\n  dictDefaultMessage?: string;\n  dictFallbackMessage?: string;\n\n  dictFileTooBig?: string;\n  dictResponseError?: string;\n  dictInvalidFileType?: string;\n\n  dictRemoveFile?: string;\n  dictCancelUpload?: string;\n  dictUploadCanceled?: string;\n  dictFallbackText?: string;\n  dictMaxFilesExceeded?: string;\n  dictRemoveFileConfirmation?: string;\n  dictCancelUploadConfirmation?: string;\n\n  constructor(config: DropzoneConfigInterface = {}) {\n    this.assign(config);\n  }\n\n  assign(config: DropzoneConfigInterface | any = {}, target?: any) {\n    target = target || this;\n\n    for (const key in config) {\n      if (config[key] != null && !(Array.isArray(config[key])) &&\n        typeof config[key] === 'object' && !(config[key] instanceof HTMLElement))\n      {\n        target[key] = {};\n\n        this.assign(config[key], target[key]);\n      } else {\n        target[key] = config[key];\n      }\n    }\n  }\n}\n\nexport type DropzoneUrlFunction = (files: any) => string;\nexport type DropzoneMethodFunction = (files: any) => string;\n\nexport type DropzoneParamsFunction = (files: any, xhr: any, chunk?: any) => any;\nexport type DropzoneHeadersFunction = () => any;\n\nexport type DropzoneInitFunction = () => any;\nexport type DropzoneFallbackFunction = () => HTMLElement;\n\nexport type DropzoneAcceptFunction = (file: File, done: Function) => any;\nexport type DropzoneResizeFunction = (file: File, width: number, height: number, resizeMethod: string) => any;\n\nexport type DropzoneRenameFileFunction = (file: File) => string;\nexport type DropzoneTransformFileFunction = (file: File, done: Function) => any;\nexport type DropzoneChunksUploadedFunction = (file: File, done: Function) => any;\n","import Dropzone from 'dropzone';\n\nimport { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { NgZone, Inject, Optional, ElementRef, Renderer2, Directive,\n  OnInit, OnDestroy, DoCheck, OnChanges, Input, Output, EventEmitter,\n  SimpleChanges, KeyValueDiffer, KeyValueDiffers } from '@angular/core';\n\nimport { DROPZONE_CONFIG, DropzoneConfig, DropzoneConfigInterface,\n  DropzoneEvent, DropzoneEvents } from './dropzone.interfaces';\n\n@Directive({\n  selector: '[dropzone]',\n  exportAs: 'ngxDropzone'\n})\nexport class DropzoneDirective implements OnInit, OnDestroy, DoCheck, OnChanges {\n  private instance: any;\n\n  private configDiff: KeyValueDiffer<string, any> | null = null;\n\n  @Input() disabled: boolean = false;\n\n  @Input('dropzone') config?: DropzoneConfigInterface;\n\n  @Output('init'                  ) DZ_INIT                     = new EventEmitter<any>();\n\n  @Output('error'                 ) DZ_ERROR                    = new EventEmitter<any>();\n  @Output('success'               ) DZ_SUCCESS                  = new EventEmitter<any>();\n  @Output('sending'               ) DZ_SENDING                  = new EventEmitter<any>();\n  @Output('canceled'              ) DZ_CANCELED                 = new EventEmitter<any>();\n  @Output('complete'              ) DZ_COMPLETE                 = new EventEmitter<any>();\n  @Output('processing'            ) DZ_PROCESSING               = new EventEmitter<any>();\n\n  @Output('drop'                  ) DZ_DROP                     = new EventEmitter<any>();\n  @Output('dragStart'             ) DZ_DRAGSTART                = new EventEmitter<any>();\n  @Output('dragEnd'               ) DZ_DRAGEND                  = new EventEmitter<any>();\n  @Output('dragEnter'             ) DZ_DRAGENTER                = new EventEmitter<any>();\n  @Output('dragOver'              ) DZ_DRAGOVER                 = new EventEmitter<any>();\n  @Output('dragLeave'             ) DZ_DRAGLEAVE                = new EventEmitter<any>();\n\n  @Output('thumbnail'             ) DZ_THUMBNAIL                = new EventEmitter<any>();\n  @Output('addedFile'             ) DZ_ADDEDFILE                = new EventEmitter<any>();\n  @Output('addedFiles'            ) DZ_ADDEDFILES               = new EventEmitter<any>();\n  @Output('removedFile'           ) DZ_REMOVEDFILE              = new EventEmitter<any>();\n  @Output('uploadProgress'        ) DZ_UPLOADPROGRESS           = new EventEmitter<any>();\n  @Output('maxFilesReached'       ) DZ_MAXFILESREACHED          = new EventEmitter<any>();\n  @Output('maxFilesExceeded'      ) DZ_MAXFILESEXCEEDED         = new EventEmitter<any>();\n\n  @Output('errorMultiple'         ) DZ_ERRORMULTIPLE            = new EventEmitter<any>();\n  @Output('successMultiple'       ) DZ_SUCCESSMULTIPLE          = new EventEmitter<any>();\n  @Output('sendingMultiple'       ) DZ_SENDINGMULTIPLE          = new EventEmitter<any>();\n  @Output('canceledMultiple'      ) DZ_CANCELEDMULTIPLE         = new EventEmitter<any>();\n  @Output('completeMultiple'      ) DZ_COMPLETEMULTIPLE         = new EventEmitter<any>();\n  @Output('processingMultiple'    ) DZ_PROCESSINGMULTIPLE       = new EventEmitter<any>();\n\n  @Output('reset'                 ) DZ_RESET                    = new EventEmitter<any>();\n  @Output('queueComplete'         ) DZ_QUEUECOMPLETE            = new EventEmitter<any>();\n  @Output('totalUploadProgress'   ) DZ_TOTALUPLOADPROGRESS      = new EventEmitter<any>();\n\n  constructor(private zone: NgZone, private renderer: Renderer2, private elementRef: ElementRef,\n    private differs: KeyValueDiffers, @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() @Inject(DROPZONE_CONFIG) private defaults: DropzoneConfigInterface)\n  {\n    const dz = Dropzone;\n\n    dz.autoDiscover = false;\n  }\n\n  ngOnInit(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const params = new DropzoneConfig(this.defaults);\n\n    params.assign(this.config); // Custom configuration\n\n    this.renderer.addClass(this.elementRef.nativeElement,\n      (params.maxFiles === 1) ? 'dz-single' : 'dz-multiple');\n\n    this.renderer.removeClass(this.elementRef.nativeElement,\n      (params.maxFiles === 1) ? 'dz-multiple' : 'dz-single');\n\n    this.zone.runOutsideAngular(() => {\n      this.instance = new Dropzone(this.elementRef.nativeElement, params);\n    });\n\n    if (this.disabled) {\n      this.instance.disable();\n    }\n\n    if (this.DZ_INIT.observers.length) {\n      this.zone.run(() => {\n        this.DZ_INIT.emit(this.instance);\n      });\n    }\n\n    // Add auto reset handling for events\n    this.instance.on('success', () => {\n      if (params.autoReset != null) {\n        setTimeout(() => this.reset(), params.autoReset);\n      }\n    });\n\n    this.instance.on('error', () => {\n      if (params.errorReset != null) {\n        setTimeout(() => this.reset(), params.errorReset);\n      }\n    });\n\n    this.instance.on('canceled', () => {\n      if (params.cancelReset != null) {\n        setTimeout(() => this.reset(), params.cancelReset);\n      }\n    });\n\n    // Add native Dropzone event handling\n    DropzoneEvents.forEach((eventName: DropzoneEvent) => {\n      this.instance.on(eventName.toLowerCase(), (...args: any[]) => {\n        args = (args.length === 1) ? args[0] : args;\n\n        const output = `DZ_${eventName.toUpperCase()}`;\n\n        const emitter = this[output as keyof DropzoneDirective] as EventEmitter<any>;\n\n        if (emitter.observers.length > 0) {\n          this.zone.run(() => {\n            emitter.emit(args);\n          });\n        }\n      });\n    });\n\n    if (!this.configDiff) {\n      this.configDiff = this.differs.find(this.config || {}).create();\n\n      this.configDiff.diff(this.config || {});\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.destroy();\n      });\n\n      this.instance = null;\n    }\n  }\n\n  ngDoCheck(): void {\n    if (!this.disabled && this.configDiff) {\n      const changes = this.configDiff.diff(this.config || {});\n\n      if (changes && this.instance) {\n        this.ngOnDestroy();\n\n        this.ngOnInit();\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.instance && changes['disabled']) {\n      if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n        if (changes['disabled'].currentValue === false) {\n          this.zone.runOutsideAngular(() => {\n            this.instance.enable();\n          });\n        } else if (changes['disabled'].currentValue === true) {\n          this.zone.runOutsideAngular(() => {\n            this.instance.disable();\n          });\n        }\n      }\n    }\n  }\n\n  public dropzone(): any {\n    return this.instance;\n  }\n\n  public reset(cancel?: boolean): void {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.removeAllFiles(cancel);\n      });\n    }\n  }\n}\n","import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Inject, Component,\n  OnInit, Input, Output, EventEmitter,\n  ViewChild, ViewEncapsulation } from '@angular/core';\n\nimport { DropzoneDirective } from './dropzone.directive';\n\nimport { DropzoneEvent, DropzoneEvents, DropzoneConfigInterface } from './dropzone.interfaces';\n\n@Component({\n  selector: 'dropzone',\n  exportAs: 'ngxDropzone',\n  templateUrl: './dropzone.component.html',\n  styleUrls: [\n    './dropzone.component.css',\n    '../../../../node_modules/dropzone/dist/min/dropzone.min.css'\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class DropzoneComponent implements OnInit {\n  @Input() disabled: boolean = false;\n\n  @Input() config?: DropzoneConfigInterface;\n\n  @Input() message: string = 'Click or drag files to upload';\n  @Input() placeholder: string = '';\n\n  @Input() useDropzoneClass: boolean = true;\n\n  @Output('init'                  ) DZ_INIT                     = new EventEmitter<any>();\n\n  @Output('error'                 ) DZ_ERROR                    = new EventEmitter<any>();\n  @Output('success'               ) DZ_SUCCESS                  = new EventEmitter<any>();\n  @Output('sending'               ) DZ_SENDING                  = new EventEmitter<any>();\n  @Output('canceled'              ) DZ_CANCELED                 = new EventEmitter<any>();\n  @Output('complete'              ) DZ_COMPLETE                 = new EventEmitter<any>();\n  @Output('processing'            ) DZ_PROCESSING               = new EventEmitter<any>();\n\n  @Output('drop'                  ) DZ_DROP                     = new EventEmitter<any>();\n  @Output('dragStart'             ) DZ_DRAGSTART                = new EventEmitter<any>();\n  @Output('dragEnd'               ) DZ_DRAGEND                  = new EventEmitter<any>();\n  @Output('dragEnter'             ) DZ_DRAGENTER                = new EventEmitter<any>();\n  @Output('dragOver'              ) DZ_DRAGOVER                 = new EventEmitter<any>();\n  @Output('dragLeave'             ) DZ_DRAGLEAVE                = new EventEmitter<any>();\n\n  @Output('thumbnail'             ) DZ_THUMBNAIL                = new EventEmitter<any>();\n  @Output('addedFile'             ) DZ_ADDEDFILE                = new EventEmitter<any>();\n  @Output('addedFiles'            ) DZ_ADDEDFILES               = new EventEmitter<any>();\n  @Output('removedFile'           ) DZ_REMOVEDFILE              = new EventEmitter<any>();\n  @Output('uploadProgress'        ) DZ_UPLOADPROGRESS           = new EventEmitter<any>();\n  @Output('maxFilesReached'       ) DZ_MAXFILESREACHED          = new EventEmitter<any>();\n  @Output('maxFilesExceeded'      ) DZ_MAXFILESEXCEEDED         = new EventEmitter<any>();\n\n  @Output('errorMultiple'         ) DZ_ERRORMULTIPLE            = new EventEmitter<any>();\n  @Output('successMultiple'       ) DZ_SUCCESSMULTIPLE          = new EventEmitter<any>();\n  @Output('sendingMultiple'       ) DZ_SENDINGMULTIPLE          = new EventEmitter<any>();\n  @Output('canceledMultiple'      ) DZ_CANCELEDMULTIPLE         = new EventEmitter<any>();\n  @Output('completeMultiple'      ) DZ_COMPLETEMULTIPLE         = new EventEmitter<any>();\n  @Output('processingMultiple'    ) DZ_PROCESSINGMULTIPLE       = new EventEmitter<any>();\n\n  @Output('reset'                 ) DZ_RESET                    = new EventEmitter<any>();\n  @Output('queueComplete'         ) DZ_QUEUECOMPLETE            = new EventEmitter<any>();\n  @Output('totalUploadProgress'   ) DZ_TOTALUPLOADPROGRESS      = new EventEmitter<any>();\n\n  @ViewChild(DropzoneDirective, { static: true }) directiveRef?: DropzoneDirective;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  ngOnInit(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    window.setTimeout(() => {\n      DropzoneEvents.forEach((eventName: DropzoneEvent) => {\n        if (this.directiveRef) {\n          const output = `DZ_${eventName.toUpperCase()}`;\n\n          const directiveOutput = output as keyof DropzoneDirective;\n          const componentOutput = output as keyof DropzoneComponent;\n\n          this.directiveRef[directiveOutput] = this[componentOutput] as any;\n        }\n      });\n    }, 0);\n  }\n\n  public getPlaceholder(): string {\n    return 'url(' + encodeURI(this.placeholder) + ')';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DropzoneComponent } from './dropzone.component';\nimport { DropzoneDirective } from './dropzone.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [DropzoneComponent, DropzoneDirective],\n  exports: [CommonModule, DropzoneComponent, DropzoneDirective]\n})\nexport class DropzoneModule {\n}\n"]}