import Dropzone from 'dropzone';
import { PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { NgZone, Inject, Optional, ElementRef, Renderer2, Directive, Input, Output, EventEmitter, KeyValueDiffers } from '@angular/core';
import { DROPZONE_CONFIG, DropzoneConfig, DropzoneEvents } from './dropzone.interfaces';
export class DropzoneDirective {
    constructor(zone, renderer, elementRef, differs, platformId, defaults) {
        this.zone = zone;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.differs = differs;
        this.platformId = platformId;
        this.defaults = defaults;
        this.configDiff = null;
        this.disabled = false;
        this.DZ_INIT = new EventEmitter();
        this.DZ_ERROR = new EventEmitter();
        this.DZ_SUCCESS = new EventEmitter();
        this.DZ_SENDING = new EventEmitter();
        this.DZ_CANCELED = new EventEmitter();
        this.DZ_COMPLETE = new EventEmitter();
        this.DZ_PROCESSING = new EventEmitter();
        this.DZ_DROP = new EventEmitter();
        this.DZ_DRAGSTART = new EventEmitter();
        this.DZ_DRAGEND = new EventEmitter();
        this.DZ_DRAGENTER = new EventEmitter();
        this.DZ_DRAGOVER = new EventEmitter();
        this.DZ_DRAGLEAVE = new EventEmitter();
        this.DZ_THUMBNAIL = new EventEmitter();
        this.DZ_ADDEDFILE = new EventEmitter();
        this.DZ_ADDEDFILES = new EventEmitter();
        this.DZ_REMOVEDFILE = new EventEmitter();
        this.DZ_UPLOADPROGRESS = new EventEmitter();
        this.DZ_MAXFILESREACHED = new EventEmitter();
        this.DZ_MAXFILESEXCEEDED = new EventEmitter();
        this.DZ_ERRORMULTIPLE = new EventEmitter();
        this.DZ_SUCCESSMULTIPLE = new EventEmitter();
        this.DZ_SENDINGMULTIPLE = new EventEmitter();
        this.DZ_CANCELEDMULTIPLE = new EventEmitter();
        this.DZ_COMPLETEMULTIPLE = new EventEmitter();
        this.DZ_PROCESSINGMULTIPLE = new EventEmitter();
        this.DZ_RESET = new EventEmitter();
        this.DZ_QUEUECOMPLETE = new EventEmitter();
        this.DZ_TOTALUPLOADPROGRESS = new EventEmitter();
        const dz = Dropzone;
        dz.autoDiscover = false;
    }
    ngOnInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        const params = new DropzoneConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        this.renderer.addClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-single' : 'dz-multiple');
        this.renderer.removeClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-multiple' : 'dz-single');
        this.zone.runOutsideAngular(() => {
            this.instance = new Dropzone(this.elementRef.nativeElement, params);
        });
        if (this.disabled) {
            this.instance.disable();
        }
        if (this.DZ_INIT.observers.length) {
            this.zone.run(() => {
                this.DZ_INIT.emit(this.instance);
            });
        }
        // Add auto reset handling for events
        this.instance.on('success', () => {
            if (params.autoReset != null) {
                setTimeout(() => this.reset(), params.autoReset);
            }
        });
        this.instance.on('error', () => {
            if (params.errorReset != null) {
                setTimeout(() => this.reset(), params.errorReset);
            }
        });
        this.instance.on('canceled', () => {
            if (params.cancelReset != null) {
                setTimeout(() => this.reset(), params.cancelReset);
            }
        });
        // Add native Dropzone event handling
        DropzoneEvents.forEach((eventName) => {
            this.instance.on(eventName.toLowerCase(), (...args) => {
                args = (args.length === 1) ? args[0] : args;
                const output = `DZ_${eventName.toUpperCase()}`;
                const emitter = this[output];
                if (emitter.observers.length > 0) {
                    this.zone.run(() => {
                        emitter.emit(args);
                    });
                }
            });
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.destroy();
            });
            this.instance = null;
        }
    }
    ngDoCheck() {
        if (!this.disabled && this.configDiff) {
            const changes = this.configDiff.diff(this.config || {});
            if (changes && this.instance) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    }
    ngOnChanges(changes) {
        if (this.instance && changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                if (changes['disabled'].currentValue === false) {
                    this.zone.runOutsideAngular(() => {
                        this.instance.enable();
                    });
                }
                else if (changes['disabled'].currentValue === true) {
                    this.zone.runOutsideAngular(() => {
                        this.instance.disable();
                    });
                }
            }
        }
    }
    dropzone() {
        return this.instance;
    }
    reset(cancel) {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.removeAllFiles(cancel);
            });
        }
    }
}
DropzoneDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dropzone]',
                exportAs: 'ngxDropzone'
            },] }
];
DropzoneDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Renderer2 },
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DROPZONE_CONFIG,] }] }
];
DropzoneDirective.propDecorators = {
    disabled: [{ type: Input }],
    config: [{ type: Input, args: ['dropzone',] }],
    DZ_INIT: [{ type: Output, args: ['init',] }],
    DZ_ERROR: [{ type: Output, args: ['error',] }],
    DZ_SUCCESS: [{ type: Output, args: ['success',] }],
    DZ_SENDING: [{ type: Output, args: ['sending',] }],
    DZ_CANCELED: [{ type: Output, args: ['canceled',] }],
    DZ_COMPLETE: [{ type: Output, args: ['complete',] }],
    DZ_PROCESSING: [{ type: Output, args: ['processing',] }],
    DZ_DROP: [{ type: Output, args: ['drop',] }],
    DZ_DRAGSTART: [{ type: Output, args: ['dragStart',] }],
    DZ_DRAGEND: [{ type: Output, args: ['dragEnd',] }],
    DZ_DRAGENTER: [{ type: Output, args: ['dragEnter',] }],
    DZ_DRAGOVER: [{ type: Output, args: ['dragOver',] }],
    DZ_DRAGLEAVE: [{ type: Output, args: ['dragLeave',] }],
    DZ_THUMBNAIL: [{ type: Output, args: ['thumbnail',] }],
    DZ_ADDEDFILE: [{ type: Output, args: ['addedFile',] }],
    DZ_ADDEDFILES: [{ type: Output, args: ['addedFiles',] }],
    DZ_REMOVEDFILE: [{ type: Output, args: ['removedFile',] }],
    DZ_UPLOADPROGRESS: [{ type: Output, args: ['uploadProgress',] }],
    DZ_MAXFILESREACHED: [{ type: Output, args: ['maxFilesReached',] }],
    DZ_MAXFILESEXCEEDED: [{ type: Output, args: ['maxFilesExceeded',] }],
    DZ_ERRORMULTIPLE: [{ type: Output, args: ['errorMultiple',] }],
    DZ_SUCCESSMULTIPLE: [{ type: Output, args: ['successMultiple',] }],
    DZ_SENDINGMULTIPLE: [{ type: Output, args: ['sendingMultiple',] }],
    DZ_CANCELEDMULTIPLE: [{ type: Output, args: ['canceledMultiple',] }],
    DZ_COMPLETEMULTIPLE: [{ type: Output, args: ['completeMultiple',] }],
    DZ_PROCESSINGMULTIPLE: [{ type: Output, args: ['processingMultiple',] }],
    DZ_RESET: [{ type: Output, args: ['reset',] }],
    DZ_QUEUECOMPLETE: [{ type: Output, args: ['queueComplete',] }],
    DZ_TOTALUPLOADPROGRESS: [{ type: Output, args: ['totalUploadProgress',] }]
};
//# sourceMappingURL=data:application/json;base64,