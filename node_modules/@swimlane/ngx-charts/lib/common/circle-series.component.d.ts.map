{"version":3,"file":"circle-series.component.d.ts","sources":["circle-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { EventEmitter, OnChanges, OnInit, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { Gradient, ScaleType } from './types';\nimport { DataItem, Series, StringOrNumberOrDate } from '../models/chart-data.model';\ndeclare enum SeriesType {\n    Standard = \"standard\",\n    Stacked = \"stacked\"\n}\nexport interface Circle {\n    classNames: string[];\n    value: string | number;\n    label: string;\n    data: DataItem;\n    cx: number;\n    cy: number;\n    radius: number;\n    height: number;\n    tooltipLabel: string;\n    color: string;\n    opacity: number;\n    seriesName: string;\n    gradientStops: Gradient[];\n    min: number;\n    max: number;\n}\nexport declare class CircleSeriesComponent implements OnChanges, OnInit {\n    data: Series;\n    type: SeriesType;\n    xScale: any;\n    yScale: any;\n    colors: ColorHelper;\n    scaleType: ScaleType;\n    visibleValue: boolean;\n    activeEntries: any[];\n    tooltipDisabled: boolean;\n    tooltipTemplate: TemplateRef<any>;\n    select: EventEmitter<DataItem>;\n    activate: EventEmitter<{\n        name: StringOrNumberOrDate;\n    }>;\n    deactivate: EventEmitter<{\n        name: StringOrNumberOrDate;\n    }>;\n    areaPath: any;\n    circle: Circle;\n    barVisible: boolean;\n    gradientId: string;\n    gradientFill: string;\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    update(): void;\n    getActiveCircle(): Circle;\n    mapDataPointToCircle(d: any, i: number): Circle;\n    getTooltipText({ tooltipLabel, value, seriesName, min, max }: {\n        tooltipLabel: string;\n        value: any;\n        seriesName: string;\n        min: number;\n        max: number;\n    }): string;\n    getTooltipMinMaxText(min: number, max: number): string;\n    getGradientStops(color: string): Gradient[];\n    onClick(data: DataItem): void;\n    isActive(entry: any): boolean;\n    activateCircle(): void;\n    deactivateCircle(): void;\n}\nexport {};\n"]}