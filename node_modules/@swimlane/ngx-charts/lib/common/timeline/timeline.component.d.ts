import { EventEmitter, ElementRef, OnChanges, ChangeDetectorRef, SimpleChanges } from '@angular/core';
import { ViewDimensions } from '../types';
import * as ɵngcc0 from '@angular/core';
export declare enum TimelineScaleType {
    Time = "time",
    Linear = "linear",
    Ordinal = "ordinal"
}
export declare class Timeline implements OnChanges {
    private cd;
    view: [number, number];
    results: any;
    scheme: any;
    customColors: any;
    legend: boolean;
    autoScale: boolean;
    scaleType: TimelineScaleType;
    height: number;
    select: EventEmitter<any>;
    onDomainChange: EventEmitter<any>;
    element: HTMLElement;
    dims: ViewDimensions;
    xDomain: any[];
    xScale: any;
    brush: any;
    transform: string;
    initialized: boolean;
    filterId: string;
    filter: string;
    constructor(element: ElementRef, cd: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    update(): void;
    getXDomain(): any[];
    getXScale(): any;
    addBrush(): void;
    updateBrush(): void;
    getDims(): ViewDimensions;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Timeline, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<Timeline, "g[ngx-charts-timeline]", never, { "height": "height"; "view": "view"; "results": "results"; "scheme": "scheme"; "customColors": "customColors"; "legend": "legend"; "autoScale": "autoScale"; "scaleType": "scaleType"; }, { "select": "select"; "onDomainChange": "onDomainChange"; }, never, ["*"]>;
}

//# sourceMappingURL=timeline.component.d.ts.map