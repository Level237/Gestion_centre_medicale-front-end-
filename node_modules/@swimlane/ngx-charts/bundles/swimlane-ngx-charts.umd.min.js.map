{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../esm2015/projects/swimlane/ngx-charts/src/lib/common/tooltip/position/placement.type.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection.service.ts","../../projects/swimlane/ngx-charts/src/lib/utils/throttle.ts","../esm2015/projects/swimlane/ngx-charts/src/lib/common/tooltip/position/position.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.component.ts","../projects/swimlane/ngx-charts/src/lib/common/types/legend.model.ts","../projects/swimlane/ngx-charts/src/lib/common/types/text-anchor.enum.ts","../projects/swimlane/ngx-charts/src/lib/common/types/scale-type.enum.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection-registery.service.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.service.ts","../projects/swimlane/ngx-charts/src/lib/common/types/orientation.enum.ts","../projects/swimlane/ngx-charts/src/lib/common/charts/chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/visibility-observer.ts","../../projects/swimlane/ngx-charts/src/lib/utils/types.ts","../../projects/swimlane/ngx-charts/src/lib/common/base-chart.component.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/axis-label.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/trim-label.helper.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/ticks.helper.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis-ticks.component.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/shape.helper.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis-ticks.component.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis.component.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/style.type.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/show.type.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/axes.module.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.directive.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.module.ts","../../projects/swimlane/ngx-charts/src/lib/common/label.helper.ts","../../projects/swimlane/ngx-charts/src/lib/utils/id.ts","../../projects/swimlane/ngx-charts/src/lib/common/circle-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/circle.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/grid-panel-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/grid-panel.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/svg-linear-gradient.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/svg-radial-gradient.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/area.component.ts","../projects/swimlane/ngx-charts/src/lib/common/count/count.helper.ts","../../../projects/swimlane/ngx-charts/src/lib/events.ts","../projects/swimlane/ngx-charts/src/lib/common/count/count.directive.ts","../projects/swimlane/ngx-charts/src/lib/common/timeline/timeline.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/tooltip-area.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/legend.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/legend-entry.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/scale-legend.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/advanced-legend.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/chart-common.module.ts","../../projects/swimlane/ngx-charts/src/lib/common/view-dimensions.helper.ts","../../projects/swimlane/ngx-charts/src/lib/utils/color-sets.ts","../../projects/swimlane/ngx-charts/src/lib/common/color.helper.ts","../../projects/swimlane/ngx-charts/src/lib/common/domain.helper.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-normalized.component.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-stacked.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/sort.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar.component.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-2d.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-normalized.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-stacked.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-2d.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-normalized.component.ts","../projects/swimlane/ngx-charts/src/lib/bar-chart/types/bar-chart-type.enum.ts","../projects/swimlane/ngx-charts/src/lib/bar-chart/types/d0-type.enum.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-stacked.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-horizontal.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-vertical.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-label.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.utils.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell.component.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.component.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.module.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line.component.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/advanced-pie-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-label.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-arc.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/grid-layout.helper.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/utils/calculate-width.ts","../projects/swimlane/ngx-charts/src/lib/common/constants/font-widths.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/card.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/color-utils.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/card-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.component.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.module.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell.component.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/linear-gauge.component.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.module.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-arc.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-axis.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.module.ts","../../../projects/swimlane/ngx-charts/src/lib/ngx-charts.module.ts","../../../projects/swimlane/ngx-charts/src/lib/polyfills.ts","../../projects/swimlane/ngx-charts/src/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","PlacementTypes","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","component","element","nativeElement","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","componentRef","attach","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","target","key","descriptor","configurable","enumerable","get","defineProperty","Injectable","ApplicationRef","ComponentFactoryResolver","Injector","verticalPosition","elDimensions","popoverDimensions","alignment","Top","top","Bottom","height","Center","horizontalPosition","Left","left","Right","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","positionContent","determinePlacement","TooltipContentComponent","renderer","platformId","clz","type","cssClass","ngAfterViewInit","position","bind","_this","isPlatformBrowser","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","Component","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Inject","PLATFORM_ID","Input","ViewChild","HostBinding","HostListener","decorators","desc","c","getOwnPropertyDescriptor","Reflect","decorate","__decorate","LegendPosition","LegendType","TextAnchor","ScaleType","InjectionRegisteryService","injectionService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","assign","has","set","TooltipService","_super","Orientation","ChartComponent","showLegend","animations","legendLabelClick","EventEmitter","legendLabelActivate","legendLabelDeactivate","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","ScaleLegend","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","Linear","Legend","providers","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","Output","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","runOutsideAngular","isDate","toString","isNumber","Directive","NgZone","BaseChartComponent","chartElement","cd","scheme","schemeType","Ordinal","select","ngOnInit","isPlatformServer","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","markForCheck","hostElem","parentNode","formatDates","g","label","name","toLocaleDateString","series","j","resizeSubscription","subscription","observableFromEvent","pipe","debounceTime","data","data_1","data_1_1","item","copy","_c","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","ChangeDetectorRef","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","trimLabel","max","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","Middle","maxTicksLength","maxAllowedLength","approxHeight","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","toLocaleString","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","End","tick","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","abs","sin","getMaxTicks","maxScaleTicks","tickValues","domain","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","w","h","_b","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","getApproximateAxisWidth","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","Start","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","t","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","StyleTypes","ShowTypes","NgModule","imports","CommonModule","declarations","exports","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","focus","mouseover","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","navigator","userAgent","match","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","formatLabel","escapeLabel","replace","&","'","`","\"","<",">","entryComponents","SeriesType","cache","id","newId","random","pow","CircleSeriesComponent","Standard","activate","deactivate","barVisible","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","findIndex","visibleValue","mapDataPointToCircle","cx","seriesName","tooltipLabel","Time","xScale","Number","color","cy","yScale","d1","range","colors","getColor","classNames","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","onClick","isActive","entry","activeEntries","find","activateCircle","deactivateCircle","CircleComponent","isArray","join","GridOrientation","ClassEnum","GridPanelSeriesComponent","gridPanels","getGridPanels","className","Odd","Vertical","step","Even","paddingInner","Horizontal","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","gradient","initialized","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","runCount","timestamp","frameVal","progress","round","finished","requestAnimationFrame","val","decimalChecker","root","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","global","MouseEvent","createMouseEvent","bubbles","cancelable","document","createEvent","initEvent","TimelineScaleType","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","_e","_f","includes","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","selection","invert","LegendComponent","horizontal","labelClick","labelActivate","labelDeactivate","legendEntries","getLegendEntries","items","formattedLabel","this_1","trackBy","index","LegendEntryComponent","toggle","ScaleLegendComponent","gradientValues","gradientString","direction","splits","pairs","reverse","forEach","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","GridPanelComponent","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","AxesModule","TooltipModule","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","Quantile","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","AreaChartComponent","legend","legendTitle","xAxis","yAxis","baseValue","autoScale","timeline","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","showXAxisLabel","showYAxisLabel","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","sort","a","aDate","getTime","bDate","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","BarOrientation","ChartCommonModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valueDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","BarChartType","D0Types","BarVerticalStackedComponent","SeriesHorizontal","dataLabelWidthChanged","barsForDataLabels","updateTooltipSettings","d0Type","Normalized","bars","getLabel","bar","Stacked","offset1","offset0","ariaLabel","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","click","SeriesVerticalComponent","dataLabelHeightChanged","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","circles","getCircles","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","hasRange","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","setTransforms","styleTransform","textX","textY","attrTransform","textTransition","isIE","test","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","calculateTextWidth","fontFamilyKey","text","defaultWidth","acc","curr","PieChartModule","LineChartModule","VERDANA_FONT_WIDTHS_16_PX","0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","M","O","P","Q","R","S","T","U","V","W","X","Y","Z","k","l","q","u","z","!","@","#","$","%","^","*","(",")","_","-","+","=",",",".","/",":","|","?",";","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","scaleTextSSR","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","invertColor","d3_color.rgb","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","TreeMapComponent","treemap","stratify","parentId","isRoot","ElementType","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","Value","Units","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","units","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","getTickPath","smallAngle","lineGenerator","BarChartModule","SVGElement","HTMLDivElement","AreaChartModule","BubbleChartModule","HeatMapModule","PolarChartModule","NumberCardModule","TreeMapModule","GaugeModule","fieldType","groupByType","timeFormat","formatter"],"mappings":"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,MAAO3b,EAAAA,GAAU+C,OACjB6I,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEvF,KAAM,QACNoc,YAAY,EACZ9G,MAAO3b,EAAAA,GAAUiF,QACjB2G,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEvF,KAAM,QACNoc,YAAY,EACZ9G,MAAO3b,EAAAA,GAAUiF,QACjB2G,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEvF,KAAM,SACNoc,YAAY,EACZ9G,MAAO3b,EAAAA,GAAUiF,QACjB2G,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEvF,KAAM,UACNoc,YAAY,EACZ9G,MAAO3b,EAAAA,GAAUiF,QACjB2G,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEvF,KAAM,QACNoc,YAAY,EACZ9G,MAAO3b,EAAAA,GAAUiF,QACjB2G,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEvF,KAAM,SACNoc,YAAY,EACZ9G,MAAO3b,EAAAA,GAAUiF,QACjB2G,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEvF,KAAM,QACNoc,YAAY,EACZ9G,MAAO3b,EAAAA,GAAUiF,QACjB2G,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEvF,KAAM,cACNoc,YAAY,EACZ9G,MAAO3b,EAAAA,GAAUiF,QACjB2G,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,2BCvPJ,SAAA8W,EAAY3d,EAAaxH,EAAiBqO,EAA6B+W,GAC/C,iBAAX5d,IACTA,EAASyd,GAAUzM,MAAK,SAAA6M,GACtB,OAAOA,EAAGvc,OAASt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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum PlacementTypes {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n  Center = 'center'\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  EmbeddedViewRef,\n  Type\n} from '@angular/core';\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\n\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\n  return x.element;\n}\n\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n@Injectable()\nexport class InjectionService {\n  static globalRootViewContainer: ViewContainerRef = null;\n\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\n    InjectionService.globalRootViewContainer = container;\n  }\n\n  private _container: ViewContainerRef;\n\n  constructor(\n    private applicationRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {}\n\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n\n    throw new Error(\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\n    );\n  }\n\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n  setRootViewContainer(container: ViewContainerRef): void {\n    this._container = container;\n  }\n\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n\n    // the top most component root node has no `hostView`\n    return component.location.nativeElement;\n  }\n\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    return this.getComponentRootNode(component);\n  }\n\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n\n    const portalHost = new DomPortalHost(\n      appendLocation,\n      this.componentFactoryResolver,\n      this.applicationRef,\n      this.injector\n    );\n\n    const portal = new ComponentPortal(componentClass);\n\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n}\n","/**\n * Throttle a function\n *\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","import { PlacementTypes } from './placement.type';\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions: DOMRect, popoverDimensions: DOMRect, alignment: PlacementTypes): number {\n  if (alignment === PlacementTypes.Top) {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Bottom) {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions: DOMRect, popoverDimensions: DOMRect, alignment: PlacementTypes): number {\n  if (alignment === PlacementTypes.Left) {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Right) {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nexport class PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    alignment: PlacementTypes\n  ): number {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalCaret(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    caretDimensions: DOMRect,\n    alignment: PlacementTypes\n  ): number {\n    let result;\n\n    if (alignment === PlacementTypes.Top) {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Bottom) {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalAlignment(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    alignment: PlacementTypes\n  ): number {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalCaret(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    caretDimensions: DOMRect,\n    alignment: PlacementTypes\n  ): number {\n    let result;\n\n    if (alignment === PlacementTypes.Left) {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Right) {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n  static shouldFlip(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    placement: PlacementTypes,\n    spacing: number\n  ): boolean {\n    let flip = false;\n\n    if (placement === PlacementTypes.Right) {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Left) {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Top) {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Bottom) {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment: PlacementTypes): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n  static determinePlacement(placement: PlacementTypes, elmDim: DOMRect, hostDim: DOMRect, spacing: number): any {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.Right) {\n        return PlacementTypes.Left;\n      } else if (placement === PlacementTypes.Left) {\n        return PlacementTypes.Right;\n      } else if (placement === PlacementTypes.Top) {\n        return PlacementTypes.Bottom;\n      } else if (placement === PlacementTypes.Bottom) {\n        return PlacementTypes.Top;\n      }\n    }\n\n    return placement;\n  }\n}\n","import {\n  Input,\n  Component,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  HostBinding,\n  Renderer2,\n  PLATFORM_ID,\n  Inject,\n  TemplateRef\n} from '@angular/core';\n\nimport { throttleable } from '../../utils/throttle';\nimport { PositionHelper, PlacementTypes } from './position';\n\nimport { StyleTypes } from './style.type';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'ngx-tooltip-content',\n  template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipContentComponent implements AfterViewInit {\n  @Input() host: ElementRef;\n  @Input() showCaret: boolean;\n  @Input() type: StyleTypes;\n  @Input() placement: PlacementTypes;\n  @Input() alignment: PlacementTypes;\n  @Input() spacing: number;\n  @Input() cssClass: string;\n  @Input() title: string;\n  @Input() template: TemplateRef<any>;\n  @Input() context: any;\n\n  @ViewChild('caretElm') caretElm: ElementRef;\n\n  @HostBinding('class')\n  get cssClasses(): string {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  constructor(public element: ElementRef, private renderer: Renderer2, @Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(this.position.bind(this));\n  }\n\n  position(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\n\n    // if no dims were found, never show\n    if (!hostDim.height && !hostDim.width) return;\n\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    }\n\n    // animate its entry\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm: HTMLElement, hostDim: DOMRect, elmDim: DOMRect): void {\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim: DOMRect, elmDim: DOMRect): void {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const { top, left } = PositionHelper.positionCaret(\n      this.placement,\n      elmDim,\n      hostDim,\n      caretDimensions,\n      this.alignment\n    );\n\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim: DOMRect, elmDim: DOMRect): void {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  @HostListener('window:resize')\n  @throttleable(100)\n  onWindowResize(): void {\n    this.position();\n  }\n}\n","import { ScaleType } from './scale-type.enum';\n\nexport interface LegendOptions {\n  colors: any;\n  domain: any[];\n  position: LegendPosition;\n  title: string;\n  scaleType: ScaleType;\n}\n\nexport enum LegendPosition {\n  Right = 'right',\n  Below = 'below'\n}\n\nexport enum LegendType {\n  ScaleLegend = 'scaleLegend',\n  Legend = 'legend'\n}\n","export enum TextAnchor {\n  Start = 'start',\n  Middle = 'middle',\n  End = 'end'\n}\n","export enum ScaleType {\n  Time = 'time',\n  Linear = 'linear',\n  Ordinal = 'ordinal',\n  Quantile = 'quantile'\n}\n","import { ComponentRef, Type } from '@angular/core';\nimport { InjectionService } from './injection.service';\n\nexport interface PartialBindings {\n  inputs?: object;\n  outputs?: object;\n}\n\nexport abstract class InjectionRegisteryService<T = any> {\n  protected abstract type: Type<T>;\n\n  protected defaults: PartialBindings = {};\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\n\n  constructor(public injectionService: InjectionService) {}\n\n  getByType(type: Type<T> = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings: object): ComponentRef<T> {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    bindings = this.assignDefaults(bindings);\n\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n\n    return component;\n  }\n\n  destroy(instance: ComponentRef<T>): void {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll(): void {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type: Type<T>): void {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\n    const inputs = { ...this.defaults.inputs };\n    const outputs = { ...this.defaults.outputs };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = { inputs: bindings };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs, ...bindings.inputs };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs, ...bindings.outputs };\n    }\n\n    return bindings;\n  }\n\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InjectionService } from './injection.service';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { InjectionRegisteryService } from './injection-registery.service';\n@Injectable()\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\n  type: any = TooltipContentComponent;\n\n  constructor(injectionService: InjectionService) {\n    super(injectionService);\n  }\n}\n","export enum Orientation {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right'\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { TooltipService } from '../tooltip/tooltip.service';\nimport { LegendOptions, LegendType, LegendPosition } from '../types/legend.model';\nimport { ScaleType } from '../types';\n\n@Component({\n  providers: [TooltipService],\n  selector: 'ngx-charts-chart',\n  template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\n    ])\n  ]\n})\nexport class ChartComponent implements OnChanges {\n  @Input() view: [number, number];\n  @Input() showLegend: boolean = false;\n  @Input() legendOptions: LegendOptions;\n  @Input() legendType: LegendType;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() legendLabelClick: EventEmitter<string> = new EventEmitter();\n  @Output() legendLabelActivate: EventEmitter<{ name: string }> = new EventEmitter();\n  @Output() legendLabelDeactivate: EventEmitter<{ name: string }> = new EventEmitter();\n\n  chartWidth: number;\n  title: string;\n  legendWidth: number;\n\n  readonly LegendPosition = LegendPosition;\n  readonly LegendType = LegendType;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let legendColumns = 0;\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n        if (this.legendType === LegendType.ScaleLegend) {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n    this.legendWidth =\n      !this.legendOptions || this.legendOptions.position === LegendPosition.Right\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\n        : this.chartWidth;\n  }\n\n  getLegendType(): LegendType {\n    return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n  }\n}\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\n\n/**\n * Visibility Observer\n */\n@Directive({\n  selector: 'visibility-observer'\n})\nexport class VisibilityObserver {\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n  isVisible: boolean = false;\n\n  constructor(private element: ElementRef, private zone: NgZone) {\n    this.runCheck();\n  }\n\n  destroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      if (!this.element) {\n        return;\n      }\n\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n}\n","export function isDate(value): boolean {\n  return toString.call(value) === '[object Date]';\n}\n\nexport function isNumber(value): boolean {\n  return typeof value === 'number';\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  ElementRef,\n  NgZone,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\n\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { isDate } from '../utils/types';\nimport { ScaleType, ViewDimensions } from '../common/types';\n\n@Component({\n  selector: 'base-chart',\n  template: ` <div></div> `\n})\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() results: any;\n  @Input() view: [number, number];\n  @Input() scheme: any = 'cool';\n  @Input() schemeType: ScaleType = ScaleType.Ordinal;\n  @Input() customColors: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  width: number;\n  height: number;\n  resizeSubscription: any;\n  visibilityObserver: VisibilityObserver;\n\n  constructor(\n    protected chartElement: ElementRef,\n    protected zone: NgZone,\n    protected cd: ChangeDetectorRef,\n    @Inject(PLATFORM_ID) public platformId: any\n  ) {}\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.animations = false;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.bindWindowResizeEvent();\n\n    // listen for visibility ofhe element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims(): ViewDimensions {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return { width, height };\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates(): void {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (isDate(g.label)) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (isDate(d.label)) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  protected unbindEvents(): void {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  private bindWindowResizeEvent(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const source = observableFromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  private cloneData(data): any {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n}\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { Orientation } from '../types/orientation.enum';\n\n@Component({\n  selector: 'g[ngx-charts-axis-label]',\n  template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AxisLabelComponent implements OnChanges {\n  @Input() orient: Orientation;\n  @Input() label: string;\n  @Input() offset: number;\n  @Input() width: number;\n  @Input() height: number;\n\n  x: number;\n  y: number;\n  transform: string;\n  strokeWidth: string;\n  textAnchor: string;\n  element: ElementRef;\n  textHeight = 25;\n  margin = 5;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case Orientation.Bottom:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case Orientation.Left:\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      case Orientation.Right:\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      default:\n    }\n  }\n}\n","export function trimLabel(s: any, max: number = 16): string {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n","export function reduceTicks(ticks: any[], maxTicks: number): any[] {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  SimpleChanges,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { Orientation } from '../types/orientation.enum';\nimport { TextAnchor } from '../types/text-anchor.enum';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient: Orientation;\n  @Input() tickArguments: number[] = [5];\n  @Input() tickValues: string[] | number[];\n  @Input() tickStroke: string = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineHeight: number;\n  @Input() width: number;\n  @Input() rotateTicks: boolean = true;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  verticalSpacing: number = 20;\n  rotateLabels: boolean = false;\n  innerTickSize: number = 6;\n  outerTickSize: number = 6;\n  tickPadding: number = 3;\n  textAnchor: TextAnchor = TextAnchor.Middle;\n  maxTicksLength: number = 0;\n  maxAllowedLength: number = 16;\n  adjustedScale: any;\n  textTransform: string;\n  ticks: any[];\n  tickFormat: (o: any) => any;\n  height: number = 0;\n  approxHeight: number = 10;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.dimensionsChanged.emit({ height: this.approxHeight });\n      return;\n    }\n\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({ height: this.height });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n\n    this.adjustedScale = this.scale.bandwidth\n      ? function (d) {\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\n        }\n      : this.scale;\n\n    this.textTransform = '';\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = TextAnchor.End;\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = TextAnchor.Middle;\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks: any[]): number {\n    let angle = 0;\n    this.maxTicksLength = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 7; // need to measure this\n    const wordWidth = len * charWidth;\n\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\n\n    // calculate optimal angle\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n\n    return angle;\n  }\n\n  getTicks(): any[] {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth: number): number {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick: number): string {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform(): string {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { Orientation } from '../types/orientation.enum';\nimport { ViewDimensions } from '../types/view-dimension.interface';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis]',\n  template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"Orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisComponent implements OnChanges {\n  @Input() xScale;\n  @Input() dims: ViewDimensions;\n  @Input() trimTicks: boolean;\n  @Input() rotateTicks: boolean = true;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() showLabel: boolean;\n  @Input() labelText: string;\n  @Input() ticks: any[];\n  @Input() xAxisTickCount: number;\n  @Input() xOrient: Orientation = Orientation.Bottom;\n  @Input() xAxisOffset: number = 0;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  xAxisClassName: string = 'x axis';\n\n  tickArguments: number[];\n  transform: string;\n  labelOffset: number = 0;\n  fill: string = 'none';\n  stroke: string = 'stroke';\n  tickStroke: string = '#ccc';\n  strokeWidth: string = 'none';\n  padding: number = 5;\n\n  readonly Orientation = Orientation;\n\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({ height }): void {\n    const newLabelOffset = height + 25 + 5;\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ height });\n      }, 0);\n    }\n  }\n}\n","/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nexport function roundedRect(\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  r: number,\n  [tl, tr, bl, br]: boolean[]\n): string {\n  let retval = '';\n\n  w = Math.floor(w);\n  h = Math.floor(h);\n\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n\n  return retval;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  EventEmitter,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  SimpleChanges,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { roundedRect } from '../../common/shape.helper';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Orientation } from '../types/orientation.enum';\nimport { TextAnchor } from '../types/text-anchor.enum';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient: Orientation;\n  @Input() tickArguments: number[] = [5];\n  @Input() tickValues: string[] | number[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines: boolean = false;\n  @Input() gridLineWidth: number;\n  @Input() height: number;\n  @Input() referenceLines;\n  @Input() showRefLabels: boolean = false;\n  @Input() showRefLines: boolean = false;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  innerTickSize: number = 6;\n  tickPadding: number = 3;\n  tickSpacing: number;\n  verticalSpacing: number = 20;\n  textAnchor: TextAnchor = TextAnchor.Middle;\n  dy: string;\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n  adjustedScale: any;\n  transform: (o: any) => string;\n  tickFormat: (o: any) => string;\n  ticks: any[];\n  width: number = 0;\n  outerTickSize: number = 6;\n  rotateLabels: boolean = false;\n  refMax: number;\n  refMin: number;\n  referenceLineLength: number = 0;\n  referenceAreaPath: string;\n\n  readonly Orientation = Orientation;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.width = this.getApproximateAxisWidth();\n      this.dimensionsChanged.emit({ width: this.width });\n      return;\n    }\n\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({ width });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    let scale;\n    const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth\n      ? function (d) {\n          return scale(d) + scale.bandwidth() * 0.5;\n        }\n      : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case Orientation.Bottom:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case Orientation.Left:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = TextAnchor.End;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      case Orientation.Right:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = TextAnchor.Start;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      default:\n    }\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines(): void {\n    this.refMin = this.adjustedScale(\n      Math.min.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.refMax = this.adjustedScale(\n      Math.max.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.referenceLineLength = this.referenceLines.length;\n\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n      false,\n      false,\n      false,\n      false\n    ]);\n  }\n\n  getTicks(): any[] {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight: number): number {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick: number): string {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform(): string {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getApproximateAxisWidth(): number {\n    const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n    const charWidth = 7;\n    return maxChars * charWidth;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { Orientation } from '../types/orientation.enum';\nimport { ViewDimensions } from '../types/view-dimension.interface';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis]',\n  template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisComponent implements OnChanges {\n  @Input() yScale;\n  @Input() dims: ViewDimensions;\n  @Input() trimTicks: boolean;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() ticks: any[];\n  @Input() showGridLines: boolean = false;\n  @Input() showLabel: boolean;\n  @Input() labelText: string;\n  @Input() yAxisTickCount: any;\n  @Input() yOrient: Orientation = Orientation.Left;\n  @Input() referenceLines;\n  @Input() showRefLines: boolean;\n  @Input() showRefLabels: boolean;\n  @Input() yAxisOffset: number = 0;\n  @Output() dimensionsChanged = new EventEmitter();\n\n  yAxisClassName: string = 'y axis';\n  tickArguments: number[];\n  offset: number;\n  transform: string;\n  labelOffset: number = 15;\n  fill: string = 'none';\n  stroke: string = '#CCC';\n  tickStroke: string = '#CCC';\n  strokeWidth: number = 1;\n  padding: number = 5;\n\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.offset = -(this.yAxisOffset + this.padding);\n    if (this.yOrient === Orientation.Right) {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({ width }): void {\n    if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    }\n  }\n}\n","export enum StyleTypes {\n  popover = 'popover' as any,\n  tooltip = 'tooltip' as any\n}\n","export enum ShowTypes {\n  all = 'all' as any,\n  focus = 'focus' as any,\n  mouseover = 'mouseover' as any\n}\n","import { NgModule } from '@angular/core';\nimport { AxisLabelComponent } from './axis-label.component';\nimport { XAxisComponent } from './x-axis.component';\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { YAxisComponent } from './y-axis.component';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n})\nexport class AxesModule {}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  Renderer2,\n  OnDestroy,\n  TemplateRef,\n  ComponentRef\n} from '@angular/core';\n\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nimport { ShowTypes } from './show.type';\n\nimport { TooltipService } from './tooltip.service';\n\n@Directive({ selector: '[ngx-tooltip]' })\nexport class TooltipDirective implements OnDestroy {\n  @Input() tooltipCssClass: string = '';\n  @Input() tooltipTitle: string = '';\n  @Input() tooltipAppendToBody: boolean = true;\n  @Input() tooltipSpacing: number = 10;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipShowCaret: boolean = true;\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.Top;\n  @Input() tooltipAlignment: PlacementTypes = PlacementTypes.Center;\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\n  @Input() tooltipCloseOnClickOutside: boolean = true;\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\n  @Input() tooltipHideTimeout: number = 300;\n  @Input() tooltipShowTimeout: number = 100;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\n  @Input() tooltipContext: any;\n  @Input() tooltipImmediateExit: boolean = false;\n\n  @Output() show: EventEmitter<boolean> = new EventEmitter();\n  @Output() hide: EventEmitter<boolean> = new EventEmitter();\n\n  private get listensForFocus(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  private get listensForHover(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  private component: ComponentRef<any>;\n  private timeout: ReturnType<typeof setTimeout>;\n  private mouseLeaveContentEvent: any;\n  private mouseEnterContentEvent: any;\n  private documentClickEvent: any;\n\n  constructor(\n    private tooltipService: TooltipService,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnDestroy(): void {\n    this.hideTooltip(true);\n  }\n\n  @HostListener('focusin')\n  onFocus(): void {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('mouseleave', ['$event.target'])\n  onMouseLeave(target): void {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  @HostListener('click')\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate?: boolean): void {\n    if (this.component || this.tooltipDisabled) return;\n\n    const time = immediate\n      ? 0\n      : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options);\n\n      // add a tiny timeout to avoid event re-triggers\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip: HTMLElement): void {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    });\n\n    // content mouse leave listener\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    }\n\n    // content close on click outside\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate: boolean = false): void {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent();\n\n      // emit events\n      this.hide.emit(true);\n\n      // destroy component\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  private createBoundOptions(): any {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TooltipDirective } from './tooltip.directive';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\nimport { InjectionService } from './injection.service';\n\n@NgModule({\n  declarations: [TooltipContentComponent, TooltipDirective],\n  providers: [InjectionService, TooltipService],\n  exports: [TooltipContentComponent, TooltipDirective],\n  imports: [CommonModule],\n  entryComponents: [TooltipContentComponent]\n})\nexport class TooltipModule {}\n","/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nexport function formatLabel(label: any): string {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n\n/**\n * Escapes a label.\n *\n * @export\n */\nexport function escapeLabel(label: any): string {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  // append a 'a' because neo gets mad\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nimport { ColorHelper } from '../common/color.helper';\nimport { Gradient, ScaleType } from './types';\nimport { DataItem, Series, StringOrNumberOrDate } from '../models/chart-data.model';\n\nenum SeriesType {\n  Standard = 'standard',\n  Stacked = 'stacked'\n}\n\nexport interface Circle {\n  classNames: string[];\n  value: string | number;\n  label: string;\n  data: DataItem;\n  cx: number;\n  cy: number;\n  radius: number;\n  height: number;\n  tooltipLabel: string;\n  color: string;\n  opacity: number;\n  seriesName: string;\n  gradientStops: Gradient[];\n  min: number;\n  max: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-circle-series]',\n  template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 1 }))\n      ])\n    ])\n  ]\n})\nexport class CircleSeriesComponent implements OnChanges, OnInit {\n  @Input() data: Series;\n  @Input() type: SeriesType = SeriesType.Standard;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType: ScaleType;\n  @Input() visibleValue: boolean;\n  @Input() activeEntries: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate: EventEmitter<{ name: StringOrNumberOrDate }> = new EventEmitter();\n  @Output() deactivate: EventEmitter<{ name: StringOrNumberOrDate }> = new EventEmitter();\n\n  areaPath: any;\n  circle: Circle; // active circle\n  barVisible: boolean = false;\n  gradientId: string;\n  gradientFill: string;\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle(): Circle {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d: any, i: number): Circle {\n    const seriesName = this.data.name as string;\n\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n\n    let cx;\n    if (this.scaleType === ScaleType.Time) {\n      cx = this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n\n    let color;\n    if (this.colors.scaleType === ScaleType.Linear) {\n      if (this.type === SeriesType.Standard) {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({\n    tooltipLabel,\n    value,\n    seriesName,\n    min,\n    max\n  }: {\n    tooltipLabel: string;\n    value: any;\n    seriesName: string;\n    min: number;\n    max: number;\n  }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min: number, max: number): string {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n        result += min.toLocaleString();\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color: string): Gradient[] {\n    return [\n      {\n        offset: 0,\n        color,\n        opacity: 0.2\n      },\n      {\n        offset: 100,\n        color,\n        opacity: 1\n      }\n    ];\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle(): void {\n    this.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(): void {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({ name: this.data.name });\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-circle]',\n  template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CircleComponent implements OnChanges {\n  @Input() cx: number;\n  @Input() cy: number;\n  @Input() r: number;\n  @Input() fill: string;\n  @Input() stroke: string;\n  @Input() data: number;\n  @Input() classNames: string[] | string;\n  @Input() circleOpacity: number;\n  @Input() pointerEvents: string;\n\n  @Output() select: EventEmitter<number> = new EventEmitter();\n  @Output() activate: EventEmitter<number> = new EventEmitter();\n  @Output() deactivate: EventEmitter<number> = new EventEmitter();\n\n  @HostListener('click')\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n}\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { ViewDimensions } from './types/view-dimension.interface';\nimport { DataItem } from '../models/chart-data.model';\n\ninterface GridPanel {\n  class: ClassEnum;\n  height: number;\n  name: string;\n  width: number;\n  x: number;\n  y: number;\n}\n\nenum GridOrientation {\n  Vertical = 'vertical',\n  Horizontal = 'horizontal'\n}\n\nenum ClassEnum {\n  Odd = 'odd',\n  Even = 'even'\n}\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel-series]',\n  template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelSeriesComponent implements OnChanges {\n  gridPanels: GridPanel[];\n\n  @Input() data: any[];\n\n  @Input() dims: ViewDimensions;\n\n  @Input() xScale: any;\n\n  @Input() yScale: any;\n\n  @Input() orient: GridOrientation;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels(): GridPanel[] {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = ClassEnum.Odd;\n\n      if (this.orient === GridOrientation.Vertical) {\n        const position: number = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === GridOrientation.Horizontal) {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel]',\n  template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelComponent {\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { Gradient } from './types/gradient.interface';\n\nenum Orientation {\n  Vertical = 'vertical',\n  Horizontal = 'horizontal'\n}\n\n@Component({\n  selector: 'g[ngx-charts-svg-linear-gradient]',\n  template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgLinearGradientComponent implements OnChanges {\n  @Input() orientation: Orientation = Orientation.Vertical;\n  @Input() name: string;\n  @Input() stops: Gradient[];\n\n  x1: string;\n  x2: string;\n  y1: string;\n  y2: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === Orientation.Horizontal) {\n      this.x2 = '100%';\n    } else if (this.orientation === Orientation.Vertical) {\n      this.y1 = '100%';\n    }\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\nimport { Gradient } from './types/gradient.interface';\n\n@Component({\n  selector: 'g[ngx-charts-svg-radial-gradient]',\n  template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgRadialGradientComponent implements OnChanges {\n  @Input() color: string;\n  @Input() name: string;\n  @Input() startOpacity: number;\n  @Input() endOpacity = 1;\n  @Input() cx: number = 0;\n  @Input() cy: number = 0;\n\n  @Input()\n  get stops(): Gradient[] {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value: Gradient[]) {\n    this.stopsInput = value;\n  }\n\n  r: string;\n\n  private stopsInput: Gradient[];\n  private stopsDefault: Gradient[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.r = '30%';\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [\n        {\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        },\n        {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }\n      ];\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { id } from '../utils/id';\nimport { Gradient } from './types';\nimport { AreaChartSeries } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-area]',\n  template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaComponent implements OnChanges {\n  @Input() data: AreaChartSeries;\n  @Input() path: string;\n  @Input() startingPath: string;\n  @Input() fill: string;\n  @Input() opacity: number = 1;\n  @Input() startOpacity: number = 0.5;\n  @Input() endOpacity: number = 1;\n  @Input() gradient: boolean = false;\n  @Input() stops: Gradient[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  element: HTMLElement;\n  gradientId: string;\n  gradientFill: string;\n  areaPath: string;\n  initialized: boolean = false;\n  gradientStops: Gradient[];\n  hasGradient: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation(): void {\n    this.areaPath = this.startingPath;\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient(): Gradient[] {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }\n    ];\n  }\n}\n","// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d): number {\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n\n/**\n * Counts from a number to the end incrementally.\n */\nexport function count(countFrom: number, countTo: number, countDecimals: number, countDuration: number, callback: any) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp: number) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n\n/**\n * Determine decimals places\n *\n * @export\n */\nexport function decimalChecker(countTo: number): number {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n","declare let global: any;\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root: any;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n}\n\n// tslint:disable-next-line:variable-name\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\n  prototype?: MouseEvent;\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, { bubbles, cancelable });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\nimport { count, decimalChecker } from './count.helper';\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n@Component({\n  selector: '[ngx-charts-count-up]',\n  template: ` {{ value }} `\n})\nexport class CountUpDirective implements OnDestroy {\n  @Input() countDuration: number = 1;\n  @Input() countPrefix: string = '';\n  @Input() countSuffix: string = '';\n  @Input() valueFormatting: any;\n\n  @Input()\n  set countDecimals(val: number) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals(): number {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  @Input()\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo(): any {\n    return this._countTo;\n  }\n\n  @Input()\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom(): any {\n    return this._countFrom;\n  }\n\n  @Output() countChange = new EventEmitter();\n  @Output() countFinish = new EventEmitter();\n\n  nativeElement: any;\n\n  value: any = '';\n  formattedValue: string;\n\n  private animationReq: any;\n\n  private _countDecimals: number = 0;\n  private _countTo: number = 0;\n  private _countFrom: number = 0;\n\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\n    this.nativeElement = element.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start(): void {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting =\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({ value, progress, finished }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({ value: this.value, progress });\n      if (finished) this.countFinish.emit({ value: this.value, progress });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { brushX } from 'd3-brush';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { id } from '../..//utils/id';\nimport { ViewDimensions } from '../types';\n\nexport enum TimelineScaleType {\n  Time = 'time',\n  Linear = 'linear',\n  Ordinal = 'ordinal'\n}\n\n@Component({\n  selector: 'g[ngx-charts-timeline]',\n  template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Timeline implements OnChanges {\n  @Input() view: [number, number];\n  @Input() results; // type this\n  @Input() scheme; // type this\n  @Input() customColors; // type this\n  @Input() legend: boolean;\n  @Input() autoScale: boolean;\n  @Input() scaleType: TimelineScaleType;\n  @Input() height: number = 50;\n\n  @Output() select = new EventEmitter();\n  @Output() onDomainChange = new EventEmitter();\n\n  element: HTMLElement;\n  dims: ViewDimensions;\n  xDomain: any[];\n  xScale: any;\n  brush: any;\n  transform: string;\n  initialized: boolean = false;\n  filterId: string;\n  filter: string;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update(): void {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n\n    this.cd.markForCheck();\n  }\n\n  getXDomain(): any[] {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n    if (this.scaleType === TimelineScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === TimelineScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === TimelineScaleType.Time) {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === TimelineScaleType.Linear) {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === TimelineScaleType.Ordinal) {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush(): void {\n    if (this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush = brushX()\n      .extent([\n        [0, 0],\n        [width, height]\n      ])\n      .on('brush end', ({ selection }) => {\n        const newSelection = selection || this.xScale.range();\n        const newDomain = newSelection.map(this.xScale.invert);\n\n        this.onDomainChange.emit(newDomain);\n        this.cd.markForCheck();\n      });\n\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush(): void {\n    if (!this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush.extent([\n      [0, 0],\n      [width, height]\n    ]);\n    select(this.element).select('.brush').call(this.brush);\n\n    // clear hardcoded properties so they can be defined by CSS\n    select(this.element)\n      .select('.selection')\n      .attr('fill', undefined)\n      .attr('stroke', undefined)\n      .attr('fill-opacity', undefined);\n\n    this.cd.markForCheck();\n  }\n\n  getDims(): ViewDimensions {\n    const width = this.view[0];\n\n    const dims = {\n      width,\n      height: this.height\n    };\n\n    return dims;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { createMouseEvent } from '../events';\nimport { isPlatformBrowser } from '@angular/common';\nimport { ScaleType, ViewDimensions } from '../common/types';\nimport { ColorHelper } from '../common/color.helper';\n\nexport interface Tooltip {\n  color: string;\n  d0: number;\n  d1: number;\n  max: number;\n  min: number;\n  name: any;\n  series: any;\n  value: any;\n}\n\n@Component({\n  selector: 'g[ngx-charts-tooltip-area]',\n  template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'right'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition('inactive => active', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 0.7 }))\n      ]),\n      transition('active => inactive', [\n        style({\n          opacity: 0.7\n        }),\n        animate(250, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class TooltipArea {\n  anchorOpacity: number = 0;\n  anchorPos: number = -1;\n  anchorValues: Tooltip[] = [];\n  lastAnchorPos: number;\n\n  @Input() dims: ViewDimensions;\n  @Input() xSet: any[];\n  @Input() xScale;\n  @Input() yScale;\n  @Input() results: any[];\n  @Input() colors: ColorHelper;\n  @Input() showPercentage: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() hover: EventEmitter<{ value: any }> = new EventEmitter();\n\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  getValues(xVal): Tooltip[] {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n          let v = val;\n          if (item.d1) {\n            v = item.d1;\n          }\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n\n    this.anchorValues = this.getValues(closestPoint);\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos: number): number {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip(): void {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip(): void {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem: Tooltip): string {\n    let result: string = '';\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n    result += ': ';\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n        result += tooltipItem.min.toLocaleString();\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n      result += ')';\n    }\n    return result;\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectorRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { formatLabel } from '../label.helper';\nimport { ColorHelper } from '../color.helper';\n\nexport interface LegendEntry {\n  color: string;\n  formattedLable: string;\n  label: string;\n}\n\n@Component({\n  selector: 'ngx-charts-legend',\n  template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendComponent implements OnChanges {\n  @Input() data: string[];\n  @Input() title: string;\n  @Input() colors: ColorHelper;\n  @Input() height: number;\n  @Input() width: number;\n  @Input() activeEntries;\n  @Input() horizontal = false;\n\n  @Output() labelClick: EventEmitter<string> = new EventEmitter();\n  @Output() labelActivate: EventEmitter<{ name: string }> = new EventEmitter();\n  @Output() labelDeactivate: EventEmitter<{ name: string }> = new EventEmitter();\n\n  legendEntries: LegendEntry[] = [];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries(): LegendEntry[] {\n    const items = [];\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry: LegendEntry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item: { name: string }) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item: { name: string }) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index: number, item: LegendEntry): string {\n    return item.label;\n  }\n}\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-legend-entry',\n  template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendEntryComponent {\n  @Input() color: string;\n  @Input() label: string;\n  @Input() formattedLabel: string;\n  @Input() isActive: boolean = false;\n\n  @Output() select: EventEmitter<string> = new EventEmitter();\n  @Output() activate: EventEmitter<{ name: string }> = new EventEmitter();\n  @Output() deactivate: EventEmitter<{ name: string }> = new EventEmitter();\n  @Output() toggle: EventEmitter<string> = new EventEmitter();\n\n  get trimmedLabel(): string {\n    return this.formattedLabel || '(empty)';\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit({ name: this.label });\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit({ name: this.label });\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-scale-legend',\n  template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./scale-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScaleLegendComponent implements OnChanges {\n  @Input() valueRange: number[];\n  @Input() colors: any;\n  @Input() height: number;\n  @Input() width: number;\n  @Input() horizontal: boolean = false;\n\n  gradient: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n  }\n\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n  gradientString(colors: string[], splits: number[]): string {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n\n    return pairs.join(', ');\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { formatLabel } from '../label.helper';\nimport { DataItem, StringOrNumberOrDate } from '../../models/chart-data.model';\nimport { ColorHelper } from '../color.helper';\n\nexport interface AdvancedLegendItem {\n  value: StringOrNumberOrDate;\n  _value: StringOrNumberOrDate;\n  color: string;\n  data: DataItem;\n  label: string;\n  displayLabel: string;\n  originalLabel: string;\n  percentage: string;\n}\n\n@Component({\n  selector: 'ngx-charts-advanced-legend',\n  template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./advanced-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedLegendComponent implements OnChanges {\n  @Input() width: number;\n  @Input() data: DataItem[];\n  @Input() colors: ColorHelper;\n  @Input() label: string = 'Total';\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate: EventEmitter<DataItem> = new EventEmitter();\n  @Output() deactivate: EventEmitter<DataItem> = new EventEmitter();\n\n  legendItems: AdvancedLegendItem[] = [];\n  total: number;\n  roundedTotal: number;\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() labelFormatting: (value: string) => any = label => label;\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\n\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getTotal(): number {\n    return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n  }\n\n  update(): void {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems(): AdvancedLegendItem[] {\n    return (this.data as any).map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(item: AdvancedLegendItem): string {\n    return item.label;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChartComponent } from './charts/chart.component';\nimport { BaseChartComponent } from './base-chart.component';\nimport { AxesModule } from './axes/axes.module';\nimport { TooltipModule } from './tooltip/tooltip.module';\nimport { CircleSeriesComponent } from './circle-series.component';\nimport { CircleComponent } from './circle.component';\nimport { GridPanelComponent } from './grid-panel.component';\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\nimport { AreaComponent } from './area.component';\nimport { CountUpDirective } from './count/count.directive';\nimport { TooltipArea } from './tooltip-area.component';\nimport { Timeline } from './timeline/timeline.component';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { LegendComponent } from './legend/legend.component';\nimport { LegendEntryComponent } from './legend/legend-entry.component';\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\n\nconst COMPONENTS = [\n  AreaComponent,\n  BaseChartComponent,\n  CountUpDirective,\n  TooltipArea,\n  ChartComponent,\n  LegendComponent,\n  LegendEntryComponent,\n  ScaleLegendComponent,\n  CircleComponent,\n  CircleSeriesComponent,\n  GridPanelComponent,\n  GridPanelSeriesComponent,\n  SvgLinearGradientComponent,\n  SvgRadialGradientComponent,\n  Timeline,\n  AdvancedLegendComponent\n];\n\n@NgModule({\n  imports: [CommonModule, AxesModule, TooltipModule],\n  declarations: [...COMPONENTS, VisibilityObserver],\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n})\nexport class ChartCommonModule {}\n","import { ViewDimensions } from './types/view-dimension.interface';\nimport { ScaleType, LegendPosition } from '../common/types';\n\nexport function calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = ScaleType.Ordinal,\n  legendPosition = LegendPosition.Right,\n  columns = 12\n}): ViewDimensions {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === LegendPosition.Right) {\n    if (legendType === ScaleType.Ordinal) {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = (chartWidth * columns) / 12;\n\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n","import { ScaleType } from '../common/types';\n\nexport interface Color {\n  name: string;\n  selectable: boolean;\n  group: ScaleType;\n  domain: string[];\n}\n\nexport let colorSets: Color[] = [\n  {\n    name: 'vivid',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#647c8a',\n      '#3f51b5',\n      '#2196f3',\n      '#00b862',\n      '#afdf0a',\n      '#a7b61a',\n      '#f3e562',\n      '#ff9800',\n      '#ff5722',\n      '#ff4514'\n    ]\n  },\n  {\n    name: 'natural',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#bf9d76',\n      '#e99450',\n      '#d89f59',\n      '#f2dfa7',\n      '#a5d7c6',\n      '#7794b1',\n      '#afafaf',\n      '#707160',\n      '#ba9383',\n      '#d9d5c3'\n    ]\n  },\n  {\n    name: 'cool',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#a8385d',\n      '#7aa3e5',\n      '#a27ea8',\n      '#aae3f5',\n      '#adcded',\n      '#a95963',\n      '#8796c0',\n      '#7ed3ed',\n      '#50abcc',\n      '#ad6886'\n    ]\n  },\n  {\n    name: 'fire',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n  },\n  {\n    name: 'solar',\n    selectable: true,\n    group: ScaleType.Linear,\n    domain: [\n      '#fff8e1',\n      '#ffecb3',\n      '#ffe082',\n      '#ffd54f',\n      '#ffca28',\n      '#ffc107',\n      '#ffb300',\n      '#ffa000',\n      '#ff8f00',\n      '#ff6f00'\n    ]\n  },\n  {\n    name: 'air',\n    selectable: true,\n    group: ScaleType.Linear,\n    domain: [\n      '#e1f5fe',\n      '#b3e5fc',\n      '#81d4fa',\n      '#4fc3f7',\n      '#29b6f6',\n      '#03a9f4',\n      '#039be5',\n      '#0288d1',\n      '#0277bd',\n      '#01579b'\n    ]\n  },\n  {\n    name: 'aqua',\n    selectable: true,\n    group: ScaleType.Linear,\n    domain: [\n      '#e0f7fa',\n      '#b2ebf2',\n      '#80deea',\n      '#4dd0e1',\n      '#26c6da',\n      '#00bcd4',\n      '#00acc1',\n      '#0097a7',\n      '#00838f',\n      '#006064'\n    ]\n  },\n  {\n    name: 'flame',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#A10A28',\n      '#D3342D',\n      '#EF6D49',\n      '#FAAD67',\n      '#FDDE90',\n      '#DBED91',\n      '#A9D770',\n      '#6CBA67',\n      '#2C9653',\n      '#146738'\n    ]\n  },\n  {\n    name: 'ocean',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#1D68FB',\n      '#33C0FC',\n      '#4AFFFE',\n      '#AFFFFF',\n      '#FFFC63',\n      '#FDBD2D',\n      '#FC8A25',\n      '#FA4F1E',\n      '#FA141B',\n      '#BA38D1'\n    ]\n  },\n  {\n    name: 'forest',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#55C22D',\n      '#C1F33D',\n      '#3CC099',\n      '#AFFFFF',\n      '#8CFC9D',\n      '#76CFFA',\n      '#BA60FB',\n      '#EE6490',\n      '#C42A1C',\n      '#FC9F32'\n    ]\n  },\n  {\n    name: 'horizon',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#2597FB',\n      '#65EBFD',\n      '#99FDD0',\n      '#FCEE4B',\n      '#FEFCFA',\n      '#FDD6E3',\n      '#FCB1A8',\n      '#EF6F7B',\n      '#CB96E8',\n      '#EFDEE0'\n    ]\n  },\n  {\n    name: 'neons',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#FF3333',\n      '#FF33FF',\n      '#CC33FF',\n      '#0000FF',\n      '#33CCFF',\n      '#33FFFF',\n      '#33FF66',\n      '#CCFF33',\n      '#FFCC00',\n      '#FF6600'\n    ]\n  },\n  {\n    name: 'picnic',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#FAC51D',\n      '#66BD6D',\n      '#FAA026',\n      '#29BB9C',\n      '#E96B56',\n      '#55ACD2',\n      '#B7332F',\n      '#2C83C9',\n      '#9166B8',\n      '#92E7E8'\n    ]\n  },\n  {\n    name: 'night',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#2B1B5A',\n      '#501356',\n      '#183356',\n      '#28203F',\n      '#391B3C',\n      '#1E2B3C',\n      '#120634',\n      '#2D0432',\n      '#051932',\n      '#453080',\n      '#75267D',\n      '#2C507D',\n      '#4B3880',\n      '#752F7D',\n      '#35547D'\n    ]\n  },\n  {\n    name: 'nightLights',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#4e31a5',\n      '#9c25a7',\n      '#3065ab',\n      '#57468b',\n      '#904497',\n      '#46648b',\n      '#32118d',\n      '#a00fb3',\n      '#1052a2',\n      '#6e51bd',\n      '#b63cc3',\n      '#6c97cb',\n      '#8671c1',\n      '#b455be',\n      '#7496c3'\n    ]\n  }\n];\n","import { range } from 'd3-array';\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\n\nimport { colorSets } from '../utils/color-sets';\nimport { Gradient, ScaleType } from './types';\nimport { StringOrNumberOrDate } from '../models/chart-data.model';\n\nexport class ColorHelper {\n  scale: any;\n  scaleType: ScaleType;\n  colorDomain: string[];\n  domain: number[] | string[];\n  customColors: any;\n\n  constructor(scheme: any, type: ScaleType, domain: number[] | string[], customColors?) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme: any, type: ScaleType, domain: number[] | string[]): any {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    let colorScale;\n    if (type === ScaleType.Quantile) {\n      colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n    } else if (type === ScaleType.Ordinal) {\n      colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n    } else if (type === ScaleType.Linear) {\n      // linear schemes must have at least 2 colors\n      const colorDomain = [...scheme.domain];\n      if (colorDomain.length === 1) {\n        colorDomain.push(colorDomain[0]);\n        this.colorDomain = colorDomain;\n      }\n\n      const points = range(0, 1, 1.0 / colorDomain.length);\n      colorScale = scaleLinear().domain(points).range(colorDomain);\n    }\n\n    return colorScale;\n  }\n\n  getColor(value: StringOrNumberOrDate): string {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n    if (this.scaleType === ScaleType.Linear) {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found: any; // todo type customColors\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value: number | string, start?: number | string): Gradient[] {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n\n    const endColor = this.getColor(value);\n\n    // generate the stops\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops: Gradient[] = [];\n\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n}\n","import { ScaleType } from './types';\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nexport function getUniqueXDomainValues(results: any[]): any[] {\n  const valueSet = new Set();\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n  return Array.from(valueSet);\n}\n\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nexport function getScaleType(values: any[], checkDateType: boolean = true): ScaleType {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n    if (allDates) {\n      return ScaleType.Time;\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n  if (allNumbers) {\n    return ScaleType.Linear;\n  }\n\n  return ScaleType.Ordinal;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear, CurveFactory } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\nimport { ViewDimensions, LegendPosition, LegendOptions, ScaleType } from '../common/types';\nimport { isDate, isNumber } from '../utils/types';\nimport { Series, StringOrNumberOrDate } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-area-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean = false;\n  @Input() yAxis: boolean = false;\n  @Input() baseValue: any = 'auto';\n  @Input() autoScale: boolean = false;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() timeline: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: CurveFactory = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any[];\n  yDomain: [number, number];\n  seriesDomain: string[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  clipPathId: string;\n  clipPath: string;\n  scaleType: ScaleType;\n  series: Series;\n  margin: number[] = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: LegendOptions;\n\n  timelineWidth: number;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any[];\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): [number, number] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): number {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height: number): number {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values): ScaleType {\n    let date = true;\n    let num = true;\n    for (const value of values) {\n      if (isDate(value)) {\n        date = false;\n      }\n      if (isNumber(value)) {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return ScaleType.Time;\n    }\n\n    if (num) {\n      return ScaleType.Linear;\n    }\n\n    return ScaleType.Ordinal;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?: Series): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index: number, item: Series): StringOrNumberOrDate {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts: LegendOptions = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\nimport { ViewDimensions, LegendPosition, LegendOptions, ScaleType } from '../common/types';\nimport { Series } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-area-chart-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              normalized=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            normalized=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean = false;\n  @Input() showYAxisLabel: boolean = false;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: ScaleType;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: [number, number] = [0, 100];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  tooltipAreas: any[];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: LegendOptions;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      let total = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = (d.d0 * 100) / total;\n          d.d1 = (d.d1 * 100) / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getSeriesDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): any {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height: number): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index: number, item: Series): any {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts: LegendOptions = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\nimport { ViewDimensions, LegendPosition, ScaleType, LegendOptions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-area-chart-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              stacked=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            stacked=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartStackedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean = false;\n  @Input() yAxis: boolean = false;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() timeline: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: ScaleType;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: [number, number];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: number;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): [number, number] {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): any {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height: number): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","export function sortLinear(data, property: string, direction = 'asc'): any[] {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nexport function sortByDomain(data, property: string, direction = 'asc', domain): any[] {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nexport function sortByTime(data, property: string, direction = 'asc'): any[] {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { area } from 'd3-shape';\nimport { ColorHelper } from '../common/color.helper';\nimport { Gradient, ScaleType } from '../common/types';\nimport { AreaChartSeries } from '../models/chart-data.model';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-area-series]',\n  template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaSeriesComponent implements OnChanges {\n  @Input() data: AreaChartSeries;\n  @Input() xScale: any;\n  @Input() yScale: any;\n  @Input() baseValue: any = 'auto';\n  @Input() colors: ColorHelper;\n  @Input() scaleType: ScaleType;\n  @Input() stacked: boolean = false;\n  @Input() normalized: boolean = false;\n  @Input() gradient: boolean;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  opacity: number;\n  path: string;\n  startingPath: string;\n\n  hasGradient: boolean;\n  gradientStops: Gradient[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradient();\n\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0((d, i) => this.yScale(d.d0))\n        .y1((d, i) => this.yScale(d.d1));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => this.yScale.range()[0])\n        .y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => this.yScale(d.value));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n\n    this.opacity = 0.8;\n\n    let data = this.data.series;\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { roundedRect } from '../common/shape.helper';\nimport { id } from '../utils/id';\nimport { Gradient } from '../common/types';\nimport { DataItem } from '../models/chart-data.model';\n\n/* tslint:disable-next-line */\nimport { transition } from 'd3-transition';\n\nenum BarOrientation {\n  Vertical = 'vertical',\n  Horizontal = 'horizontal'\n}\n\n@Component({\n  selector: 'g[ngx-charts-bar]',\n  template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarComponent implements OnChanges {\n  @Input() fill: string;\n  @Input() data: DataItem;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() orientation: BarOrientation;\n  @Input() roundEdges: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() offset: number = 0;\n  @Input() isActive: boolean = false;\n  @Input() stops: Gradient[];\n  @Input() animations: boolean = true;\n  @Input() ariaLabel: string;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate: EventEmitter<DataItem> = new EventEmitter();\n  @Output() deactivate: EventEmitter<DataItem> = new EventEmitter();\n\n  element: HTMLElement;\n  path: string;\n  gradientId: string;\n  gradientFill: string;\n  startOpacity: number;\n  gradientStops: Gradient[];\n  hasGradient: boolean = false;\n  hideBar: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n    this.update();\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation(): void {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient(): Gradient[] {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  getStartingPath(): string {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === BarOrientation.Vertical) {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath(): string {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius(): number {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity(): number {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges(): boolean[] {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n    return edges;\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  private checkToHideBar(): void {\n    this.hideBar =\n      this.noBarWhenZero &&\n      ((this.orientation === BarOrientation.Vertical && this.height === 0) ||\n        (this.orientation === BarOrientation.Horizontal && this.width === 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AreaChartComponent } from './area-chart.component';\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\nimport { AreaSeriesComponent } from './area-series.component';\nimport { ChartCommonModule } from '../common/chart-common.module';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n})\nexport class AreaChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ViewDimensions, LegendPosition, ScaleType, LegendOptions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarHorizontalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() xScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yScale: any;\n  xScale: any;\n  xDomain: [number, number];\n  yDomain: string[];\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend: boolean = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend: boolean = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ViewDimensions, LegendPosition, ScaleType, LegendOptions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontal2DComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding: number = 16;\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): [number, number] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group: DataItem): string {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group?: DataItem): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index: number, item: DataItem): string {\n    return item.name as any;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex: number): void {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group: DataItem, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: DataItem, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ViewDimensions, LegendPosition, ScaleType, LegendOptions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number] = [0, 100];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group: Series): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?: Series): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index: number, item: Series): string {\n    return item.name as any;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ViewDimensions, LegendPosition, ScaleType, LegendOptions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): [number, number] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group: Series): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?: Series): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index: string, item: Series): any {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex: number) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\nimport { ViewDimensions, LegendPosition, LegendOptions, ScaleType } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarVerticalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xScale: any;\n  yScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n    return [min, max];\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ViewDimensions, LegendPosition, ScaleType, LegendOptions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVertical2DComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() scaleType: ScaleType = ScaleType.Ordinal;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding: number = 16;\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex: number): void {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): [number, number] {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n\n    return [min, max];\n  }\n\n  groupTransform(group: DataItem): string {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group?: DataItem): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index: number, item: DataItem): any {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group: DataItem, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: DataItem, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ViewDimensions, LegendPosition, ScaleType, LegendOptions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number] = [0, 100];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group: Series): string {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group?: Series) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index: number, item: Series): any {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","export enum BarChartType {\n  Standard = 'standard',\n  Normalized = 'normalized',\n  Stacked = 'stacked'\n}\n","export enum D0Types {\n  positive = 'positive',\n  negative = 'negative'\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ViewDimensions, LegendPosition, ScaleType, LegendOptions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalStackedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  tickFormatting: (label: string) => string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n\n  getValueDomain(): [number, number] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex: number) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group: Series): string {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group?: Series) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index: number, item: Series): any {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem, StringOrNumberOrDate, Series } from '../models/chart-data.model';\nimport { ScaleType, ViewDimensions } from '../common/types';\nimport { ColorHelper } from '../common/color.helper';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { Bar } from './types/bar.model';\nimport { D0Types } from './types/d0-type.enum';\n\n@Component({\n  selector: 'g[ngx-charts-series-horizontal]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'horizontal'\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'horizontal'\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesHorizontal implements OnChanges {\n  @Input() dims: ViewDimensions;\n  @Input() type: BarChartType = BarChartType.Standard;\n  @Input() series: DataItem[];\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelWidthChanged: EventEmitter<{ size: Event; index: string }> = new EventEmitter();\n\n  tooltipPlacement: PlacementTypes;\n  tooltipType: StyleTypes;\n  bars: Bar[];\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type: D0Types;\n    d0Type = D0Types.positive;\n    let total;\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => (sum as any) + d, 0);\n    }\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n\n    this.bars = this.series.map(d => {\n      let value = d.value as any;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === BarChartType.Standard) {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n        bar.y = this.yScale(label);\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels(): void {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      // if total is positive then we show it on the right, otherwise on the left\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings(): void {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry: Series): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem: DataItem): StringOrNumberOrDate {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index: number, bar: Bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index: number, barLabel: any): string {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data: DataItem): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem, StringOrNumberOrDate } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { ScaleType, ViewDimensions } from '../common/types';\nimport { ColorHelper } from '../common/color.helper';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { D0Types } from './types/d0-type.enum';\nimport { Bar } from './types/bar.model';\n\n@Component({\n  selector: 'g[ngx-charts-series-vertical]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'vertical'\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'vertical'\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesVerticalComponent implements OnChanges {\n  @Input() dims: ViewDimensions;\n  @Input() type: BarChartType = BarChartType.Standard;\n  @Input() series: DataItem[];\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelHeightChanged = new EventEmitter();\n\n  tooltipPlacement: PlacementTypes;\n  tooltipType: StyleTypes;\n\n  bars: Bar[];\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  ngOnChanges(changes): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    let width;\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n\n    let total;\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value as any;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === BarChartType.Standard) {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels(): void {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings(): void {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem: DataItem): StringOrNumberOrDate {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index: number, bar: Bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index: number, barLabel: any): string {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { formatLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bar-label]',\n  template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n  styleUrls: ['./bar-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarLabelComponent implements OnChanges {\n  @Input() value;\n  @Input() valueFormatting: any;\n  @Input() barX;\n  @Input() barY;\n  @Input() barWidth;\n  @Input() barHeight;\n  @Input() orientation;\n\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\n\n  element: any;\n  x: number;\n  y: number;\n  horizontalPadding: number = 2;\n  verticalPadding: number = 5;\n  formatedValue: string;\n  transform: string;\n  textAnchor: string;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getSize(): any {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return { height: h, width: w, negative: this.value < 0 };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update(): void {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth;\n      // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BarComponent } from './bar.component';\nimport { BarHorizontalComponent } from './bar-horizontal.component';\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\nimport { BarVerticalComponent } from './bar-vertical.component';\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\nimport { SeriesHorizontal } from './series-horizontal.component';\nimport { SeriesVerticalComponent } from './series-vertical.component';\nimport { BarLabelComponent } from './bar-label.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ],\n  exports: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ]\n})\nexport class BarChartModule {}\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { ScaleType } from '../common/types';\n\nexport function getDomain(\n  values: any[],\n  scaleType: ScaleType,\n  autoScale: boolean,\n  minVal?: number,\n  maxVal?: number\n): number[] {\n  let domain: number[] = [];\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nexport function getScale(domain: number[], range: number[], scaleType: ScaleType, roundDomains: boolean): any {\n  let scale: any;\n\n  if (scaleType === ScaleType.Time) {\n    scale = scaleTime().range(range).domain(domain);\n  } else if (scaleType === ScaleType.Linear) {\n    scale = scaleLinear().range(range).domain(domain);\n\n    if (roundDomains) {\n      scale = scale.nice();\n    }\n  } else if (scaleType === ScaleType.Ordinal) {\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\n  }\n\n  return scale;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { getDomain, getScale } from './bubble-chart.utils';\nimport { id } from '../utils/id';\nimport { LegendOptions, LegendPosition, ScaleType, ViewDimensions } from '../common/types';\nimport { BubbleChartSeries } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-bubble-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class BubbleChartComponent extends BaseChartComponent {\n  @Input() showGridLines: boolean = true;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean = true;\n  @Input() yAxis: boolean = true;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() maxRadius: number = 10;\n  @Input() minRadius: number = 3;\n  @Input() autoScale: boolean;\n  @Input() schemeType: ScaleType = ScaleType.Ordinal;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: number;\n  @Input() xScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  colors: ColorHelper;\n  scaleType: ScaleType = ScaleType.Linear;\n  margin: number[] = [10, 20, 10, 20];\n  bubblePadding: number[] = [0, 0, 0, 0];\n  data: BubbleChartSeries[];\n\n  legendOptions: LegendOptions;\n  transform: string;\n\n  clipPath: string;\n  clipPathId: string;\n\n  seriesDomain: number[];\n  xDomain: number[];\n  yDomain: number[];\n  rDomain: number[];\n\n  xScaleType: ScaleType;\n  yScaleType: ScaleType;\n\n  yScale: any;\n  xScale: any;\n  rScale: any;\n\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n\n  activeEntries: any[] = [];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n\n    const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n\n    this.data = this.results;\n\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n\n    this.legendOptions = this.getLegendOptions();\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding(): number[] {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n    let height = this.dims.height;\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height: number): any {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width: number): any {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range): any {\n    const scale = scaleLinear().range(range).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain(): number[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain(): number[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain(): [number, number] {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index: number, item): string {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ScaleType } from '../common/types';\nimport { ColorHelper } from '../common/color.helper';\nimport { BubbleChartSeries } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-bubble-series]',\n  template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipType]=\"'tooltip'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n          transform: 'scale(0)'\n        }),\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n      ])\n    ])\n  ]\n})\nexport class BubbleSeriesComponent implements OnChanges {\n  @Input() data: BubbleChartSeries;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() rScale;\n  @Input() xScaleType: ScaleType;\n  @Input() yScaleType: ScaleType;\n  @Input() colors: ColorHelper;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circles: any[]; // TODO type this\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circles = this.getCircles();\n  }\n\n  getCircles(): any[] {\n    const seriesName = this.data.name;\n\n    return this.data.series\n      .map((d, i) => {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          const y = d.y;\n          const x = d.x;\n          const r = d.r;\n\n          const radius = this.rScale(r || 1);\n          const tooltipLabel = formatLabel(d.name);\n\n          const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n          const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n\n          const color =\n            this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n          const opacity = isActive ? 1 : 0.3;\n\n          const data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n\n          return {\n            data,\n            x,\n            y,\n            r,\n            classNames: [`circle-data-${i}`],\n            value: y,\n            label: x,\n            cx,\n            cy,\n            radius,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            isActive,\n            transform: `translate(${cx},${cy})`\n          };\n        }\n      })\n      .filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle): string {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name =\n      hasSeriesName && hasTooltipLabel\n        ? `${circle.seriesName} • ${circle.tooltipLabel}`\n        : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle =\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle): boolean {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({ name: circle.seriesName });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle): void {\n    circle.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(circle): void {\n    circle.barVisible = false;\n    this.deactivate.emit({ name: this.data.name });\n  }\n\n  trackBy(index, circle): string {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BubbleChartComponent } from './bubble-chart.component';\nimport { BubbleSeriesComponent } from './bubble-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\n})\nexport class BubbleChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { Gradient } from '../common/types';\n\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        style=\"cursor: pointer\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatMapCellComponent implements OnChanges {\n  @Input() fill: string;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() data: number;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<number> = new EventEmitter();\n  @Output() activate: EventEmitter<number> = new EventEmitter();\n  @Output() deactivate: EventEmitter<number> = new EventEmitter();\n\n  element: HTMLElement;\n  transform: string;\n  startOpacity: number;\n  gradientId: string;\n  gradientUrl: string;\n  gradientStops: Gradient[];\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.transform = `translate(${this.x} , ${this.y})`;\n\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops(): Gradient[] {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem, Series } from '../models/chart-data.model';\n\ninterface Cell {\n  cell: DataItem;\n  data: number;\n  fill: string;\n  height: number;\n  label: string;\n  row: Series;\n  series: string;\n  width: number;\n  x: number;\n  y: number;\n}\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() colors;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() gradient: boolean;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate: EventEmitter<DataItem> = new EventEmitter();\n  @Output() deactivate: EventEmitter<DataItem> = new EventEmitter();\n\n  cells: Cell[];\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): Cell[] {\n    const cells = [];\n\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n\n    return cells;\n  }\n\n  getTooltipText({ label, data, series }: { label: string; data: number; series: string }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index: number, item): string {\n    return item.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { scaleBand } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { LegendOptions, LegendPosition, ScaleType, ViewDimensions } from '../common/types';\n\ninterface RectItem {\n  fill: string;\n  height: number;\n  rx: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\n@Component({\n  selector: 'ngx-charts-heat-map',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class HeatMapComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() gradient: boolean;\n  @Input() innerPadding: number | number[] = 8;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() min: number;\n  @Input() max: number;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xDomain: string[];\n  yDomain: string[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  colors: ColorHelper;\n  colorScale: any;\n  transform: string;\n  rects: RectItem[];\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  scaleType: ScaleType = ScaleType.Linear;\n\n  update(): void {\n    super.update();\n\n    this.formatDates();\n\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.scaleType = getScaleType(this.valueDomain, false);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType as any,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === ScaleType.Linear) {\n      let min = this.min;\n      let max = this.max;\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n  getDimension(value: string | number | Array<string | number>, index: number = 0, N: number, L: number): number {\n    if (typeof value === 'string') {\n      value = value\n        .replace('[', '')\n        .replace(']', '')\n        .replace('px', '')\n        // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n    return N / (L / +value + 1);\n  }\n\n  getXScale(): any {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale(): any {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects(): RectItem[] {\n    const rects = [];\n\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n\n    return rects;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions(): LegendOptions {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n      title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { HeatMapCellComponent } from './heat-map-cell.component';\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\nimport { HeatMapComponent } from './heat-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n})\nexport class HeatMapModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { Series } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-line]',\n  template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          strokeDasharray: 2000,\n          strokeDashoffset: 2000\n        }),\n        animate(\n          1000,\n          style({\n            strokeDashoffset: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineComponent implements OnChanges {\n  @Input() path: string;\n  @Input() stroke: string;\n  @Input() data: Series;\n  @Input() fill: string = 'none';\n  @Input() animations: boolean = true;\n\n  // @Output() select = new EventEmitter();\n\n  initialized: boolean = false;\n  initialPath: string;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\nimport { LegendOptions, LegendPosition, ScaleType, ViewDimensions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-line-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() timeline: boolean;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() rangeFillOpacity: number;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showRefLines: boolean = false;\n  @Input() referenceLines: any;\n  @Input() showRefLabels: boolean = true;\n  @Input() xScaleMin: number;\n  @Input() xScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: [number, number];\n  seriesDomain: any;\n  yScale: any;\n  xScale: any;\n  colors: ColorHelper;\n  scaleType: ScaleType;\n  transform: string;\n  clipPath: string;\n  clipPathId: string;\n  areaPath: any;\n  margin: number[] = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  hasRange: boolean; // whether the line has a min-max range around it\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): [number, number] {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): any {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height: number): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index: number, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    this.deactivateAll();\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { area, line } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { ColorHelper } from '../common/color.helper';\nimport { ScaleType, Gradient } from '../common/types';\nimport { Series } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-line-series]',\n  template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineSeriesComponent implements OnChanges {\n  @Input() data: Series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType: ScaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() hasRange: boolean;\n  @Input() animations: boolean = true;\n\n  path: string;\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: Gradient[];\n  areaGradientStops: Gradient[];\n  stroke: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const data = this.sortData(this.data.series);\n\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator(): any {\n    return line<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === ScaleType.Time) {\n          value = this.xScale(label);\n        } else if (this.scaleType === ScaleType.Linear) {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  getRangeGenerator(): any {\n    return area<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === ScaleType.Time) {\n          value = this.xScale(label);\n        } else if (this.scaleType === ScaleType.Linear) {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n      .curve(this.curve);\n  }\n\n  getAreaGenerator(): any {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area<any>()\n      .x(xProperty)\n      .y0(() => this.yScale.range()[0])\n      .y1(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LineComponent } from './line.component';\nimport { LineChartComponent } from './line-chart.component';\nimport { LineSeriesComponent } from './line-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n})\nexport class LineChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveCardinalClosed } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { getScaleType } from '../common/domain.helper';\nimport { isDate } from '../utils/types';\nimport { ViewDimensions, LegendPosition, ScaleType } from '../common/types';\n\nconst twoPI = 2 * Math.PI;\n\n@Component({\n  selector: 'ngx-charts-polar-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"'bottom'\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: [\n    '../common/base-chart.component.scss',\n    '../pie-chart/pie-chart.component.scss',\n    './polar-chart.component.scss'\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class PolarChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveCardinalClosed;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() rangeFillOpacity: number = 0.15;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: (o: any) => any;\n  @Input() yAxisTickFormatting: (o: any) => any;\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showSeriesOnHover: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() yAxisMinScale: number = 0;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yAxisDims: ViewDimensions;\n  labelOffset: number;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any; // -> rScale\n  xScale: any; // -> tScale\n  yAxisScale: any; // -> yScale\n  colors: ColorHelper;\n  scaleType: ScaleType;\n  transform: string;\n  transformPlot: string;\n  transformYAxis: string;\n  transformXAxis: string;\n  // series: any; // ???\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  thetaTicks: any[];\n  radiusTicks: number[];\n  outerRadius: number;\n\n  update(): void {\n    super.update();\n\n    this.setDims();\n\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n\n    this.yAxisDims = {\n      ...this.dims,\n      width: halfWidth\n    };\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n\n    const minDistance = 10;\n\n    /* from pie chart, abstract out -*/\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j];\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues(): any[] {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()): any[] {\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n    return values;\n  }\n\n  getYValues(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()): any[] {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n\n    min = Math.max(0, min);\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): any {\n    switch (this.scaleType) {\n      case ScaleType.Time:\n        return scaleTime().range([0, width]).domain(domain);\n      case ScaleType.Linear:\n        const scale = scaleLinear().range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n      default:\n        return scalePoint()\n          .range([0, width - twoPI / domain.length])\n          .padding(0)\n          .domain(domain);\n    }\n  }\n\n  getYScale(domain, height: number): any {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === ScaleType.Ordinal) {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index: number, item): string {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { lineRadial } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { escapeLabel } from '../common/label.helper';\nimport { ScaleType } from '../common/types';\nimport { Series, DataItem } from '../models/chart-data.model';\n\ninterface PolarChartCircle {\n  color: string;\n  cx: number;\n  cy: number;\n  data: Series;\n  label: string;\n  value: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-polar-series]',\n  template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        tooltipType=\"tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PolarSeriesComponent implements OnChanges {\n  @Input() name;\n  @Input() data;\n  @Input() xScale; // Theta\n  @Input() yScale; // R\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => string;\n  @Input() gradient: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  path: string;\n  circles: PolarChartCircle[];\n  circleRadius: number = 3;\n\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  seriesColor: string;\n\n  active: boolean;\n  inactive: boolean;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const line = this.getLineGenerator();\n\n    const data = this.sortData(this.data.series);\n\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n\n    this.path = line(data) || '';\n\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d: DataItem) {\n    const label = d.name;\n    if (this.scaleType === ScaleType.Time) {\n      return this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      return this.xScale(Number(label));\n    }\n    return this.xScale(label);\n  }\n\n  getRadius(d: DataItem) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator(): any {\n    return lineRadial<any>()\n      .angle(d => this.getAngle(d))\n      .radius(d => this.getRadius(d))\n      .curve(this.curve);\n  }\n\n  sortData(data: DataItem) {\n    if (this.scaleType === ScaleType.Linear) {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      return sortByTime(data, 'name');\n    }\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry: DataItem): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry: DataItem): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({ label, value }: { label: string; value: number }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\nimport { ScaleType, ViewDimensions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-advanced-pie-chart',\n  template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedPieChartComponent extends BaseChartComponent {\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() label: string = 'Total';\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  domain: string[];\n  outerRadius: number;\n  innerRadius: number;\n  transform: string;\n  colors: ColorHelper;\n  legendWidth: number;\n  margin: number[] = [20, 20, 20, 20];\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() nameFormatting: (value: string) => any;\n  @Input() percentageFormatting: (value: number) => any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: (this.width * 4) / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n    this.setColors();\n\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { arc, DefaultArcObject } from 'd3-shape';\n\nimport { trimLabel } from '../common/trim-label.helper';\nimport { TextAnchor } from '../common/types';\nimport { DataItem } from '../models/chart-data.model';\n\nexport interface PieData extends DefaultArcObject {\n  data: DataItem;\n  endAngle: number;\n  index: number;\n  padAngle: number;\n  pos: [number, number];\n  startAngle: number;\n  value: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-pie-label]',\n  template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieLabelComponent implements OnChanges {\n  @Input() data: PieData;\n  @Input() radius: number;\n  @Input() label: string;\n  @Input() color: string;\n  @Input() max: number;\n  @Input() value: number;\n  @Input() explodeSlices: boolean;\n  @Input() animations: boolean = true;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  trimLabel: (label: string, max?: number) => string;\n  line: string;\n  styleTransform: string;\n  attrTransform: string;\n  textTransition: string;\n\n  constructor(@Inject(PLATFORM_ID) public platformId: any) {\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.setTransforms();\n    this.update();\n  }\n\n  setTransforms() {\n    if (isPlatformServer(this.platformId)) {\n      this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = `translate(${this.textX},${this.textY})`;\n      this.textTransition = !this.animations ? null : 'transform 0.75s';\n    } else {\n      const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n      this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n      this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n    }\n  }\n\n  update(): void {\n    let startRadius = this.radius;\n    if (this.explodeSlices) {\n      startRadius = (this.radius * this.value) / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n\n    // Calculate innerPos then scale outer position to match label position\n    const innerPos = innerArc.centroid(this.data);\n\n    let scale = this.data.pos[1] / innerPos[1];\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX(): number {\n    return this.data.pos[0];\n  }\n\n  get textY(): number {\n    return this.data.pos[1];\n  }\n\n  textAnchor(): TextAnchor {\n    return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { interpolate } from 'd3-interpolate';\nimport { select } from 'd3-selection';\nimport { arc } from 'd3-shape';\n\nimport { id } from '../utils/id';\n/* tslint:disable */\nimport { MouseEvent } from '../events';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-pie-arc]',\n  template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          [color]=\"fill\"\n          orientation=\"vertical\"\n          [name]=\"radialGradientId\"\n          [startOpacity]=\"startOpacity\"\n        />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieArcComponent implements OnChanges {\n  @Input() fill: string;\n  @Input() startAngle: number = 0;\n  @Input() endAngle: number = Math.PI * 2;\n  @Input() innerRadius: number;\n  @Input() outerRadius: number;\n  @Input() cornerRadius: number = 0;\n  @Input() value: number;\n  @Input() max: number;\n  @Input() data: DataItem;\n  @Input() explodeSlices: boolean = false;\n  @Input() gradient: boolean = false;\n  @Input() animate: boolean = true;\n  @Input() pointerEvents: boolean = true;\n  @Input() isActive: boolean = false;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  element: HTMLElement;\n  path: any;\n  startOpacity: number;\n  radialGradientId: string;\n  linearGradientId: string;\n  gradientFill: string;\n  initialized: boolean = false;\n  private _timeout;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getGradient(): string {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents(): string {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update(): void {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc(): any {\n    let outerRadius = this.outerRadius;\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = (this.outerRadius * this.value) / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        const interpolater = interpolate(copyOfD, copyOfD);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      })\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  updateAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  onClick(): void {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event: MouseEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\nimport { LegendOptions, LegendPosition, ScaleType, ViewDimensions } from '../common/types';\n\n@Component({\n  selector: 'ngx-charts-pie-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieChartComponent extends BaseChartComponent {\n  @Input() labels: boolean = false;\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() explodeSlices: boolean = false;\n  @Input() doughnut: boolean = false;\n  @Input() arcWidth: number = 0.25;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: any;\n  @Output() dblclick = new EventEmitter();\n  // optional margins\n  @Input() margins: number[];\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  translation: string;\n  outerRadius: number;\n  innerRadius: number;\n  data: DataItem[];\n  colors: ColorHelper;\n  domain: string[];\n  dims: ViewDimensions;\n  legendOptions: LegendOptions;\n\n  update(): void {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n    this.innerRadius = 0;\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain();\n\n    // sort data according to domain\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    return {\n      scaleType: ScaleType.Ordinal,\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false): void {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false): void {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  private hasNoOptionalMarginsSet(): boolean {\n    return !this.margins || this.margins.length <= 0;\n  }\n}\n","import { scaleBand } from 'd3-scale';\nimport { ViewDimensions } from './types/view-dimension.interface';\nimport { StringOrNumberOrDate } from '../models/chart-data.model';\n\nexport interface GridItem {\n  data: GridData;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\nexport interface GridData {\n  extra?: any;\n  label: string;\n  name: StringOrNumberOrDate;\n  percent: number;\n  total: number;\n  value: number;\n}\n\nexport function gridSize(dims: ViewDimensions, len: number, minWidth: number): [number, number] {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nexport function gridLayout(\n  dims: ViewDimensions,\n  data: GridData[],\n  minWidth: number,\n  designatedTotal: number\n): GridItem[] {\n  const xScale: any = scaleBand<number>();\n  const yScale: any = scaleBand<number>();\n  const width = dims.width;\n  const height = dims.height;\n\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n\n  const xDomain = [];\n  const yDomain = [];\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n  return res;\n}\n\nfunction getTotal(results: any): number {\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { min } from 'd3-array';\nimport { format } from 'd3-format';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { gridLayout } from '../common/grid-layout.helper';\nimport { formatLabel } from '../common/label.helper';\nimport { DataItem, PieGridDataItem } from '../models/chart-data.model';\nimport { ScaleType, ViewDimensions } from '../common/types';\n\nexport interface PieGridData {\n  data: PieGridDataItem;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\n@Component({\n  selector: 'ngx-charts-pie-grid',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipType]=\"'tooltip'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridComponent extends BaseChartComponent {\n  @Input() designatedTotal: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => any;\n  @Input() label: string = 'Total';\n  @Input() minWidth: number = 150;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  dims: ViewDimensions;\n  data: PieGridData[];\n  transform: string;\n  series: any[];\n  domain: string[];\n  colorScale: ColorHelper;\n  margin: number[] = [20, 20, 20, 20];\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n\n    this.series = this.getSeries();\n    this.setColors();\n\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({ data }): string {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries(): any[] {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n\n      let count = 0;\n      const colors = () => {\n        count += 1;\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [\n          d,\n          {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }\n        ]\n      };\n    });\n  }\n\n  getTotal(): any {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { pie } from 'd3-shape';\nimport { PieGridDataItem } from '../models/chart-data.model';\nimport { PieGridData } from './pie-grid.component';\n\nexport interface PieArc {\n  animate: boolean;\n  class: string;\n  data: PieGridDataItem;\n  endAngle: number;\n  fill: string;\n  pointerEvents: boolean;\n  startAngle: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-pie-grid-series]',\n  template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() data: PieGridData[];\n  @Input() innerRadius = 70;\n  @Input() outerRadius = 80;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  layout: any;\n  arcs: PieArc[];\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.layout = pie<any, any>()\n      .value(d => d.data.value)\n      .sort(null);\n\n    this.arcs = this.getArcs();\n  }\n\n  getArcs(): PieArc[] {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data): void {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  label(arc): string {\n    return arc.data.name;\n  }\n\n  color(arc): string {\n    return this.colors(this.label(arc));\n  }\n}\n","import {\n  Component,\n  SimpleChanges,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { max } from 'd3-array';\nimport { arc, pie } from 'd3-shape';\nimport { ViewDimensions } from '../common/types';\nimport { ColorHelper } from '../common/color.helper';\n\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { PieData } from './pie-label.component';\n\n@Component({\n  selector: 'g[ngx-charts-pie-series]',\n  template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieSeriesComponent implements OnChanges {\n  @Input() colors: ColorHelper;\n  @Input() series: DataItem[] = [];\n  @Input() dims: ViewDimensions;\n  @Input() innerRadius: number = 60;\n  @Input() outerRadius: number = 80;\n  @Input() explodeSlices: boolean;\n  @Input() showLabels: boolean;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: (o: any) => any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  max: number;\n  data: PieData[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    const pieGenerator = pie<any, any>()\n      .value(d => d.value)\n      .sort(null);\n\n    const arcData = pieGenerator(this.series);\n\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc(): any {\n    const factor = 1.5;\n\n    return arc()\n      .innerRadius(this.outerRadius * factor)\n      .outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData): any {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n        if (!this.labelVisible(b)) {\n          continue;\n        }\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc): boolean {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc): string {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n    return this.label(myArc);\n  }\n\n  label(myArc): string {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc): string {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc): any {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\nimport { PieLabelComponent } from './pie-label.component';\nimport { PieArcComponent } from './pie-arc.component';\nimport { PieChartComponent } from './pie-chart.component';\nimport { PieGridComponent } from './pie-grid.component';\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\nimport { PieSeriesComponent } from './pie-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ],\n  exports: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ]\n})\nexport class PieChartModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { PolarChartComponent } from './polar-chart.component';\nimport { PolarSeriesComponent } from './polar-series.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { LineChartModule } from '../line-chart/line-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\n  declarations: [PolarChartComponent, PolarSeriesComponent],\n  exports: [PolarChartComponent, PolarSeriesComponent]\n})\nexport class PolarChartModule {}\n","export function calculateTextWidth(fontFamilyKey: {}, text: string, defaultWidth = 8) {\n  return text.split('').reduce((acc, curr) => {\n    const width = fontFamilyKey[curr] || defaultWidth;\n    return acc + width;\n  }, 0);\n}\n","export const VERDANA_FONT_WIDTHS_16_PX = {\n  '0': 10,\n  '1': 10,\n  '2': 10,\n  '3': 10,\n  '4': 10,\n  '5': 10,\n  '6': 10,\n  '7': 10,\n  '8': 10,\n  '9': 10,\n  A: 11,\n  B: 11,\n  C: 11,\n  D: 12,\n  E: 10,\n  F: 9,\n  G: 12,\n  H: 12,\n  I: 7,\n  J: 7,\n  K: 11,\n  L: 9,\n  M: 13,\n  N: 12,\n  O: 13,\n  P: 10,\n  Q: 13,\n  R: 11,\n  S: 11,\n  T: 10,\n  U: 12,\n  V: 11,\n  W: 16,\n  X: 11,\n  Y: 10,\n  Z: 11,\n  a: 10,\n  b: 10,\n  c: 8,\n  d: 10,\n  e: 10,\n  f: 6,\n  g: 10,\n  h: 10,\n  i: 4,\n  j: 6,\n  k: 9,\n  l: 4,\n  m: 16,\n  n: 10,\n  o: 10,\n  p: 10,\n  q: 10,\n  r: 7,\n  s: 8,\n  t: 6,\n  u: 10,\n  v: 9,\n  w: 13,\n  x: 9,\n  y: 9,\n  z: 8,\n  '!': 6,\n  '@': 16,\n  '#': 13,\n  $: 10,\n  '%': 17,\n  '^': 13,\n  '&': 12,\n  '*': 10,\n  '(': 7,\n  ')': 7,\n  _: 10,\n  '-': 7,\n  '+': 13,\n  '=': 13,\n  ',': 6,\n  '.': 6,\n  '/': 7,\n  \"'\": 4,\n  ':': 7,\n  '|': 7,\n  '?': 9,\n  ';': 7,\n  '<': 13,\n  '>': 13\n};\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { roundedRect } from '../common/shape.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { decimalChecker, count } from '../common/count/count.helper';\nimport { GridData } from '../common/grid-layout.helper';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { calculateTextWidth } from '../utils/calculate-width';\nimport { VERDANA_FONT_WIDTHS_16_PX } from '../common/constants/font-widths';\n\n@Component({\n  selector: 'g[ngx-charts-card]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardComponent implements OnChanges, OnDestroy {\n  @Input() color: string;\n  @Input() bandColor: string;\n  @Input() textColor: string;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() label: string;\n  @Input() data: GridData;\n  @Input() medianSize: number;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\n\n  element: HTMLElement;\n  value: string = '';\n  transform: string;\n  formattedLabel: string;\n  cardWidth: number;\n  cardHeight: number;\n  textWidth: number;\n  textFontSize: number = 12;\n  textTransform: string = '';\n  initialized: boolean = false;\n  animationReq: number;\n\n  bandHeight: number = 10;\n  transformBand: string;\n  textPadding: number[] = [10, 20, 5, 20];\n  labelFontSize: number = 15;\n\n  bandPath: string;\n\n  constructor(\n    element: ElementRef,\n    private cd: ChangeDetectorRef,\n    private zone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }\n\n  update(): void {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n\n      this.label = this.label ? this.label : (this.data.name as any);\n\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n\n      const value = hasValue ? valueFormatting(cardData) : '';\n\n      this.value = this.paddedValue(value);\n      this.setPadding();\n\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n\n      setTimeout(() => {\n        if (isPlatformBrowser(this.platformId)) {\n          this.scaleText();\n        }\n        this.value = value;\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value: string): string {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n    return value;\n  }\n\n  startCount(): void {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({ value, finished }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText(): void {\n    this.zone.run(() => {\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  scaleTextSSR() {\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n    const height = 18;\n    const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n    const availableWidth = this.cardWidth - 2 * textPadding;\n    const availableHeight = this.cardHeight / 3;\n\n    const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n\n    this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n    this.labelFontSize = Math.min(this.textFontSize, 15);\n\n    this.setPadding();\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n}\n","import * as d3_color from 'd3-color';\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nexport function hexToRgb(value: string): any {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nexport function invertColor(value: string): string {\n  const color = d3_color.rgb(value);\n  const { r, g, b, opacity } = color;\n  if (opacity === 0) {\n    return color.toString();\n  }\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n\n  return shadeRGBColor(color, depth);\n}\n\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nexport function shadeRGBColor({ r, g, b }, percent: number): string {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n\n  return `rgb(${r}, ${g}, ${b})`;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { invertColor } from '../utils/color-utils';\nimport { GridItem, GridData } from '../common/grid-layout.helper';\nimport { ViewDimensions } from '../common/types';\nimport { ColorHelper } from '../common/color.helper';\n\nexport interface CardModel extends GridItem {\n  color: string;\n  tooltipText: string;\n}\n\n@Component({\n  selector: 'g[ngx-charts-card-series]',\n  template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardSeriesComponent implements OnChanges {\n  @Input() data: CardModel[];\n  @Input() dims: ViewDimensions;\n  @Input() colors: ColorHelper;\n  @Input() innerPadding: number = 15;\n\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cards: CardModel[];\n  emptySlots: any[];\n  medianSize: number;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data\n        .map(d => {\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue\n            ? valueFormatting({\n                data: d.data,\n                label: d ? d.data.name : '',\n                value: d && d.data ? d.data.value : ''\n              }).length\n            : 0;\n        })\n        .sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards(): CardModel[] {\n    const yPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n\n    return this.data.map((d, index) => {\n      let label = d.data.name as any;\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card): string {\n    return card.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\nimport { ScaleType, ViewDimensions } from '../common/types';\nimport { CardModel } from './card-series.component';\n\n@Component({\n  selector: 'ngx-charts-number-card',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberCardComponent extends BaseChartComponent {\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\n  @Input() innerPadding: number = 15;\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() designatedTotal: number;\n\n  dims: ViewDimensions;\n  data: CardModel[];\n  colors: ColorHelper;\n  transform: string;\n  domain: any[];\n  margin: number[] = [10, 10, 10, 10];\n\n  get clickable(): boolean {\n    return !!this.select.observers.length;\n  }\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({ value: null });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal) as any;\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { CardComponent } from './card.component';\nimport { CardSeriesComponent } from './card-series.component';\nimport { NumberCardComponent } from './number-card.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n})\nexport class NumberCardModule {}\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { invertColor } from '../utils/color-utils';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nimport { Gradient } from '../common/types';\nimport { DataItem } from '../models/chart-data.model';\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell]',\n  template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [style.cursor]=\"'pointer'\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellComponent implements OnChanges {\n  @Input() data: DataItem;\n  @Input() fill: string;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() label: string;\n  @Input() value: any;\n  // @Input() valueType;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  gradientStops: Gradient[];\n  gradientId: string;\n  gradientUrl: string;\n\n  element: HTMLElement;\n  transform: string;\n  formattedLabel: string;\n  formattedValue: string;\n  initialized: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update(): void {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n\n    this.animateToCurrentForm();\n  }\n\n  getTextColor(): string {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops(): Gradient[] {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { ViewDimensions } from '../common/types';\n\ninterface TreeMapCell {\n  data: DataItem;\n  fill: string;\n  height: number;\n  label: string;\n  value: any;\n  width: number;\n  x: number;\n  y: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellSeriesComponent implements OnChanges {\n  @Input() data: any; // type this\n  @Input() dims: ViewDimensions;\n  @Input() colors: ColorHelper;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cells: TreeMapCell[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): TreeMapCell[] {\n    return this.data.children\n      .filter(d => {\n        return d.depth === 1;\n      })\n      .map((d, index) => {\n        const label = d.id;\n\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: this.colors.getColor(label),\n          label,\n          value: d.value\n        };\n      });\n  }\n\n  getTooltipText({ label, value }: { label: any; value: any }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { treemap, stratify } from 'd3-hierarchy';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { ViewDimensions, ScaleType } from '../common/types';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-tree-map',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['./tree-map.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapComponent extends BaseChartComponent {\n  @Input() results: DataItem[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n\n  @Output() select = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  domain: any;\n  transform: any;\n  colors: ColorHelper;\n  treemap: any;\n  data: DataItem;\n  margin: number[] = [10, 10, 10, 10];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.domain = this.getDomain();\n\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\n\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n\n    const root = stratify<any>()\n      .id(d => {\n        let label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n        return label;\n      })\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n      .sum(d => d.value);\n\n    this.data = this.treemap(root);\n\n    this.setColors();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { ScaleType, ViewDimensions } from '../common/types';\nimport { calculateTextWidth } from '../utils/calculate-width';\nimport { VERDANA_FONT_WIDTHS_16_PX } from '../common/constants/font-widths';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\nenum ElementType {\n  Value = 'value',\n  Units = 'units'\n}\n@Component({\n  selector: 'ngx-charts-linear-gauge',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() value: number = 0;\n  @Input() units: string;\n  @Input() previousValue: number;\n  @Input() valueFormatting: any;\n\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\n\n  dims: ViewDimensions;\n  valueDomain: [number, number];\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n  margin: number[] = [10, 20, 10, 20];\n  transformLine: string;\n\n  valueResizeScale: number = 1;\n  unitsResizeScale: number = 1;\n  valueTextTransform: string = '';\n  valueTranslate: string = '';\n  unitsTextTransform: string = '';\n  unitsTranslate: string = '';\n  displayValue: string;\n  hasPreviousValue: boolean;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText(ElementType.Value);\n      this.scaleText(ElementType.Units);\n    });\n  }\n\n  update(): void {\n    super.update();\n\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.setColors();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR('value');\n      this.scaleTextSSR('units');\n    } else {\n      setTimeout(() => this.scaleText(ElementType.Value), 50);\n      setTimeout(() => this.scaleText(ElementType.Units), 50);\n    }\n  }\n\n  getValueDomain(): [number, number] {\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element: ElementType, repeat: boolean = true): void {\n    let el;\n    let resizeScale;\n    if (element === ElementType.Value) {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const { width, height } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === ElementType.Value) {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n      this.cd.markForCheck();\n      if (repeat && isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  scaleTextSSR(element) {\n    let resizeScale = 1;\n\n    const value = element === 'value' ? this.displayValue : this.units;\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n    const height = 25;\n\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (element === 'value') {\n      this.valueResizeScale = resizeScale;\n      this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    } else {\n      this.unitsResizeScale = resizeScale;\n      this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  onClick(): void {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { TreeMapCellComponent } from './tree-map-cell.component';\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\nimport { TreeMapComponent } from './tree-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n})\nexport class TreeMapModule {}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { LegendOptions, LegendPosition, ScaleType, ViewDimensions } from '../common/types';\nimport { ArcItem } from './gauge-arc.component';\n\ninterface Arcs {\n  backgroundArc: ArcItem;\n  valueArc: ArcItem;\n}\n\n@Component({\n  selector: 'ngx-charts-gauge',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() textValue: string;\n  @Input() units: string;\n  @Input() bigSegments: number = 10;\n  @Input() smallSegments: number = 5;\n  @Input() results: any[];\n  @Input() showAxis: boolean = true;\n  @Input() startAngle: number = -120;\n  @Input() angleSpan: number = 240;\n  @Input() activeEntries: any[] = [];\n  @Input() axisTickFormatting: any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() showText: boolean = true;\n\n  // Specify margins\n  @Input() margin: number[];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  @ViewChild('textEl') textEl: ElementRef;\n\n  dims: ViewDimensions;\n  domain: any[];\n  valueDomain: [number, number];\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n\n  outerRadius: number;\n  textRadius: number; // max available radius for the text\n  resizeScale: number = 1;\n  rotation: string = '';\n  textTransform: string = 'scale(1, 1)';\n  cornerRadius: number = 10;\n  arcs: Arcs[];\n  displayValue: string;\n  legendOptions: LegendOptions;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update(): void {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    }\n\n    // make the starting angle positive\n    if (this.startAngle < 0) {\n      this.startAngle = (this.startAngle % 360) + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n\n    this.arcs = this.getArcs();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs(): any[] {\n    const arcs = [];\n\n    const availableRadius = this.outerRadius * 0.7;\n\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n\n    let i = 0;\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n\n      const backgroundArc = {\n        endAngle: (this.angleSpan * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n\n      const valueArc = {\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat: boolean = true): void {\n    if (!this.showText) {\n      return;\n    }\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  getLegendOptions(): LegendOptions {\n    return {\n      scaleType: ScaleType.Ordinal,\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index: number, item: Arcs): any {\n    return item.valueArc.data.name;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nexport interface ArcItem {\n  data: DataItem;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-gauge-arc]',\n  template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeArcComponent {\n  @Input() backgroundArc: ArcItem;\n  @Input() valueArc: ArcItem;\n  @Input() cornerRadius: number;\n  @Input() colors: ColorHelper;\n  @Input() isActive: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  tooltipText(arc: ArcItem): string {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { line } from 'd3-shape';\nimport { TextAnchor } from '../common/types';\n\ninterface Big {\n  line: string;\n  text: string;\n  textAnchor: string;\n  textTransform: string;\n}\n\ninterface Ticks {\n  big: Big[];\n  small: Array<{ line: string }>;\n}\n\n@Component({\n  selector: 'g[ngx-charts-gauge-axis]',\n  template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeAxisComponent implements OnChanges {\n  @Input() bigSegments: number;\n  @Input() smallSegments: number;\n  @Input() min: number;\n  @Input() max: number;\n  @Input() angleSpan: number;\n  @Input() startAngle: number;\n  @Input() radius: number;\n  @Input() valueScale: any;\n  @Input() tickFormatting: any;\n\n  ticks: Ticks;\n  rotationAngle: number;\n  rotate: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.update();\n  }\n\n  update(): void {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks(): Ticks {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = (angleDeg * Math.PI) / 180;\n\n      const textAnchor = this.getTextAnchor(angleDeg);\n\n      let skip = false;\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\n\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle: number): TextAnchor {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = TextAnchor.Middle;\n    if (angle > 45 && angle <= 135) {\n      textAnchor = TextAnchor.Start;\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = TextAnchor.End;\n    }\n    return textAnchor;\n  }\n\n  getTickPath(startDistance: number, tickLength: number, angle: number): any {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n\n    const points = [\n      { x: x1, y: y1 },\n      { x: x2, y: y2 }\n    ];\n    const lineGenerator = line<any>()\n      .x(d => d.x)\n      .y(d => d.y);\n    return lineGenerator(points);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LinearGaugeComponent } from './linear-gauge.component';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeArcComponent } from './gauge-arc.component';\nimport { GaugeAxisComponent } from './gauge-axis.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n})\nexport class GaugeModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from './common/chart-common.module';\nimport { AreaChartModule } from './area-chart/area-chart.module';\nimport { BarChartModule } from './bar-chart/bar-chart.module';\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\nimport { HeatMapModule } from './heat-map/heat-map.module';\nimport { LineChartModule } from './line-chart/line-chart.module';\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\nimport { NumberCardModule } from './number-card/number-card.module';\nimport { PieChartModule } from './pie-chart/pie-chart.module';\nimport { TreeMapModule } from './tree-map/tree-map.module';\nimport { GaugeModule } from './gauge/gauge.module';\nimport { ngxChartsPolyfills } from './polyfills';\n\n@NgModule({\n  exports: [\n    ChartCommonModule,\n    AreaChartModule,\n    BarChartModule,\n    BubbleChartModule,\n    HeatMapModule,\n    LineChartModule,\n    PolarChartModule,\n    NumberCardModule,\n    PieChartModule,\n    TreeMapModule,\n    GaugeModule\n  ]\n})\nexport class NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n}\n","// The export is needed here to generate a valid polyfills.metadata.json file\nexport function ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n","import { timeFormat } from 'd3-time-format';\n\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\n  return function (label: string): string {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(<any>label);\n    }\n\n    return label.toString();\n  };\n}\n"]}