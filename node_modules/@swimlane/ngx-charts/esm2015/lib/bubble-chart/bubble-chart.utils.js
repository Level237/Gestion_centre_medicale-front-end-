import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';
import { ScaleType } from '../common/types';
export function getDomain(values, scaleType, autoScale, minVal, maxVal) {
    let domain = [];
    if (scaleType === ScaleType.Linear) {
        values = values.map(v => Number(v));
        if (!autoScale) {
            values.push(0);
        }
    }
    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {
        const min = minVal ? minVal : Math.min(...values);
        const max = maxVal ? maxVal : Math.max(...values);
        domain = [min, max];
    }
    else {
        domain = values;
    }
    return domain;
}
export function getScale(domain, range, scaleType, roundDomains) {
    let scale;
    if (scaleType === ScaleType.Time) {
        scale = scaleTime().range(range).domain(domain);
    }
    else if (scaleType === ScaleType.Linear) {
        scale = scaleLinear().range(range).domain(domain);
        if (roundDomains) {
            scale = scale.nice();
        }
    }
    else if (scaleType === ScaleType.Ordinal) {
        scale = scalePoint().range([range[0], range[1]]).domain(domain);
    }
    return scale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnViYmxlLWNoYXJ0LnV0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL3N3aW1sYW5lL25neC1jaGFydHMvc3JjLyIsInNvdXJjZXMiOlsibGliL2J1YmJsZS1jaGFydC9idWJibGUtY2hhcnQudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzlELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1QyxNQUFNLFVBQVUsU0FBUyxDQUN2QixNQUFhLEVBQ2IsU0FBb0IsRUFDcEIsU0FBa0IsRUFDbEIsTUFBZSxFQUNmLE1BQWU7SUFFZixJQUFJLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFDMUIsSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUNsQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hCO0tBQ0Y7SUFFRCxJQUFJLFNBQVMsS0FBSyxTQUFTLENBQUMsSUFBSSxJQUFJLFNBQVMsS0FBSyxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ2xFLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDbEQsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUVsRCxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDckI7U0FBTTtRQUNMLE1BQU0sR0FBRyxNQUFNLENBQUM7S0FDakI7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFnQixFQUFFLEtBQWUsRUFBRSxTQUFvQixFQUFFLFlBQXFCO0lBQ3JHLElBQUksS0FBVSxDQUFDO0lBRWYsSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtRQUNoQyxLQUFLLEdBQUcsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNqRDtTQUFNLElBQUksU0FBUyxLQUFLLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFDekMsS0FBSyxHQUFHLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN0QjtLQUNGO1NBQU0sSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLE9BQU8sRUFBRTtRQUMxQyxLQUFLLEdBQUcsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2pFO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NhbGVMaW5lYXIsIHNjYWxlUG9pbnQsIHNjYWxlVGltZSB9IGZyb20gJ2QzLXNjYWxlJztcbmltcG9ydCB7IFNjYWxlVHlwZSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21haW4oXG4gIHZhbHVlczogYW55W10sXG4gIHNjYWxlVHlwZTogU2NhbGVUeXBlLFxuICBhdXRvU2NhbGU6IGJvb2xlYW4sXG4gIG1pblZhbD86IG51bWJlcixcbiAgbWF4VmFsPzogbnVtYmVyXG4pOiBudW1iZXJbXSB7XG4gIGxldCBkb21haW46IG51bWJlcltdID0gW107XG4gIGlmIChzY2FsZVR5cGUgPT09IFNjYWxlVHlwZS5MaW5lYXIpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKHYgPT4gTnVtYmVyKHYpKTtcbiAgICBpZiAoIWF1dG9TY2FsZSkge1xuICAgICAgdmFsdWVzLnB1c2goMCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNjYWxlVHlwZSA9PT0gU2NhbGVUeXBlLlRpbWUgfHwgc2NhbGVUeXBlID09PSBTY2FsZVR5cGUuTGluZWFyKSB7XG4gICAgY29uc3QgbWluID0gbWluVmFsID8gbWluVmFsIDogTWF0aC5taW4oLi4udmFsdWVzKTtcbiAgICBjb25zdCBtYXggPSBtYXhWYWwgPyBtYXhWYWwgOiBNYXRoLm1heCguLi52YWx1ZXMpO1xuXG4gICAgZG9tYWluID0gW21pbiwgbWF4XTtcbiAgfSBlbHNlIHtcbiAgICBkb21haW4gPSB2YWx1ZXM7XG4gIH1cblxuICByZXR1cm4gZG9tYWluO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NhbGUoZG9tYWluOiBudW1iZXJbXSwgcmFuZ2U6IG51bWJlcltdLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSwgcm91bmREb21haW5zOiBib29sZWFuKTogYW55IHtcbiAgbGV0IHNjYWxlOiBhbnk7XG5cbiAgaWYgKHNjYWxlVHlwZSA9PT0gU2NhbGVUeXBlLlRpbWUpIHtcbiAgICBzY2FsZSA9IHNjYWxlVGltZSgpLnJhbmdlKHJhbmdlKS5kb21haW4oZG9tYWluKTtcbiAgfSBlbHNlIGlmIChzY2FsZVR5cGUgPT09IFNjYWxlVHlwZS5MaW5lYXIpIHtcbiAgICBzY2FsZSA9IHNjYWxlTGluZWFyKCkucmFuZ2UocmFuZ2UpLmRvbWFpbihkb21haW4pO1xuXG4gICAgaWYgKHJvdW5kRG9tYWlucykge1xuICAgICAgc2NhbGUgPSBzY2FsZS5uaWNlKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHNjYWxlVHlwZSA9PT0gU2NhbGVUeXBlLk9yZGluYWwpIHtcbiAgICBzY2FsZSA9IHNjYWxlUG9pbnQoKS5yYW5nZShbcmFuZ2VbMF0sIHJhbmdlWzFdXSkuZG9tYWluKGRvbWFpbik7XG4gIH1cblxuICByZXR1cm4gc2NhbGU7XG59XG4iXX0=